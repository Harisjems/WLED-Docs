{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to WLED MoonModules MoonModules/WLED is a fork from Aircoookie/WLED which contains latest merge of v0.14 of WLED with additional features (see Merge-history ). This fork is created by members of the Atuline/WLED team to make development against v0.14 possible while still preserving Atuline/WLED v0.13 as a stable and supported version. The Atuline/WLED fork is also called WLED SR (Sound Reactive). Our latest work can be found here: mdev . You can compile it yourself using PlatformIO.ini entry esp32_4MB_max , or get a build from Serg74 (daily) or wladi (periodically). See Features for an overview what is in the pipeline. Disclaimer: using this software is the users responsibility as it is not bug free. Therefore contributors of this repo are not reliable for anything including but not limited to spontaneous combustion of the entire led strip, the house and the inevitable heat death of the universe Join the Discord server to discuss everything about WLED MM and SR! WLED Aircoookie welcome \ud83d\udc47 Welcome to my project WLED! \u2728 A fast and feature-rich implementation of an ESP8266/ESP32 webserver to control NeoPixel (WS2812B, WS2811, SK6812) LEDs or also SPI based chipsets like the WS2801 and APA102! \u2699\ufe0f Features WS2812FX library integrated for over 100 special effects FastLED noise effects and 50 palettes Modern UI with color, effect and segment controls Segments to set different effects and colors to parts of the LEDs Settings page - configuration over network Access Point and station mode - automatic failsafe AP Up to 3 LED outputs per ESP8266 instance and 10 LED outputs per ESP32 instance Support for RGBW strips Up to 250 user presets to save and load colors/effects easily, supports cycling through them. Presets can be used to automatically execute API calls Nightlight function (gradually dims down) Full OTA software updatability (HTTP + ArduinoOTA), password protectable Configurable analog clock + support for the Cronixie kit by Diamex Configurable Auto Brightness limit for safer operation Filesystem-based config for easier backup of presets and settings Native Home-Assistant integration : \ud83d\udca1 Supported light control interfaces WLED app for Android and iOS JSON and HTTP request APIs MQTT Blynk IoT E1.31 , Art-Net , DDP and TPM2.net Hyperion UDP realtime Alexa voice control (including dimming and color) Sync to Philips Hue lights Adalight (PC ambilight via serial) and TPM2 Sync color of multiple WLED devices (UDP notifier) Infrared remotes (24-key RGB, receiver required) Simple timers/schedules (time from NTP, timezones/DST supported) \ud83d\udcf2 Quick start guide and documentation See the getting started page! On this page you can find excellent tutorials made by the community and helpful tools to help you get your new lamp up and running! \ud83d\uddbc\ufe0f User interface \ud83d\udcbe Compatible hardware See here ! \u270c\ufe0f Other Licensed under the MIT license Credits here ! Join the Discord server to discuss everything about WLED! Check out the WLED Discourse forum ! You can also send me mails to dev.aircoookie@gmail.com , but please only do so if you want to talk to me privately. If WLED really brightens up your every day, you can Disclaimer If you are sensitive to photosensitive epilepsy it is not recommended that you use this software. In case you still want to try, don't use strobe, lighting or noise modes or high effect speed settings. As per the MIT license, I assume no liability for any damage to you or any other person or equipment.","title":"Welcome"},{"location":"#welcome-to-wled-moonmodules","text":"MoonModules/WLED is a fork from Aircoookie/WLED which contains latest merge of v0.14 of WLED with additional features (see Merge-history ). This fork is created by members of the Atuline/WLED team to make development against v0.14 possible while still preserving Atuline/WLED v0.13 as a stable and supported version. The Atuline/WLED fork is also called WLED SR (Sound Reactive). Our latest work can be found here: mdev . You can compile it yourself using PlatformIO.ini entry esp32_4MB_max , or get a build from Serg74 (daily) or wladi (periodically). See Features for an overview what is in the pipeline. Disclaimer: using this software is the users responsibility as it is not bug free. Therefore contributors of this repo are not reliable for anything including but not limited to spontaneous combustion of the entire led strip, the house and the inevitable heat death of the universe Join the Discord server to discuss everything about WLED MM and SR! WLED Aircoookie welcome \ud83d\udc47","title":"Welcome to WLED MoonModules"},{"location":"#welcome-to-my-project-wled","text":"A fast and feature-rich implementation of an ESP8266/ESP32 webserver to control NeoPixel (WS2812B, WS2811, SK6812) LEDs or also SPI based chipsets like the WS2801 and APA102!","title":"Welcome to my project WLED! \u2728"},{"location":"#features","text":"WS2812FX library integrated for over 100 special effects FastLED noise effects and 50 palettes Modern UI with color, effect and segment controls Segments to set different effects and colors to parts of the LEDs Settings page - configuration over network Access Point and station mode - automatic failsafe AP Up to 3 LED outputs per ESP8266 instance and 10 LED outputs per ESP32 instance Support for RGBW strips Up to 250 user presets to save and load colors/effects easily, supports cycling through them. Presets can be used to automatically execute API calls Nightlight function (gradually dims down) Full OTA software updatability (HTTP + ArduinoOTA), password protectable Configurable analog clock + support for the Cronixie kit by Diamex Configurable Auto Brightness limit for safer operation Filesystem-based config for easier backup of presets and settings Native Home-Assistant integration :","title":"\u2699\ufe0f Features"},{"location":"#supported-light-control-interfaces","text":"WLED app for Android and iOS JSON and HTTP request APIs MQTT Blynk IoT E1.31 , Art-Net , DDP and TPM2.net Hyperion UDP realtime Alexa voice control (including dimming and color) Sync to Philips Hue lights Adalight (PC ambilight via serial) and TPM2 Sync color of multiple WLED devices (UDP notifier) Infrared remotes (24-key RGB, receiver required) Simple timers/schedules (time from NTP, timezones/DST supported)","title":"\ud83d\udca1 Supported light control interfaces"},{"location":"#quick-start-guide-and-documentation","text":"See the getting started page! On this page you can find excellent tutorials made by the community and helpful tools to help you get your new lamp up and running!","title":"\ud83d\udcf2 Quick start guide and documentation"},{"location":"#user-interface","text":"","title":"\ud83d\uddbc\ufe0f User interface"},{"location":"#compatible-hardware","text":"See here !","title":"\ud83d\udcbe Compatible hardware"},{"location":"#other","text":"Licensed under the MIT license Credits here ! Join the Discord server to discuss everything about WLED! Check out the WLED Discourse forum ! You can also send me mails to dev.aircoookie@gmail.com , but please only do so if you want to talk to me privately. If WLED really brightens up your every day, you can Disclaimer If you are sensitive to photosensitive epilepsy it is not recommended that you use this software. In case you still want to try, don't use strobe, lighting or noise modes or high effect speed settings. As per the MIT license, I assume no liability for any damage to you or any other person or equipment.","title":"\u270c\ufe0f Other"},{"location":"2D/wip/","text":"This page is work in progress Check WLED Atuline Wiki for original content Template text: Fork specific info WLED SR","title":"WIP"},{"location":"2D/wip/#fork-specific-info","text":"","title":"Fork specific info"},{"location":"2D/wip/#wled-sr","text":"","title":"WLED SR"},{"location":"WLEDSR/%28temporary%29-WLEDSR-improvements-and-bugfixes-from-0.13.2-to-0.13.3/","text":"User Interface and generic features Info Page: status info for soundreactive (similar to upstream 0.14.0) Info Page: basic hardware info added (similar to MoonModules 0.14.0) 4 Line Display and 4LD_alt usermod: always use fast I2C hardware driver Audio Processing Analog input: Some improvements - might help in case you could not get analog input to work in SR 0.13.2 New sound processing core (ArduinoFFT) is 10 times faster! improves performance of both analog and I2S digital audio input NB: This also improves co-existence with other usermods and with additional features like MQTT UDP sound sync improve performance/reliability of UDP sound sync Support for receiving \"V2\" format, which is sent by upstream 0.14.0 Effects Minor bugfixes, like missed pixels in \"Stream\" effects, and a few speedups Sanity check added in setPixelColor(), to avoid memory errors due to negative pixel index NB: this change also affects realtime modes (DDP, DMX, E13.1, LedFx, ...) Custom Effects, 2D/3D, live preview Liveviewws2D: show playlist / preset id (for HB playlist animations) Custom Effects 3.0.1: add rgbw, sPC for 2D, colorFromPalette out of sPC Peek1D for strip repaired. Peek3D for cubes added (experimental) Fix setPixelColor when using grid+Serpentine misc. bugfixes, and fixes from upstream WLED 0.14.0 auto-reboot after cfg.json restore (to avoid that WLED directly overwrites them after upload) Time Zones: added PKT (Pakistan), fixed NZ and AEST (Australia) time zones buttons: fix for ShortPressAction; ensure that buttons remain responsive also with long LED strings analog buttons: don't do analogRead() when the GPIO does not support analog input udp driver(udp.cpp): small bugfixes PlatformIO.ini: upgrade to fixed ESPAsyncWebServer (>= 2.0.7); PlatformIO.ini: use 80MHz FLASH speed for all \"Sondreactive\" build environments. Changes from upstream v0.13.3 Fixed flickering Fixed boot issues on new installs Added support for LPD6803 experimental: optional watchdog feature, to auto-reboot a \"hung\" device. Compile with -D WLED_WATCHDOG_TIMEOUT=30 to activate","title":"(temporary) WLEDSR improvements and bugfixes from 0.13.2 to 0.13.3"},{"location":"WLEDSR/%28temporary%29-WLEDSR-improvements-and-bugfixes-from-0.13.2-to-0.13.3/#user-interface-and-generic-features","text":"Info Page: status info for soundreactive (similar to upstream 0.14.0) Info Page: basic hardware info added (similar to MoonModules 0.14.0) 4 Line Display and 4LD_alt usermod: always use fast I2C hardware driver","title":"User Interface and generic features"},{"location":"WLEDSR/%28temporary%29-WLEDSR-improvements-and-bugfixes-from-0.13.2-to-0.13.3/#audio-processing","text":"Analog input: Some improvements - might help in case you could not get analog input to work in SR 0.13.2 New sound processing core (ArduinoFFT) is 10 times faster! improves performance of both analog and I2S digital audio input NB: This also improves co-existence with other usermods and with additional features like MQTT","title":"Audio Processing"},{"location":"WLEDSR/%28temporary%29-WLEDSR-improvements-and-bugfixes-from-0.13.2-to-0.13.3/#udp-sound-sync","text":"improve performance/reliability of UDP sound sync Support for receiving \"V2\" format, which is sent by upstream 0.14.0","title":"UDP sound sync"},{"location":"WLEDSR/%28temporary%29-WLEDSR-improvements-and-bugfixes-from-0.13.2-to-0.13.3/#effects","text":"Minor bugfixes, like missed pixels in \"Stream\" effects, and a few speedups Sanity check added in setPixelColor(), to avoid memory errors due to negative pixel index NB: this change also affects realtime modes (DDP, DMX, E13.1, LedFx, ...)","title":"Effects"},{"location":"WLEDSR/%28temporary%29-WLEDSR-improvements-and-bugfixes-from-0.13.2-to-0.13.3/#custom-effects-2d3d-live-preview","text":"Liveviewws2D: show playlist / preset id (for HB playlist animations) Custom Effects 3.0.1: add rgbw, sPC for 2D, colorFromPalette out of sPC Peek1D for strip repaired. Peek3D for cubes added (experimental) Fix setPixelColor when using grid+Serpentine","title":"Custom Effects, 2D/3D, live preview"},{"location":"WLEDSR/%28temporary%29-WLEDSR-improvements-and-bugfixes-from-0.13.2-to-0.13.3/#misc-bugfixes-and-fixes-from-upstream-wled-0140","text":"auto-reboot after cfg.json restore (to avoid that WLED directly overwrites them after upload) Time Zones: added PKT (Pakistan), fixed NZ and AEST (Australia) time zones buttons: fix for ShortPressAction; ensure that buttons remain responsive also with long LED strings analog buttons: don't do analogRead() when the GPIO does not support analog input udp driver(udp.cpp): small bugfixes PlatformIO.ini: upgrade to fixed ESPAsyncWebServer (>= 2.0.7); PlatformIO.ini: use 80MHz FLASH speed for all \"Sondreactive\" build environments.","title":"misc. bugfixes, and fixes from upstream WLED 0.14.0"},{"location":"WLEDSR/%28temporary%29-WLEDSR-improvements-and-bugfixes-from-0.13.2-to-0.13.3/#changes-from-upstream-v0133","text":"Fixed flickering Fixed boot issues on new installs Added support for LPD6803 experimental: optional watchdog feature, to auto-reboot a \"hung\" device. Compile with -D WLED_WATCHDOG_TIMEOUT=30 to activate","title":"Changes from upstream v0.13.3"},{"location":"WLEDSR/2D-Functionality/","text":"2D functionality An XY() function which returns the index number of the X-Y coordinate on the matrix has been added. The origin (x=0,y=0) is at the top left of the display, with X axis extending to the right, Y axis toward the bottom. The LED order starts from 0 at the top left, and ascends to the right on the top row. 2D addressing is leds[XY(column, row)] A serpentine/zig-zag setting has been added to 'LED Settings'. With serpentine mode enabled, the led index on every odd row (top row is row 0) is ascending from right to left, and on even rows is ascending from left to right The opposite of serpentine is \"progressive\", where all rows are oriented in ascending order from left to right As documented in FastLED , leds[0] should end up being at the top left of your array: Don't enable serpentine setting if your pixels are laid out all running the same way, like this: 0 > 1 > 2 > 3 > 4 | .----<----<----<----' | 5 > 6 > 7 > 8 > 9 | .----<----<----<----' | 10 > 11 > 12 > 13 > 14 | .----<----<----<----' | 15 > 16 > 17 > 18 > 19 Enable serpentine setting if your pixels are laid out back-and-forth, like this: 0 > 1 > 2 > 3 > 4 | | 9 < 8 < 7 < 6 < 5 | | 10 > 11 > 12 > 13 > 14 | | 19 < 18 < 17 < 16 < 15 matrixWidth and matrixHeight are new 'LED Settings'. matrixWidth is the number of pixels per row. matrixHeight is the number of pixels per column. Some existing animations (as of Jan 2021) were coded for different orientations and need to be redone to match the newly agreed to orientation described above. It's likely that there will at least a minor change in animations required to support a non-rectangular or non-contiguous mapping. XY() routine update The dev branch has a new XY() function (thanks Sutaburosu) in FX.cpp, which supports multiple layouts. There are 5 orientation flags as follows: SERPENTINE - Select if your layout is serpentine. Otherwise, it's not. ROWMAJOR - Select if your layout is horizontal. De-select if it's vertical. FLIPMAJOR - Flip the major axis, ie top to bottom if it's a horizontal layout. FLIPMINOR - Flip the minor axis, ie left to right if it's a horizonal layout. TRANSPOSE - Swap the major and the minor axes (otherwise no swap). Don't use on non-square. By comparison, the author's aliexpress purchased 16x16 array needs to be configured as: Serpentine | Rowmajor | Flipmajor Note: When an X,Y value goes out of bounds, this routine writes to an LED beyond SEGLEN, and as a result, we need to use the setPixels() routine to write to the display. Note: Working with this can be confusing, so here's a simulator you can play around with to get familiar with XY() at Wokwi . Multiple panels (202106/dev) When you want to create larger matrices, the standard available panels are not big enough. They typically are 16x16 or 8x32 pixels. To support large matrices, they should be connected together. This is now supported in WLED SR (currently in dev version). Multiple panels can be specified in the LED-Preferences screen by checking Multiple Panels and then defining the number of horizontal and vertical panels. First panel should be top left, extending to the right, the extending down, until bottom right. For example if you create a 32x32 matrix by connecting 4 8x32 panels together you have 4 horizontal panels and 1 vertical panel. Alternatively if you have 4 16x16 panels, you have 2 horizontal and 2 vertical panels. In the latter case, panel ordering is: 0 1 2 3 The XY() function supports this by first determining in which panel an (x,y) coordinate should be displayed and then within a panel it's position is determined as described above (using flipmajor, serpentine etc.). In the 8x32 example above, 0<x<8 is displayed in the first panel, 8<x<16 in the second panel and so on. For each panel, the first led number is calculated. E.g. if each panel has 256 leds then the second panel first led is led[256]. The values of x and y are then corrected by the width and the height of the panel to find the place within the panel (major and minor values)","title":"2D Functionality"},{"location":"WLEDSR/2D-Functionality/#2d-functionality","text":"An XY() function which returns the index number of the X-Y coordinate on the matrix has been added. The origin (x=0,y=0) is at the top left of the display, with X axis extending to the right, Y axis toward the bottom. The LED order starts from 0 at the top left, and ascends to the right on the top row. 2D addressing is leds[XY(column, row)] A serpentine/zig-zag setting has been added to 'LED Settings'. With serpentine mode enabled, the led index on every odd row (top row is row 0) is ascending from right to left, and on even rows is ascending from left to right The opposite of serpentine is \"progressive\", where all rows are oriented in ascending order from left to right As documented in FastLED , leds[0] should end up being at the top left of your array: Don't enable serpentine setting if your pixels are laid out all running the same way, like this: 0 > 1 > 2 > 3 > 4 | .----<----<----<----' | 5 > 6 > 7 > 8 > 9 | .----<----<----<----' | 10 > 11 > 12 > 13 > 14 | .----<----<----<----' | 15 > 16 > 17 > 18 > 19 Enable serpentine setting if your pixels are laid out back-and-forth, like this: 0 > 1 > 2 > 3 > 4 | | 9 < 8 < 7 < 6 < 5 | | 10 > 11 > 12 > 13 > 14 | | 19 < 18 < 17 < 16 < 15 matrixWidth and matrixHeight are new 'LED Settings'. matrixWidth is the number of pixels per row. matrixHeight is the number of pixels per column. Some existing animations (as of Jan 2021) were coded for different orientations and need to be redone to match the newly agreed to orientation described above. It's likely that there will at least a minor change in animations required to support a non-rectangular or non-contiguous mapping.","title":"2D functionality"},{"location":"WLEDSR/2D-Functionality/#xy-routine-update","text":"The dev branch has a new XY() function (thanks Sutaburosu) in FX.cpp, which supports multiple layouts. There are 5 orientation flags as follows: SERPENTINE - Select if your layout is serpentine. Otherwise, it's not. ROWMAJOR - Select if your layout is horizontal. De-select if it's vertical. FLIPMAJOR - Flip the major axis, ie top to bottom if it's a horizontal layout. FLIPMINOR - Flip the minor axis, ie left to right if it's a horizonal layout. TRANSPOSE - Swap the major and the minor axes (otherwise no swap). Don't use on non-square. By comparison, the author's aliexpress purchased 16x16 array needs to be configured as: Serpentine | Rowmajor | Flipmajor Note: When an X,Y value goes out of bounds, this routine writes to an LED beyond SEGLEN, and as a result, we need to use the setPixels() routine to write to the display. Note: Working with this can be confusing, so here's a simulator you can play around with to get familiar with XY() at Wokwi .","title":"XY() routine update"},{"location":"WLEDSR/2D-Functionality/#multiple-panels-202106dev","text":"When you want to create larger matrices, the standard available panels are not big enough. They typically are 16x16 or 8x32 pixels. To support large matrices, they should be connected together. This is now supported in WLED SR (currently in dev version). Multiple panels can be specified in the LED-Preferences screen by checking Multiple Panels and then defining the number of horizontal and vertical panels. First panel should be top left, extending to the right, the extending down, until bottom right. For example if you create a 32x32 matrix by connecting 4 8x32 panels together you have 4 horizontal panels and 1 vertical panel. Alternatively if you have 4 16x16 panels, you have 2 horizontal and 2 vertical panels. In the latter case, panel ordering is: 0 1 2 3 The XY() function supports this by first determining in which panel an (x,y) coordinate should be displayed and then within a panel it's position is determined as described above (using flipmajor, serpentine etc.). In the 8x32 example above, 0<x<8 is displayed in the first panel, 8<x<16 in the second panel and so on. For each panel, the first led number is calculated. E.g. if each panel has 256 leds then the second panel first led is led[256]. The values of x and y are then corrected by the width and the height of the panel to find the place within the panel (major and minor values)","title":"Multiple panels (202106/dev)"},{"location":"WLEDSR/2D-Support/","text":"Introduction In order to accommodate 2D effects we have modified how Segment settings are used and added 2D Matrix and panel variables on the Led Preferences settings. Note: Currently only working in dev. You are invited to test this and give feedback on Beta testing discord channel 2D architecture WLED SR distinguishes between the following levels * 2D Segment (dev) * 2D Matrix (dev) * 2D Panel (dev) An effect is plotted on a segment. A segment is a rectangle on a matrix (logical level). A matrix is implemented by one or more identical led panels, with a specific layout (e.g. first led bottom left, serpentine, physical level). Note: 2D effects can also be projected on a 1D LED Strip instead of a 2D Panel. e.g. for a led strip of 144 leds you can define width=height=12 and each zone of 12 leds is a row of a matrix. Rows are then side by side instead of above each other. Some 2D effects, e.g. graphic equalizer look still pretty cool on strips (as is the other way around with 1D effects on a 2D matrix like NoiseMove or Sparkle). 2D Segments As WLED supports multiple segments, all effects and therefore also 2D effects are first projected on a segment. In 1D, a segment is a zone on a LED strip and is specified by Start Led and a Stop Led (note that Stop Led is one led after the last led in the segment). In 2D, a segment is a rectangle on a 2D matrix and 2D effects plot on this rectangle using x,y coordinates of the SEGMENT. A rectangle can be defined in the Segment UI where the start led specifies the top-left and the stop led specifies the bottom-right of the rectangle. Multiple segments can be specified this way. Segments can overlap. In fact overlapping creates very nice effects. See Segment start stop charts to easy find matrix start and stop values Rotation and ReverseX/Y A segment can be rotated 90\u00ba degrees and reversed on the X or Y-axis and can be specified in the Segment-UI. The SegmentRotation branch of dev supports this and is currently in beta-test. This will move to dev and release over time. The following table shows the effect setting these values: Value Rotation Reverse X Reverse Y Effect 0 - - - 0\u00ba rotation and no reverse 1 - - + Reverse horizontal 2 - + - Reverse vertical 3 - + + 180\u00ba rotation 4 + - - 90\u00ba rotation 5 + - + 90\u00ba and reverse horizontal 6 + + - 90\u00ba and vertical 7 + + + 270\u00ba rotation 2D Matrices and panels See Led Preferences Technical CRGB leds[MAX_LEDS+1]; in FX.cpp defines all leds on the matrix. Multiple segments share this array and effects should only write to leds[] within the boundaries of a segment. This is done by calling leds[XY(x,y)] or leds[realPixelIndex(i)]. Functions with leds as parameter should follow above rule and have been refactored for this. E.g. fadeToBlackBy(leds, 32) or fill_solid(leds, 0) otherwise it writes outside the segment boundaries. 2D Segment start stop charts 16x16 matrix 32x32 matrix (Created by Harry Baas) Examples 16x16 matrix To get the (x,y) coordinates from the start and stop led: * Segment top left = (start%matrixWidth, start/matrixWidth) * Segment bottom right = (stop%matrixWidth, stop/matrixWidth) Example of 1 segment (default) covering a whole 16x16 matrix: * start = 0, stop = 255 * top left = (0,0) * bottom right = (15,15) * width = height = 16 Example of a segment covering a middle part rectangle of the 16x16 matrix: * start = 20, stop = 235 * top left = (4,1) * bottom right = (10,14) * width = 7 * height = 14 Example of a segment covering the left part of the 16x16 matrix: * start = 0, stop = 241 * top left = (0,0) * bottom right = (0,15) * width = 1 * height = 16 16 x 12 matrix matrixWidth = 16, matrixHeight = 12. Total led count 192 leds left and right binmap effect. In the middle noisemove. Segment 0 (middle): start=1, stop=191, effect=noisemove Segment 1 (left): start=0, stop=176, effect=binmap Segment 2 (right): start=15, stop=192, effect=binmap Api commands for 2D effects 16 segments for 32x32 matrices Add the following Api command into a preset. This will show the Saw effect rotated and reversed in 16 8*8 segments. After that you, if you select all 16 segments and select another effect, this effect will also be populated to all 16 segments, resulting in surprising new effects {\"on\":true,\"bri\":89,\"transition\":7,\"mainseg\":0,\"seg\":[{\"id\":0,\"start\":0,\"stop\":232,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":1,\"start\":8,\"stop\":240,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":2,\"start\":16,\"stop\":248,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":3,\"start\":24,\"stop\":256,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":4,\"start\":256,\"stop\":488,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"id\":5,\"start\":264,\"stop\":496,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"id\":6,\"start\":272,\"stop\":504,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"id\":7,\"start\":280,\"stop\":512,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"id\":8,\"start\":512,\"stop\":744,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":9,\"start\":520,\"stop\":752,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":10,\"start\":528,\"stop\":760,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":11,\"start\":536,\"stop\":768,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":12,\"start\":768,\"stop\":1000,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"id\":13,\"start\":776,\"stop\":1008,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"id\":14,\"start\":784,\"stop\":1016,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"id\":15,\"start\":792,\"stop\":1024,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0}]}","title":"2D Support"},{"location":"WLEDSR/2D-Support/#introduction","text":"In order to accommodate 2D effects we have modified how Segment settings are used and added 2D Matrix and panel variables on the Led Preferences settings. Note: Currently only working in dev. You are invited to test this and give feedback on Beta testing discord channel","title":"Introduction"},{"location":"WLEDSR/2D-Support/#2d-architecture","text":"WLED SR distinguishes between the following levels * 2D Segment (dev) * 2D Matrix (dev) * 2D Panel (dev) An effect is plotted on a segment. A segment is a rectangle on a matrix (logical level). A matrix is implemented by one or more identical led panels, with a specific layout (e.g. first led bottom left, serpentine, physical level). Note: 2D effects can also be projected on a 1D LED Strip instead of a 2D Panel. e.g. for a led strip of 144 leds you can define width=height=12 and each zone of 12 leds is a row of a matrix. Rows are then side by side instead of above each other. Some 2D effects, e.g. graphic equalizer look still pretty cool on strips (as is the other way around with 1D effects on a 2D matrix like NoiseMove or Sparkle).","title":"2D architecture"},{"location":"WLEDSR/2D-Support/#2d-segments","text":"As WLED supports multiple segments, all effects and therefore also 2D effects are first projected on a segment. In 1D, a segment is a zone on a LED strip and is specified by Start Led and a Stop Led (note that Stop Led is one led after the last led in the segment). In 2D, a segment is a rectangle on a 2D matrix and 2D effects plot on this rectangle using x,y coordinates of the SEGMENT. A rectangle can be defined in the Segment UI where the start led specifies the top-left and the stop led specifies the bottom-right of the rectangle. Multiple segments can be specified this way. Segments can overlap. In fact overlapping creates very nice effects. See Segment start stop charts to easy find matrix start and stop values","title":"2D Segments"},{"location":"WLEDSR/2D-Support/#rotation-and-reversexy","text":"A segment can be rotated 90\u00ba degrees and reversed on the X or Y-axis and can be specified in the Segment-UI. The SegmentRotation branch of dev supports this and is currently in beta-test. This will move to dev and release over time. The following table shows the effect setting these values: Value Rotation Reverse X Reverse Y Effect 0 - - - 0\u00ba rotation and no reverse 1 - - + Reverse horizontal 2 - + - Reverse vertical 3 - + + 180\u00ba rotation 4 + - - 90\u00ba rotation 5 + - + 90\u00ba and reverse horizontal 6 + + - 90\u00ba and vertical 7 + + + 270\u00ba rotation","title":"Rotation and ReverseX/Y"},{"location":"WLEDSR/2D-Support/#2d-matrices-and-panels","text":"See Led Preferences","title":"2D Matrices and panels"},{"location":"WLEDSR/2D-Support/#technical","text":"CRGB leds[MAX_LEDS+1]; in FX.cpp defines all leds on the matrix. Multiple segments share this array and effects should only write to leds[] within the boundaries of a segment. This is done by calling leds[XY(x,y)] or leds[realPixelIndex(i)]. Functions with leds as parameter should follow above rule and have been refactored for this. E.g. fadeToBlackBy(leds, 32) or fill_solid(leds, 0) otherwise it writes outside the segment boundaries.","title":"Technical"},{"location":"WLEDSR/2D-Support/#2d-segment-start-stop-charts","text":"","title":"2D Segment start stop charts"},{"location":"WLEDSR/2D-Support/#16x16-matrix","text":"","title":"16x16 matrix"},{"location":"WLEDSR/2D-Support/#32x32-matrix","text":"(Created by Harry Baas)","title":"32x32 matrix"},{"location":"WLEDSR/2D-Support/#examples","text":"","title":"Examples"},{"location":"WLEDSR/2D-Support/#16x16-matrix_1","text":"To get the (x,y) coordinates from the start and stop led: * Segment top left = (start%matrixWidth, start/matrixWidth) * Segment bottom right = (stop%matrixWidth, stop/matrixWidth) Example of 1 segment (default) covering a whole 16x16 matrix: * start = 0, stop = 255 * top left = (0,0) * bottom right = (15,15) * width = height = 16 Example of a segment covering a middle part rectangle of the 16x16 matrix: * start = 20, stop = 235 * top left = (4,1) * bottom right = (10,14) * width = 7 * height = 14 Example of a segment covering the left part of the 16x16 matrix: * start = 0, stop = 241 * top left = (0,0) * bottom right = (0,15) * width = 1 * height = 16","title":"16x16 matrix"},{"location":"WLEDSR/2D-Support/#16-x-12-matrix","text":"matrixWidth = 16, matrixHeight = 12. Total led count 192 leds left and right binmap effect. In the middle noisemove. Segment 0 (middle): start=1, stop=191, effect=noisemove Segment 1 (left): start=0, stop=176, effect=binmap Segment 2 (right): start=15, stop=192, effect=binmap","title":"16 x 12 matrix"},{"location":"WLEDSR/2D-Support/#api-commands-for-2d-effects","text":"","title":"Api commands for 2D effects"},{"location":"WLEDSR/2D-Support/#16-segments-for-32x32-matrices","text":"Add the following Api command into a preset. This will show the Saw effect rotated and reversed in 16 8*8 segments. After that you, if you select all 16 segments and select another effect, this effect will also be populated to all 16 segments, resulting in surprising new effects {\"on\":true,\"bri\":89,\"transition\":7,\"mainseg\":0,\"seg\":[{\"id\":0,\"start\":0,\"stop\":232,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":1,\"start\":8,\"stop\":240,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":2,\"start\":16,\"stop\":248,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":3,\"start\":24,\"stop\":256,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":4,\"start\":256,\"stop\":488,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"id\":5,\"start\":264,\"stop\":496,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"id\":6,\"start\":272,\"stop\":504,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"id\":7,\"start\":280,\"stop\":512,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"id\":8,\"start\":512,\"stop\":744,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":9,\"start\":520,\"stop\":752,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":10,\"start\":528,\"stop\":760,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":11,\"start\":536,\"stop\":768,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":12,\"start\":768,\"stop\":1000,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"id\":13,\"start\":776,\"stop\":1008,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"id\":14,\"start\":784,\"stop\":1016,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"id\":15,\"start\":792,\"stop\":1024,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0}]}","title":"16 segments for 32x32 matrices"},{"location":"WLEDSR/A-question-on-leds%5Bi%5D-in-FastLED/","text":"In order to be able to use leds[i] in WLED, we add the following global variable: uint32_t ledData[MAX_LEDS]; // See const.h for a value of 1500. In many routines, we are adding the following code so that we don't have lossy data when copying led information from one element to the next: CRGB *leds = (CRGB*) ledData; // leds[i] code in here setPixels(leds); return FRAMETIME; This works with SEGMENTS in that two different animations don't clash. The questions I have are: Am I lucky that they don't clash, in that maybe one routine just overwrites the other in the same memory space? Or are we creating a new array of [MAX_LEDS] for each segment. If the latter, would that not be very inefficient, and if inefficient, would it not make more sense to use: if (!SEGENV.allocateData(sizeof(CRGB)*SEGLEN)) return mode_static(); //Allocates based on the size of a CRGB CRGB* leds = reinterpret_cast<CRGB*>(SEGENV.data); // leds[i] code in here setPixels(leds); return FRAMETIME; That being said, an associate with embedded system support says that dynamic memory allocation is NOT a good thing to perform on embedded systems. Thoughts? In the meantime, and I quote: \"When allocating memory the danger is always that that memory isn't deallocated properly, and thus leaks memory. Running out of RAM happens very fast on embedded devices that's why it's discouraged.\"","title":"A question on leds[i] in FastLED"},{"location":"WLEDSR/Adding-Sliders/","text":"Introduction This page provides WLED programmers information on adding another slider to WLED. This information is not yet complete, as it doesn't yet deal with icons, EEPROM or IR. I will also be researching how to programmatically show/hide these sliders. Updating html_ui.h Please see https://moonmodules.github.io/WLED-Docs/WLEDSR/Modifying-Sound-Reactive-WLED on how to generate html_ui.h since the UI was changed in v0.10.0-alpha-lw. The information below describes the way html_ui.h was generated before the UI change and is deprecated. This file is compressed and is taken from data\\index.htm. Please see Aircoookie's page on 'adding your own effect: https://github.com/Aircoookie/WLED/wiki/Add-own-functionality To serve your changes by the internal webserver, you will need to follow these or similar steps to gzip compress the index.html file: Gzip compress the file. I use this online converter, use setting Compress this file, output \u2013 gz Rename file to xxx.gz.png (change file type to image) Convert it to a C-style byte/char array. I use this converter, intended for image sprites. Therefore, the previous step of changing the file format was neccessary. Select Raw as Color format. Open the downloaded .c file in a text editor, e. g. Notepad++. Select the contents of the array and replace the array contents in html_ui.h with them. Update PAGE_index_L to the binary size stated in the bottom of the downloaded .c file Recompile and flash WLED! Here's a link to my Google document containing the changes required: https://docs.google.com/document/d/1m6dm3O_aXgJLGDJfM6E-4CHzzvU8bsaHqrs7VmisYko/edit","title":"Sliders in WLED"},{"location":"WLEDSR/Adding-Sliders/#introduction","text":"This page provides WLED programmers information on adding another slider to WLED. This information is not yet complete, as it doesn't yet deal with icons, EEPROM or IR. I will also be researching how to programmatically show/hide these sliders.","title":"Introduction"},{"location":"WLEDSR/Adding-Sliders/#updating-html_uih","text":"Please see https://moonmodules.github.io/WLED-Docs/WLEDSR/Modifying-Sound-Reactive-WLED on how to generate html_ui.h since the UI was changed in v0.10.0-alpha-lw. The information below describes the way html_ui.h was generated before the UI change and is deprecated. This file is compressed and is taken from data\\index.htm. Please see Aircoookie's page on 'adding your own effect: https://github.com/Aircoookie/WLED/wiki/Add-own-functionality To serve your changes by the internal webserver, you will need to follow these or similar steps to gzip compress the index.html file: Gzip compress the file. I use this online converter, use setting Compress this file, output \u2013 gz Rename file to xxx.gz.png (change file type to image) Convert it to a C-style byte/char array. I use this converter, intended for image sprites. Therefore, the previous step of changing the file format was neccessary. Select Raw as Color format. Open the downloaded .c file in a text editor, e. g. Notepad++. Select the contents of the array and replace the array contents in html_ui.h with them. Update PAGE_index_L to the binary size stated in the bottom of the downloaded .c file Recompile and flash WLED! Here's a link to my Google document containing the changes required: https://docs.google.com/document/d/1m6dm3O_aXgJLGDJfM6E-4CHzzvU8bsaHqrs7VmisYko/edit","title":"Updating html_ui.h"},{"location":"WLEDSR/Adding-a-Sound-Settings-page-to-the-UI/","text":"Introduction This page outlines the methods we used and the files that must be modified to add a Sound Settings page to the WLED UI. NEW settings_sound.htm I first added a new file in the data folder named settings_sound.htm . I did a copy/paste from settings_leds.htm to have a base for the new settings page. Let's break down this file. * At the top, we have our standard HTML beginning lines with the TITLE of the page between the <title> tags. * Inside of the <script> tags we have a few functions that are necessary for the page to function. * function H() is our help button function. When called, the UI will direct you to the relevant wiki page inside the window.open() function. * function B() is our back button function. When called, the UI will direct you to the previous main settings page via window.open(\"/settings\",\"_self\") . * function GetV() injects the values from the relevant settings stored in EEPROM to the settings page. * Inside the <style> tag we @import the relevant style.css file. This closes our <head> tag. * When the body of the page is loaded, function GetV() is called. This can vary depending on the functions that need to be called when the page loads. * Inside the <body> tag we have our form. This form holds the layout for the settings page. * Our squelch and gain settings have the names \"SQ\" and \"GN\" respectively. These names refer to the name given to the setting in xml.cpp and are used to retrieve and save these settings from/to EEPROM. Modify settings.htm This file holds the settings page button layout. We want to add an entry so we can access our new settings page. This was pretty straight forward. I added the following line, in the position I wanted it to appear on the page, using the previous entries as an example. < form action = \"/settings/sound\" >< button type = \"submit\" > Sound Settings </ button ></ form > I also made some changes to the style of the buttons so they all show on the same page. This was not necessary but I feel it gave a more polished look. Modify xml.cpp This is our map, so to speak. Each setting is given a unique 2 character string that will be used to reference it in the UI. In our case, \"SQ\" and \"GN\". This file is also the map for the XML response when querying the API. Our settings aren't used in the API at this time so I won't go into that right now. There are two important functions in xml.cpp that relates to our task which are void sappend() and void sappends() * sappend() takes a numeric setting and appends it to the string buffer. Valid cases for this function are: * 'c', a check box * 'v', a numeric value * 'i', the selected index * sappends() takes a string setting and appends it to the string buffer. Valid cases for this function are: * 's', a string setting * 'm', a message to be displayed Around line 192 in xml.cpp we have the function getSettingsJS() which retrieves the settings values from EEPROM based on the current sub-page which is defined in wled_server.cpp. We want to add a sub-page so we need to change the following line from if (subPage <1 || subPage >7) to if (subPage <1 || subPage >8) . At the end of this function, after the last sub-page (previously 7) we have the following code block around line 522: if ( subPage == 8 ) { sappend ( 'v' , \"SQ\" , soundSquelch ); sappend ( 'v' , \"GN\" , sampleGain ); } Here we can see our SQ and GN settings are loaded from EEPROM and filled in to their respective form field using the v case from the sappend() function. Modify set.cpp This file handles storing the settings entered into EEPROM. Similar to xml.cpp, we want to add a settings page so we need to tell WLED there is an additional page in the handleSettingsSet() function. I changed the following line from if (subPage <1 || subPage >7) return; to if (subPage <1 || subPage >8) return; . Lastly, I added the following code block after the last defined sub-page around line 361: //SOUND SETTINGS if ( subPage == 8 ) { int t ; t = request -> arg ( \"SQ\" ). toInt (); if ( t > 0 ) soundSquelch = t ; t = request -> arg ( \"GN\" ). toInt (); if ( t > 0 ) sampleGain = t ; } Modify wled_server.cpp This file serves the webpage for the WLED frontend. We want to add a settings page so we will add the following block of code around line 82, using the previous block as an example. Notice the sub-page defined in xml.cpp is referenced as well as the NEW setting page URL defined in settings.htm. // add sound settings page server . on ( \"/settings/sound\" , HTTP_POST , []( AsyncWebServerRequest * request ){ handleSettingsSet ( request , 8 ); serveMessage ( request , 200 , F ( \"Sound settings saved.\" ), \"Redirecting...\" , 1 ); }); In the serveSettings() function around line 383 we need to add else if (url.indexOf(\"sound\")> 0) subPage = 8; // add sound settings page , so the webserver knows to load those settings. And finally we need to add a case around line 406 for our new sub-page like this case 8: request->send_P(200, \"text/html\", PAGE_settings_sound, settingsProcessor); break; . Modify cdata.js Finally, we need to add our new settings page to cdata.js in the tools folder. This file holds the framework for modifying the compressed *.h files that serve the WLED frontend. This is the file nodejs looks to when running npm run build to compress the *.htm files in the data folder into *.h files which are compiled with the firmware. I used the previous entries as an example and added the following code block around line 243: { file : \"settings_sound.htm\" , name : \"PAGE_settings_sound\" , prepend : \"=====(\" , append : \")=====\" , method : \"plaintext\" , filter : \"html-minify\" , mangle : ( str ) => str . replace ( /\\<link rel=\"stylesheet\".*\\>/gms , \"\" ) . replace ( /\\<style\\>.*\\<\\/style\\>/gms , \"%CSS%%SCSS%\" ) . replace ( /function GetV().*\\<\\/script\\>/gms , \"function GetV() {var d=document;\\n\" ), }, Those are the steps I took to modify the WLED settings pages and add a page for the sound reactive related settings in the UI. Once those were completed, I ran npm install and npm run build to compress the new UI and include it in the firmware. After compiling the new firmware, I needed to reset the EEPROM via http://WLED/settings/sec? -> Factory reset.","title":"Adding a new Settings Page"},{"location":"WLEDSR/Adding-a-Sound-Settings-page-to-the-UI/#introduction","text":"This page outlines the methods we used and the files that must be modified to add a Sound Settings page to the WLED UI.","title":"Introduction"},{"location":"WLEDSR/Adding-a-Sound-Settings-page-to-the-UI/#new-settings_soundhtm","text":"I first added a new file in the data folder named settings_sound.htm . I did a copy/paste from settings_leds.htm to have a base for the new settings page. Let's break down this file. * At the top, we have our standard HTML beginning lines with the TITLE of the page between the <title> tags. * Inside of the <script> tags we have a few functions that are necessary for the page to function. * function H() is our help button function. When called, the UI will direct you to the relevant wiki page inside the window.open() function. * function B() is our back button function. When called, the UI will direct you to the previous main settings page via window.open(\"/settings\",\"_self\") . * function GetV() injects the values from the relevant settings stored in EEPROM to the settings page. * Inside the <style> tag we @import the relevant style.css file. This closes our <head> tag. * When the body of the page is loaded, function GetV() is called. This can vary depending on the functions that need to be called when the page loads. * Inside the <body> tag we have our form. This form holds the layout for the settings page. * Our squelch and gain settings have the names \"SQ\" and \"GN\" respectively. These names refer to the name given to the setting in xml.cpp and are used to retrieve and save these settings from/to EEPROM.","title":"NEW settings_sound.htm"},{"location":"WLEDSR/Adding-a-Sound-Settings-page-to-the-UI/#modify-settingshtm","text":"This file holds the settings page button layout. We want to add an entry so we can access our new settings page. This was pretty straight forward. I added the following line, in the position I wanted it to appear on the page, using the previous entries as an example. < form action = \"/settings/sound\" >< button type = \"submit\" > Sound Settings </ button ></ form > I also made some changes to the style of the buttons so they all show on the same page. This was not necessary but I feel it gave a more polished look.","title":"Modify settings.htm"},{"location":"WLEDSR/Adding-a-Sound-Settings-page-to-the-UI/#modify-xmlcpp","text":"This is our map, so to speak. Each setting is given a unique 2 character string that will be used to reference it in the UI. In our case, \"SQ\" and \"GN\". This file is also the map for the XML response when querying the API. Our settings aren't used in the API at this time so I won't go into that right now. There are two important functions in xml.cpp that relates to our task which are void sappend() and void sappends() * sappend() takes a numeric setting and appends it to the string buffer. Valid cases for this function are: * 'c', a check box * 'v', a numeric value * 'i', the selected index * sappends() takes a string setting and appends it to the string buffer. Valid cases for this function are: * 's', a string setting * 'm', a message to be displayed Around line 192 in xml.cpp we have the function getSettingsJS() which retrieves the settings values from EEPROM based on the current sub-page which is defined in wled_server.cpp. We want to add a sub-page so we need to change the following line from if (subPage <1 || subPage >7) to if (subPage <1 || subPage >8) . At the end of this function, after the last sub-page (previously 7) we have the following code block around line 522: if ( subPage == 8 ) { sappend ( 'v' , \"SQ\" , soundSquelch ); sappend ( 'v' , \"GN\" , sampleGain ); } Here we can see our SQ and GN settings are loaded from EEPROM and filled in to their respective form field using the v case from the sappend() function.","title":"Modify xml.cpp"},{"location":"WLEDSR/Adding-a-Sound-Settings-page-to-the-UI/#modify-setcpp","text":"This file handles storing the settings entered into EEPROM. Similar to xml.cpp, we want to add a settings page so we need to tell WLED there is an additional page in the handleSettingsSet() function. I changed the following line from if (subPage <1 || subPage >7) return; to if (subPage <1 || subPage >8) return; . Lastly, I added the following code block after the last defined sub-page around line 361: //SOUND SETTINGS if ( subPage == 8 ) { int t ; t = request -> arg ( \"SQ\" ). toInt (); if ( t > 0 ) soundSquelch = t ; t = request -> arg ( \"GN\" ). toInt (); if ( t > 0 ) sampleGain = t ; }","title":"Modify set.cpp"},{"location":"WLEDSR/Adding-a-Sound-Settings-page-to-the-UI/#modify-wled_servercpp","text":"This file serves the webpage for the WLED frontend. We want to add a settings page so we will add the following block of code around line 82, using the previous block as an example. Notice the sub-page defined in xml.cpp is referenced as well as the NEW setting page URL defined in settings.htm. // add sound settings page server . on ( \"/settings/sound\" , HTTP_POST , []( AsyncWebServerRequest * request ){ handleSettingsSet ( request , 8 ); serveMessage ( request , 200 , F ( \"Sound settings saved.\" ), \"Redirecting...\" , 1 ); }); In the serveSettings() function around line 383 we need to add else if (url.indexOf(\"sound\")> 0) subPage = 8; // add sound settings page , so the webserver knows to load those settings. And finally we need to add a case around line 406 for our new sub-page like this case 8: request->send_P(200, \"text/html\", PAGE_settings_sound, settingsProcessor); break; .","title":"Modify wled_server.cpp"},{"location":"WLEDSR/Adding-a-Sound-Settings-page-to-the-UI/#modify-cdatajs","text":"Finally, we need to add our new settings page to cdata.js in the tools folder. This file holds the framework for modifying the compressed *.h files that serve the WLED frontend. This is the file nodejs looks to when running npm run build to compress the *.htm files in the data folder into *.h files which are compiled with the firmware. I used the previous entries as an example and added the following code block around line 243: { file : \"settings_sound.htm\" , name : \"PAGE_settings_sound\" , prepend : \"=====(\" , append : \")=====\" , method : \"plaintext\" , filter : \"html-minify\" , mangle : ( str ) => str . replace ( /\\<link rel=\"stylesheet\".*\\>/gms , \"\" ) . replace ( /\\<style\\>.*\\<\\/style\\>/gms , \"%CSS%%SCSS%\" ) . replace ( /function GetV().*\\<\\/script\\>/gms , \"function GetV() {var d=document;\\n\" ), }, Those are the steps I took to modify the WLED settings pages and add a page for the sound reactive related settings in the UI. Once those were completed, I ran npm install and npm run build to compress the new UI and include it in the firmware. After compiling the new firmware, I needed to reset the EEPROM via http://WLED/settings/sec? -> Factory reset.","title":"Modify cdata.js"},{"location":"WLEDSR/Analog-Audio-Input-Options/","text":"Microphone Input Generally we recommend using I2S digital sound input - like INMP441, SPH0645, ICS-43434, or PDM I2S microphones. Additionally there are solutions for line-in via I2S. For example, boards/shields with \"es7243\" chip should work already (we have a special driver for these), and we're investigating \"es8388\". Below are a number of popular Arduino compatible analog microphones that have been tested. Model Compatibility Notes MAX9814 Good+ Best to set the gain to 40dB. MAX9812 Good Only 20dB gain, but worked OK. MAX4466 Fair Is very sensitive to 3.3V noise and voltage dropout due to Wifi activity. Avoid powering your LED stripe from ESP32, as the stripe causes a lot of noise on the 3.3V/5V power lines. INMP401 Good Some Chinese ones are not reliable. See also \u21d2 Sound setting examples for common microphones \u21d2 noise and spikes on analog microphones If you are using the MAX9814 , you need to connect gain to vdd to set the gain to 40dB as the default 60db has far too much background noise. Important: there are some inexpensive sound sensors you can buy from Aliexpress or elsewhere (such as LM393, KY-038 or KY-037). Typically these have an on/off output only (detecting \"sound\" or \"silence\"), sometimes there is an additional \"analog data out\" with very low quality. They may or may not work adequately. For more information on our microphone test results, see our Arduino Compatible Microphones document . If the LED's are active when the ambient volume is low while running volume only effects beginning with a single '*', you can increase the background noise filtering (or squelch) by navigating to the 'Config | Sound Settings' and increase the Squelch value . You can also make it more sensitive by lowering that Squelch value. In addition, there is a gain setting, which is required especially for the much lower signal level provided by the line-in configuration. Gain, Squelch and AGC are affecting all soundreactive, volumereactive and frequency (FFT) reactive effects. Note 1: Do NOT connect input devices to 5V (or Vin). The power should be connected to the 3.3V pin. Note 2: A piezo vibration sensor (from aliexpress) was successfully hooked up and tested. Note 3: On the ESP32, the default ADC pin is GPI36 (also known as VP), while the ESP8266 uses A0. On ESP32, any GPIO related to ADC1 can be used - see next note. Note 4: If your ESP32 doesn't have pin 36, any of the other ADC1 (and not ADC2) pins should work. Note 5: On the ESP32, the ADC and I2S pins are defined in audio_reactive.h. You can also select them in the sound settings UI. The following schematics are provided as an example only. There are many ways to achieve the same results. These are only a few of those ways. Microphone Wiring Example (MAX9814) Line In Wiring Example Some folks have mentioned that they don't need this line-in circuit, which is fine. Here's an explanation of that circuit. The 680 ohm resistors provide termination so that you don't get reflection on the incoming signals. The 100nf capacitors remove any DC offset from the incoming signal. Remember that the ESP goes from 0V to 3.3V. Beyond that lay dragons. Finally, the 1M resistors provide DC centering of the incoming (now) AC only signal halfway between 0 and 3.3V. Note 1: If you are just using a single L or R channel for the line-in, disconnect the capacitor for the other channel, or the resultant sample will be significantly reduced in amplitude. Note 2: Providing a 'T' connector so that you can hear the music as it goes into the circuit is highly recommended. In the author's case, there was considerable static when the ESP32 was powered by the computer's USB port, but was fine when the ESP32 was powered by a USB powerbank. Dual Input Wiring The following diagram shows one way of connecting a 3.5mm jack and an analog microphone to the ESP8266/32 while being able to change your desired input with a simple SPDT switch. The left and right channels of the TRS Jack are connected together to sample both channels simultaneously as one channel. Connect the output of the capacitor to the ADC pin for your board. Pins Used On the ESP32, the default ADC pin used is GPI36 (also known as VP), while the ESP8266 uses A0. Power is connected to the 3.3V pin. On ESP32 The ADC pin can be configured on the sound settings page; any GPIO associated with ADC1 (i.e. GPIO32 to GPI39) can be used. Squelch The volume and frequency reactive routines (starting with a single or double *), support a squelch or background noise suppression. This can be configured on the Sound Settings page. Gain Line-in signals are typically much lower than that of some of the microphones. Rather than use an auto gain function, you can manually adjust the gain from 1 to 255, which translate to a gain factor from 0.1 up to 6.5 gain. That's equivalent to a range of -20dB up to +16dB . Problems Encountered Noise - Some recommendations to reduce noise Spikes - We've often seen spikes when using an analog microphone in conjunction with WLED. There's an article that should shed light on the issue at ESP32 microcontroller generates noise on microphone .","title":"Analog Audio Input Options"},{"location":"WLEDSR/Analog-Audio-Input-Options/#microphone-input","text":"Generally we recommend using I2S digital sound input - like INMP441, SPH0645, ICS-43434, or PDM I2S microphones. Additionally there are solutions for line-in via I2S. For example, boards/shields with \"es7243\" chip should work already (we have a special driver for these), and we're investigating \"es8388\". Below are a number of popular Arduino compatible analog microphones that have been tested. Model Compatibility Notes MAX9814 Good+ Best to set the gain to 40dB. MAX9812 Good Only 20dB gain, but worked OK. MAX4466 Fair Is very sensitive to 3.3V noise and voltage dropout due to Wifi activity. Avoid powering your LED stripe from ESP32, as the stripe causes a lot of noise on the 3.3V/5V power lines. INMP401 Good Some Chinese ones are not reliable. See also \u21d2 Sound setting examples for common microphones \u21d2 noise and spikes on analog microphones If you are using the MAX9814 , you need to connect gain to vdd to set the gain to 40dB as the default 60db has far too much background noise. Important: there are some inexpensive sound sensors you can buy from Aliexpress or elsewhere (such as LM393, KY-038 or KY-037). Typically these have an on/off output only (detecting \"sound\" or \"silence\"), sometimes there is an additional \"analog data out\" with very low quality. They may or may not work adequately. For more information on our microphone test results, see our Arduino Compatible Microphones document . If the LED's are active when the ambient volume is low while running volume only effects beginning with a single '*', you can increase the background noise filtering (or squelch) by navigating to the 'Config | Sound Settings' and increase the Squelch value . You can also make it more sensitive by lowering that Squelch value. In addition, there is a gain setting, which is required especially for the much lower signal level provided by the line-in configuration. Gain, Squelch and AGC are affecting all soundreactive, volumereactive and frequency (FFT) reactive effects. Note 1: Do NOT connect input devices to 5V (or Vin). The power should be connected to the 3.3V pin. Note 2: A piezo vibration sensor (from aliexpress) was successfully hooked up and tested. Note 3: On the ESP32, the default ADC pin is GPI36 (also known as VP), while the ESP8266 uses A0. On ESP32, any GPIO related to ADC1 can be used - see next note. Note 4: If your ESP32 doesn't have pin 36, any of the other ADC1 (and not ADC2) pins should work. Note 5: On the ESP32, the ADC and I2S pins are defined in audio_reactive.h. You can also select them in the sound settings UI.","title":"Microphone Input"},{"location":"WLEDSR/Analog-Audio-Input-Options/#the-following-schematics-are-provided-as-an-example-only-there-are-many-ways-to-achieve-the-same-results-these-are-only-a-few-of-those-ways","text":"Microphone Wiring Example (MAX9814) Line In Wiring Example Some folks have mentioned that they don't need this line-in circuit, which is fine. Here's an explanation of that circuit. The 680 ohm resistors provide termination so that you don't get reflection on the incoming signals. The 100nf capacitors remove any DC offset from the incoming signal. Remember that the ESP goes from 0V to 3.3V. Beyond that lay dragons. Finally, the 1M resistors provide DC centering of the incoming (now) AC only signal halfway between 0 and 3.3V. Note 1: If you are just using a single L or R channel for the line-in, disconnect the capacitor for the other channel, or the resultant sample will be significantly reduced in amplitude. Note 2: Providing a 'T' connector so that you can hear the music as it goes into the circuit is highly recommended. In the author's case, there was considerable static when the ESP32 was powered by the computer's USB port, but was fine when the ESP32 was powered by a USB powerbank.","title":"The following schematics are provided as an example only. There are many ways to achieve the same results. These are only a few of those ways."},{"location":"WLEDSR/Analog-Audio-Input-Options/#dual-input-wiring","text":"The following diagram shows one way of connecting a 3.5mm jack and an analog microphone to the ESP8266/32 while being able to change your desired input with a simple SPDT switch. The left and right channels of the TRS Jack are connected together to sample both channels simultaneously as one channel. Connect the output of the capacitor to the ADC pin for your board.","title":"Dual Input Wiring"},{"location":"WLEDSR/Analog-Audio-Input-Options/#pins-used","text":"On the ESP32, the default ADC pin used is GPI36 (also known as VP), while the ESP8266 uses A0. Power is connected to the 3.3V pin. On ESP32 The ADC pin can be configured on the sound settings page; any GPIO associated with ADC1 (i.e. GPIO32 to GPI39) can be used.","title":"Pins Used"},{"location":"WLEDSR/Analog-Audio-Input-Options/#squelch","text":"The volume and frequency reactive routines (starting with a single or double *), support a squelch or background noise suppression. This can be configured on the Sound Settings page.","title":"Squelch"},{"location":"WLEDSR/Analog-Audio-Input-Options/#gain","text":"Line-in signals are typically much lower than that of some of the microphones. Rather than use an auto gain function, you can manually adjust the gain from 1 to 255, which translate to a gain factor from 0.1 up to 6.5 gain. That's equivalent to a range of -20dB up to +16dB .","title":"Gain"},{"location":"WLEDSR/Analog-Audio-Input-Options/#problems-encountered","text":"Noise - Some recommendations to reduce noise Spikes - We've often seen spikes when using an analog microphone in conjunction with WLED. There's an article that should shed light on the issue at ESP32 microcontroller generates noise on microphone .","title":"Problems Encountered"},{"location":"WLEDSR/Analog-Sound-Sampling-Sketch-Example/","text":"Use this basic code to read and calculate the average from the INMP401/MAX4466/MAX9814 microphone on an ESP32 or ESP8266 Use the Arduino Serial plotter to view the output and compare your results to those found here . Make sure you have set the baud rate on your Serial plotter to 115200 (as defined in the sketch). Note that the ESP32 employs a 12 bit ADC, while the ESP8266 has a 10 bit ADC. Also note the anomalous spikes on the ESP8266. The micLev variable is the DC Offset value that you can use for zeroing your samples. /* ESPSample * * By: Andrew Tuline * * Updated: Feb, 2019 * * Basic code to read and calculate average from the Sparkfun INMP401/MAX4466/MAX9814 microphone * on an ESP32 or ESP8266. * * Use the Arduino Serial plotter to view the output. Compare results to those found at: * * https://github.com/atuline/WLED/blob/assets/docs/Microphones.pdf * * Note that the ESP32 employs a 12 bit A/D, while the ESP8266 has a 10 bit A/D. Also note * the anomalous spikes on the ESP8266. * * The micLev variable is the DC Offset value that you can use for zeroeing your samples. * */ #ifdef ESP8266 #define MIC_PIN A0 // ESP8266 pin A0 #else #define MIC_PIN 36 // ESP32 pin also known as 'VP'. #endif void setup () { delay ( 1000 ); Serial . begin ( 115200 ); // Initialize serial port for debugging. } // setup() void loop () { analog_sample (); } // loop() void analog_sample () { static float micLev ; // Needs to be a float, or smoothing calculation below will be very inaccurate. int micIn = analogRead ( MIC_PIN ); micLev = (( micLev * 31 ) + micIn ) / 32 ; // Smooth out the data to get average value (used for zeroeing). Serial . print ( micIn ); Serial . print ( \" \" ); Serial . print ( micLev ); Serial . println ( \" \" ); } // analog_sample() Original code can be found here .","title":"Analog Sound Sampling Sketch Example"},{"location":"WLEDSR/Arduino-IDE-Compile-%28Outdated%29/","text":"Compiling from a fresh install of the Arduino IDE Note: Around October 2020, mismatching library version issues made it increasingly difficult to compile WLED with the Arduino IDE. Your best bet is to use VS Code with Platform IO. In the meantime, here's the old Arduino IDE instructions: Have a read through Aircoookie's compiling documentation at https://github.com/Aircoookie/WLED/wiki/Compiling-WLED Download and install the Arduino IDE from arduino.cc . Defaults are OK. Start the Arduino IDE and add ESP8266/ESP32 board support by going to \"File | Preferences\" (\"Arduino | Preferences\" for macOS (\u2318,)) In the \"Additional Boards Manager URLs\" section, copy these URL's and add: https://arduino.esp8266.com/stable/package_esp8266com_index.json for an ESP8266 and https://dl.espressif.com/dl/package_esp32_index.json for an ESP32. You can add both by separating them with a comma. Press \"OK\" to install support for the ESP8266/ESP32 platform Go to \"Tools | Board | Boards Manager...\" For the ESP8266/32, search for \"ESP8266\" and/or \"ESP32\" Click on \"Install\" for each. As of May 2020, the current version for ESP8266 was 2.7.1 As of May 2020, the current version for ESP32 was 1.0.4 If you already have ESP8266/32 drivers installed, please ensure your drivers are recent: Go to \"Tools | Board | Boards Manager...\". For the ESP8266/32, search for \"ESP8266\" or \"ESP32\" As of July 2020, the current version was 2.7.2 As of July 2020, the current version was 1.0.4 Board Settings LOLIN D32 (ESP32) LOLIN WeMOS D1 Mini (ESP8266) Note: Before attempting to compile WLED, make sure you can select your ESP board and compile a basic sketch such as: \"File | Examples | 01.Basics | Blink\" WLED library pre-requisites: WLED makes use of a LOT of 3rd party libraries and is NOT easy to compile, especially for anyone new to Arduino. Although the WLED distribution contains several of these libraries, it doesn't include them all. Additional libraries you need to install are: NeoPixelBus by Makuna FastLED IRRemoteESP8266 (ESP8266 Only) ArduinoFFT (ESP32 Only) ESPAsyncTCP (ESP8266 Only) ESPAsyncUDP (ESP8266 Only) ESPAsyncWebServer (See notes below) AsyncTCP (ESP32 Only) See the next section to find/install these libraries. Install libraries that are included in the Library Manager Navigate to \"Tools | Manage Libraries...\" or \"Sketch | Include Libraries | Manage Libraries...\" for macOS (\u21e7\u2318I) Search for and install \"NeoPixelBus by Makuna\" Search for and install \"FastLED by Daniel Garcia\" Search for and install \"IRremoteESP8266 by Ken Shirriff, etc\" Search for and install \"arduinoFFT by Enqrique Condes\" Install libraries that are not included in the Library Manager: To install libraries that are not in the library manager, you would typically: Download the zip file In the Arduino IDE use \"Sketch | Include Library | Add Zip Library\" Navigate to where you downloaded the .zipped library. Select it and press OK. Your library should now be included if you go \"Sketch | Include Libraries\" and navigate down to Contributed libraries. Download and install ESPAsyncTCP Download and install ESPAsyncWebServer Download and install ESPAsyncUDP For ESP32 Download and install AsyncTCP Note: AirCoookie has since created a fork of ESPAsyncWebServer, and the original ESPAsyncWebServer will no longer work with WLED. If you have the original installed, you can edit wled.h and comment out the line as follows: // #define WLED_ENABLE_WEBSOCKETS If you add the library manually or with git you will most likely need to restart , yes restart the Arduino IDE before it will be recognized. For more information on libraries, see: https://www.arduino.cc/en/Guide/Libraries. When you are done, if you navigate to 'File | Examples' and scroll all the way down, you should see: Download WLED In a web browser you can navigate to wled and unzip into a new directory. Alternatively, you can download our Sound Reactive Master . Make sure you can compile the original WLED before attempting to compile our sound reactive version. You can then 'Download' the Zip file. Unzip it into a new directory. If you have 'git' installed, navigate to where you want to store your project and run: git clone https://github.com/atuline/WLED.git WLED-Reactive Compiling WLED for Arduino IDE (OUTDATED) Once you have: Installed the Arduino IDE. Installed support for ESP32/ESP8266. Updated the drivers on an existing installation of the IDE. Downloaded and installed the library pre-requisites. Downloaded and installed WLED. Connected your device and ensured it connected to a COM port. For previous WLED users, ensure you have modified your Flash settings to support 2MB minimum. You should now be able to compile and upload WLED to your ESP device. If this feels like a treasure hunt, it is. Now, imagine what the authors of WLED had to go through just to get this all working together. We just figured out how to compile it and to get some sound reactive code running.","title":"Arduino IDE Compile (Outdated)"},{"location":"WLEDSR/Arduino-IDE-Compile-%28Outdated%29/#compiling-from-a-fresh-install-of-the-arduino-ide","text":"Note: Around October 2020, mismatching library version issues made it increasingly difficult to compile WLED with the Arduino IDE. Your best bet is to use VS Code with Platform IO. In the meantime, here's the old Arduino IDE instructions: Have a read through Aircoookie's compiling documentation at https://github.com/Aircoookie/WLED/wiki/Compiling-WLED Download and install the Arduino IDE from arduino.cc . Defaults are OK. Start the Arduino IDE and add ESP8266/ESP32 board support by going to \"File | Preferences\" (\"Arduino | Preferences\" for macOS (\u2318,)) In the \"Additional Boards Manager URLs\" section, copy these URL's and add: https://arduino.esp8266.com/stable/package_esp8266com_index.json for an ESP8266 and https://dl.espressif.com/dl/package_esp32_index.json for an ESP32. You can add both by separating them with a comma. Press \"OK\" to install support for the ESP8266/ESP32 platform Go to \"Tools | Board | Boards Manager...\" For the ESP8266/32, search for \"ESP8266\" and/or \"ESP32\" Click on \"Install\" for each. As of May 2020, the current version for ESP8266 was 2.7.1 As of May 2020, the current version for ESP32 was 1.0.4 If you already have ESP8266/32 drivers installed, please ensure your drivers are recent: Go to \"Tools | Board | Boards Manager...\". For the ESP8266/32, search for \"ESP8266\" or \"ESP32\" As of July 2020, the current version was 2.7.2 As of July 2020, the current version was 1.0.4","title":"Compiling from a fresh install of the Arduino IDE"},{"location":"WLEDSR/Arduino-IDE-Compile-%28Outdated%29/#board-settings","text":"","title":"Board Settings"},{"location":"WLEDSR/Arduino-IDE-Compile-%28Outdated%29/#lolin-d32-esp32","text":"","title":"LOLIN D32 (ESP32)"},{"location":"WLEDSR/Arduino-IDE-Compile-%28Outdated%29/#lolin-wemos-d1-mini-esp8266","text":"Note: Before attempting to compile WLED, make sure you can select your ESP board and compile a basic sketch such as: \"File | Examples | 01.Basics | Blink\"","title":"LOLIN WeMOS D1 Mini (ESP8266)"},{"location":"WLEDSR/Arduino-IDE-Compile-%28Outdated%29/#wled-library-pre-requisites","text":"WLED makes use of a LOT of 3rd party libraries and is NOT easy to compile, especially for anyone new to Arduino. Although the WLED distribution contains several of these libraries, it doesn't include them all. Additional libraries you need to install are: NeoPixelBus by Makuna FastLED IRRemoteESP8266 (ESP8266 Only) ArduinoFFT (ESP32 Only) ESPAsyncTCP (ESP8266 Only) ESPAsyncUDP (ESP8266 Only) ESPAsyncWebServer (See notes below) AsyncTCP (ESP32 Only) See the next section to find/install these libraries.","title":"WLED library pre-requisites:"},{"location":"WLEDSR/Arduino-IDE-Compile-%28Outdated%29/#install-libraries-that-are-included-in-the-library-manager","text":"Navigate to \"Tools | Manage Libraries...\" or \"Sketch | Include Libraries | Manage Libraries...\" for macOS (\u21e7\u2318I) Search for and install \"NeoPixelBus by Makuna\" Search for and install \"FastLED by Daniel Garcia\" Search for and install \"IRremoteESP8266 by Ken Shirriff, etc\" Search for and install \"arduinoFFT by Enqrique Condes\"","title":"Install libraries that are included in the Library Manager"},{"location":"WLEDSR/Arduino-IDE-Compile-%28Outdated%29/#install-libraries-that-are-not-included-in-the-library-manager","text":"To install libraries that are not in the library manager, you would typically: Download the zip file In the Arduino IDE use \"Sketch | Include Library | Add Zip Library\" Navigate to where you downloaded the .zipped library. Select it and press OK. Your library should now be included if you go \"Sketch | Include Libraries\" and navigate down to Contributed libraries. Download and install ESPAsyncTCP Download and install ESPAsyncWebServer Download and install ESPAsyncUDP For ESP32 Download and install AsyncTCP Note: AirCoookie has since created a fork of ESPAsyncWebServer, and the original ESPAsyncWebServer will no longer work with WLED. If you have the original installed, you can edit wled.h and comment out the line as follows: // #define WLED_ENABLE_WEBSOCKETS If you add the library manually or with git you will most likely need to restart , yes restart the Arduino IDE before it will be recognized. For more information on libraries, see: https://www.arduino.cc/en/Guide/Libraries. When you are done, if you navigate to 'File | Examples' and scroll all the way down, you should see:","title":"Install libraries that are not included in the Library Manager:"},{"location":"WLEDSR/Arduino-IDE-Compile-%28Outdated%29/#download-wled","text":"In a web browser you can navigate to wled and unzip into a new directory. Alternatively, you can download our Sound Reactive Master . Make sure you can compile the original WLED before attempting to compile our sound reactive version. You can then 'Download' the Zip file. Unzip it into a new directory. If you have 'git' installed, navigate to where you want to store your project and run: git clone https://github.com/atuline/WLED.git WLED-Reactive","title":"Download WLED"},{"location":"WLEDSR/Arduino-IDE-Compile-%28Outdated%29/#compiling-wled-for-arduino-ide-outdated","text":"Once you have: Installed the Arduino IDE. Installed support for ESP32/ESP8266. Updated the drivers on an existing installation of the IDE. Downloaded and installed the library pre-requisites. Downloaded and installed WLED. Connected your device and ensured it connected to a COM port. For previous WLED users, ensure you have modified your Flash settings to support 2MB minimum. You should now be able to compile and upload WLED to your ESP device. If this feels like a treasure hunt, it is. Now, imagine what the authors of WLED had to go through just to get this all working together. We just figured out how to compile it and to get some sound reactive code running.","title":"Compiling WLED for Arduino IDE (OUTDATED)"},{"location":"WLEDSR/Connectivity-Issues/","text":"We've sometimes been unable to connect to one or more of our WLED enabled devices. Here are some things to try: Wipe (using pyflasher or esptool.py ) and re-flash your device. NOTE: For ESP32 you must write flash at 0x10000. There are great instructions here . For more reliable connectivity on Android, go into WiFi advanced settings (press the 3 dots at the top right of the WiFi page) and disable 'Switch to mobile data' as well as 'Wi-Fi power saving mode'. In the WIFI Setup settings page of WLED, uncheck 'Disable WiFi sleep'. Ensure you have a strong signal to the device. When compiling, make sure you have selected Flash Size as 4MB (FS:2MB OTA:~1019KB) Note: This page has been brought to you by our Discord friend @tuantrung2905 . Thanks for your continued and persistent testing efforts!","title":"Connectivity Issues"},{"location":"WLEDSR/Contributing-Code-to-SR-WLED/","text":"We learned a long time ago that adding new code can make for a LOT of testing. If you offer to help out with this fork, please keep in mind that we support: Several different analog microphones and some in different configurations (ie MAX9814), each of which need to be tested. Line-in, with different possible line-in levels. The digital INMP441 and ICS-43434 microphones. Sampling for both volume and FFT calculations. Volume, peak and FFT based animations. Up to 5 sliders for each animation. 1D and 2D routines. UDP sound synchronization. Settings for gain, squelch, sliders, UDP sync and 2D layout. EEPROM code to save/load those settings. A dedicated sound reactive settings web page. ESP32 and ESP8266 based devices. Support for both the Arduino IDE as well as Platform IO. Supporting both AP mode as well as STA mode for WiFi. A dev branch for the latest code for ESP32. An ESP8266 branch for volume only routines. A master branch, which gets occasionally gets merged with AC's master by one of our team members. New development happens on our 'dev' branch. SEGMENTS. Every routine must be compatible and tested for SEGMENTS. Try and keeping our fork current with the original WLED. Our Flash usage is now FULL. Prior to adding anything new, we either need to free up the same or larger space elsewhere, typically other animations. If you'd like to contribute, you would need to be able to perform a significant amount of testing and future maintenance (see above) so your new code doesn't unintentionally break other functionality. What functionality to add: Is the addition specific to sound reactive WLED or should it be a part of regular WLED? Will the proposed addition break potential future WLED functionality? Can other members of the team support this added functionality in the future? Is the code clear and concise? In addition: Good communication with team members is very important. Join our discord . Pull Requests and any changes should first go into our dev branch! Do not create a PR for master unless there is a very good reason. Keep any git update to a limited topic for ease of testing/rollback. Keep the Wiki documentation in 'good order'. Technical support for a long enough period of time to ensure your code is fully tested, the UI is fine, and supportable by others. Commitment. You're really keen on WLED and have a long term commitment to support the community. Knowledge That Helps: Github versioning, commits, branching, merging. FastLED (for animations), combined with NeoPixelBus. Junior/intermediate level C programming. Please use the opportunity for a code review by making pull requests. HTML, CSS, Javascript, XML, JSON, npm for any UI changes. WLED coding standards. We still have the occasional issue with our dev/master branches where we lose connectivity with the web server. This was most prevalent with the ESP8266 branch in AP mode, and precipitated a re-write for that platform. As a result of this ongoing issue, we are sensitive to new functionality being added without adequate testing. In conclusion, the most important factors are commitment, teamwork, communication, documentation, testing, testing and more testing. Oh yea, and a bit of new code as well, just so long as it's thoroughly tested across the range of supported environments. Can I help? Yes! This is a community project, and contributions are welcome! We're always up for a good PR(see above). Just remember that any code you add will need to be maintained when we attempt to incorporate future versions of WLED. It's easy to add new code; maintaining it across multiple versions of WLED is a whole other matter. Be sparing with your additions.","title":"Contributing Code to SR WLED"},{"location":"WLEDSR/Contributing-Code-to-SR-WLED/#what-functionality-to-add","text":"Is the addition specific to sound reactive WLED or should it be a part of regular WLED? Will the proposed addition break potential future WLED functionality? Can other members of the team support this added functionality in the future? Is the code clear and concise?","title":"What functionality to add:"},{"location":"WLEDSR/Contributing-Code-to-SR-WLED/#in-addition","text":"Good communication with team members is very important. Join our discord . Pull Requests and any changes should first go into our dev branch! Do not create a PR for master unless there is a very good reason. Keep any git update to a limited topic for ease of testing/rollback. Keep the Wiki documentation in 'good order'. Technical support for a long enough period of time to ensure your code is fully tested, the UI is fine, and supportable by others. Commitment. You're really keen on WLED and have a long term commitment to support the community.","title":"In addition:"},{"location":"WLEDSR/Contributing-Code-to-SR-WLED/#knowledge-that-helps","text":"Github versioning, commits, branching, merging. FastLED (for animations), combined with NeoPixelBus. Junior/intermediate level C programming. Please use the opportunity for a code review by making pull requests. HTML, CSS, Javascript, XML, JSON, npm for any UI changes. WLED coding standards. We still have the occasional issue with our dev/master branches where we lose connectivity with the web server. This was most prevalent with the ESP8266 branch in AP mode, and precipitated a re-write for that platform. As a result of this ongoing issue, we are sensitive to new functionality being added without adequate testing. In conclusion, the most important factors are commitment, teamwork, communication, documentation, testing, testing and more testing. Oh yea, and a bit of new code as well, just so long as it's thoroughly tested across the range of supported environments.","title":"Knowledge That Helps:"},{"location":"WLEDSR/Contributing-Code-to-SR-WLED/#can-i-help","text":"Yes! This is a community project, and contributions are welcome! We're always up for a good PR(see above). Just remember that any code you add will need to be maintained when we attempt to incorporate future versions of WLED. It's easy to add new code; maintaining it across multiple versions of WLED is a whole other matter. Be sparing with your additions.","title":"Can I help?"},{"location":"WLEDSR/Contributors-and-credits/","text":"Contributors and Credits of sound reactive WLED fork Contributors and Credits of upstream WLED","title":"Contributors and credits"},{"location":"WLEDSR/Digital-Microphone-Hookup/","text":"I2S Digital Audio I2S digital sound modules utilize the industry-standard 24-bit I\u00b2S interface . The I\u00b2S interface allows to connect them directly to an ESP32 (but NOT an ESP8266). The IMNP441, and also the recently tested ICS-43434 (thanks to Serg74) work very well with SR WLED, and they perform much better than any analog device at a comparable price. from INMP441, ICS-43434 from PDM (e.g. SPM1423) from Other to ESP32 GPIO L/R SEL SEL Gnd ground => left channel SD DATA DOUT 32 serial data WS CLK LRCK 15 left right clock SCK -- BCLK 14 serial clock -- -- MCLK 0 master clock (if needed) VDD 3V3 VDD 3.3V power don't use 5V! GND GND GND Gnd ground, 0V See also \u21d2 Sound setting examples for common microphones Microphone type ( SR-WLED sound settings ) * use Generic I2S for INMP441, ICS-43434, and other non-PDM devices * use Generic I2S PDM for PDM microphones like SPM1423 * use SPH0645 for adafruit SPH0645 * use ES7243 for Lyra-T mini, and other board that have the ES7243 chip * use Generic I2S with Mclk only for devices that have an addition pin for 'master clock' Important : please make sure that your I2S device provides sound input on the LEFT audio channel ! For the INMP441 this is achieved by wiring the 'L/R' connection to GND (ground). Only exception is the \"ES7243\" driver, which is always using the RIGHT audio channel. Since 0.12.0, you can change I2S GPIO pins in the Sound Settings interface; on ESP32 any available GPIO can be used for I\u00b2S. The 'SD' signal could also be mapped to an input-only (GPI) pin (*) , if you are low on GPIO pins. You'll need to reboot when done with pin assignment - don't forget to \"save\". To reboot, please press 'reset' on your ESP32. Unfortunately a restart by software (\"soft reboot\") is not always sufficient to activate new driver settings. In addition to I2S microphones, there are solutions available for line-in via I2S. We already have driver support for Boards/Shields with \"es7243\" chip, and we're investigating \"es8388\". Other I2S ADC (analog-to-digital-converter) devices and microphones that have a standard I2S interface may already work with WLED-SR, by using one of the I2S \"Generic\" drivers ( Generic I2S , Generic I2S PDM , or Generic I2S with Mclk ). It is important however that sound input comes on the LEFT audio channel . Please keep in mind that this is a spare-time open source project - we do our best to make generic drivers but we cannot test with all available devices. Notes for older releases of SR WLED (before 0.13.2) (*) Due to a problem that was fixed very recently, its not possible to use input-only GPI pins in older releases of SR WLED. There will be no warning if you try to do so. This problem is solved in the latest release version of SR WLED . In old releases, you need to change GPIO pins used by defining I2S_WS , I2S_SD , and I2S_SCK in your PlatformIO config, or by editing the values in audio_reactive.h. Still having problems? We do not have these digital microphones running on an ESP8266. Having problems getting the INMP441 running with WLED? Here's a test sketch (which you can compile with the Arduino IDE): https://pastebin.com/Ua7s7LYF . If you are still having a problem with that sketch, change the line with ONLY_LEFT to ONLY_RIGHT. If that works, you'll need to go into audio_source.h and change that line. Initial I2S support by @spedione Some I2S audio modules and boards IMNP441 This is the IMNP441; you can find it in many shops including Amazon and Aliexpress. It works very well with SR WLED. ICS-43434 Here's the first board I've seen with the ICS-43434 at: https://www.tindie.com/products/serg74/digital-i2s-microphone-ics-43434-add-on/ I2S ADC for Line-In Looking to add line-in with I2S support? You might want to try I2S ADC boards that use one of these chips: * CirrusLogic WM8782 * CirrusLogic CS5343 * AKM AK5720 ( datasheet ) * Ti PCM1808 or Ti PCM1802 Many I2S ADC boards expect an additional MCLK signal (\"Main Clock\" aka \"System Clock\" aka \"Master Clock\" aka \"Memory Clock\"). MCLK is sometimes labelled SCLK for \"system clock\". For these boards with 4 data pins, use our Generic I2S with MCLK input driver, and connect MCLK pin to GPIO pin 0, 1, or 3 on ESP32. ES7243 based boards ESP32 Lyra-T mini V1.2 ES8388 based boards - not yet supported with I2S on-board microphone and I2S Line-In ( SR WLED support not available yet , but being developed) ESP32 Lyra-T V4.3 Ai-Thinker ESP32 Audio Kit v2.2 Other Ideas (needs some work to make it work) use a second esp32 as bluetooth audio to I2S device In principle, its possible to have a second ESP32 that provides sound input to WLED via I2S. some interesting explanations on the I2S bus: https://diyi0t.com/i2s-sound-tutorial-for-esp32 pschatzmann has created A Simple Arduino Bluetooth Music Receiver and Sender for the ESP32 the library from pschatzmann has examples for how to connect an I2S DAC for playing music from Bluetooth on a speaker. The main difference for SR-WLED should be to put the \"bluetooth ESP\" into \"I2S slave\" mode (instead of being the \"I2S Master\"). There is some information on this website: https://www.eevblog.com/forum/microcontrollers/esp32-as-i2s-(audio)-slave make sure the \"I2S slave\" device is sending 24bit or 16bit Phillips Standard data format.","title":"Digital Microphone Hookup"},{"location":"WLEDSR/Digital-Microphone-Hookup/#i2s-digital-audio","text":"I2S digital sound modules utilize the industry-standard 24-bit I\u00b2S interface . The I\u00b2S interface allows to connect them directly to an ESP32 (but NOT an ESP8266). The IMNP441, and also the recently tested ICS-43434 (thanks to Serg74) work very well with SR WLED, and they perform much better than any analog device at a comparable price. from INMP441, ICS-43434 from PDM (e.g. SPM1423) from Other to ESP32 GPIO L/R SEL SEL Gnd ground => left channel SD DATA DOUT 32 serial data WS CLK LRCK 15 left right clock SCK -- BCLK 14 serial clock -- -- MCLK 0 master clock (if needed) VDD 3V3 VDD 3.3V power don't use 5V! GND GND GND Gnd ground, 0V See also \u21d2 Sound setting examples for common microphones Microphone type ( SR-WLED sound settings ) * use Generic I2S for INMP441, ICS-43434, and other non-PDM devices * use Generic I2S PDM for PDM microphones like SPM1423 * use SPH0645 for adafruit SPH0645 * use ES7243 for Lyra-T mini, and other board that have the ES7243 chip * use Generic I2S with Mclk only for devices that have an addition pin for 'master clock' Important : please make sure that your I2S device provides sound input on the LEFT audio channel ! For the INMP441 this is achieved by wiring the 'L/R' connection to GND (ground). Only exception is the \"ES7243\" driver, which is always using the RIGHT audio channel. Since 0.12.0, you can change I2S GPIO pins in the Sound Settings interface; on ESP32 any available GPIO can be used for I\u00b2S. The 'SD' signal could also be mapped to an input-only (GPI) pin (*) , if you are low on GPIO pins. You'll need to reboot when done with pin assignment - don't forget to \"save\". To reboot, please press 'reset' on your ESP32. Unfortunately a restart by software (\"soft reboot\") is not always sufficient to activate new driver settings. In addition to I2S microphones, there are solutions available for line-in via I2S. We already have driver support for Boards/Shields with \"es7243\" chip, and we're investigating \"es8388\". Other I2S ADC (analog-to-digital-converter) devices and microphones that have a standard I2S interface may already work with WLED-SR, by using one of the I2S \"Generic\" drivers ( Generic I2S , Generic I2S PDM , or Generic I2S with Mclk ). It is important however that sound input comes on the LEFT audio channel . Please keep in mind that this is a spare-time open source project - we do our best to make generic drivers but we cannot test with all available devices.","title":"I2S Digital Audio"},{"location":"WLEDSR/Digital-Microphone-Hookup/#notes-for-older-releases-of-sr-wled-before-0132","text":"(*) Due to a problem that was fixed very recently, its not possible to use input-only GPI pins in older releases of SR WLED. There will be no warning if you try to do so. This problem is solved in the latest release version of SR WLED . In old releases, you need to change GPIO pins used by defining I2S_WS , I2S_SD , and I2S_SCK in your PlatformIO config, or by editing the values in audio_reactive.h.","title":"Notes for older releases of SR WLED (before 0.13.2)"},{"location":"WLEDSR/Digital-Microphone-Hookup/#still-having-problems","text":"We do not have these digital microphones running on an ESP8266. Having problems getting the INMP441 running with WLED? Here's a test sketch (which you can compile with the Arduino IDE): https://pastebin.com/Ua7s7LYF . If you are still having a problem with that sketch, change the line with ONLY_LEFT to ONLY_RIGHT. If that works, you'll need to go into audio_source.h and change that line. Initial I2S support by @spedione","title":"Still having problems?"},{"location":"WLEDSR/Digital-Microphone-Hookup/#some-i2s-audio-modules-and-boards","text":"","title":"Some I2S audio modules and boards"},{"location":"WLEDSR/Digital-Microphone-Hookup/#imnp441","text":"This is the IMNP441; you can find it in many shops including Amazon and Aliexpress. It works very well with SR WLED.","title":"IMNP441"},{"location":"WLEDSR/Digital-Microphone-Hookup/#ics-43434","text":"Here's the first board I've seen with the ICS-43434 at: https://www.tindie.com/products/serg74/digital-i2s-microphone-ics-43434-add-on/","title":"ICS-43434"},{"location":"WLEDSR/Digital-Microphone-Hookup/#i2s-adc-for-line-in","text":"Looking to add line-in with I2S support? You might want to try I2S ADC boards that use one of these chips: * CirrusLogic WM8782 * CirrusLogic CS5343 * AKM AK5720 ( datasheet ) * Ti PCM1808 or Ti PCM1802 Many I2S ADC boards expect an additional MCLK signal (\"Main Clock\" aka \"System Clock\" aka \"Master Clock\" aka \"Memory Clock\"). MCLK is sometimes labelled SCLK for \"system clock\". For these boards with 4 data pins, use our Generic I2S with MCLK input driver, and connect MCLK pin to GPIO pin 0, 1, or 3 on ESP32.","title":"I2S ADC for Line-In"},{"location":"WLEDSR/Digital-Microphone-Hookup/#es7243-based-boards","text":"ESP32 Lyra-T mini V1.2","title":"ES7243 based boards"},{"location":"WLEDSR/Digital-Microphone-Hookup/#es8388-based-boards-not-yet-supported","text":"with I2S on-board microphone and I2S Line-In ( SR WLED support not available yet , but being developed) ESP32 Lyra-T V4.3 Ai-Thinker ESP32 Audio Kit v2.2","title":"ES8388 based boards - not yet supported"},{"location":"WLEDSR/Digital-Microphone-Hookup/#other-ideas-needs-some-work-to-make-it-work","text":"","title":"Other Ideas (needs some work to make it work)"},{"location":"WLEDSR/Digital-Microphone-Hookup/#use-a-second-esp32-as-bluetooth-audio-to-i2s-device","text":"In principle, its possible to have a second ESP32 that provides sound input to WLED via I2S. some interesting explanations on the I2S bus: https://diyi0t.com/i2s-sound-tutorial-for-esp32 pschatzmann has created A Simple Arduino Bluetooth Music Receiver and Sender for the ESP32 the library from pschatzmann has examples for how to connect an I2S DAC for playing music from Bluetooth on a speaker. The main difference for SR-WLED should be to put the \"bluetooth ESP\" into \"I2S slave\" mode (instead of being the \"I2S Master\"). There is some information on this website: https://www.eevblog.com/forum/microcontrollers/esp32-as-i2s-(audio)-slave make sure the \"I2S slave\" device is sending 24bit or 16bit Phillips Standard data format.","title":"use a second esp32 as bluetooth audio to I2S device"},{"location":"WLEDSR/Digital-Sound-Sampling-Sketch-Example/","text":"Use this code to read and calculate the average from the INMP441/ICS-43434 microphone on an ESP32 or ESP8266 Use the Arduino Serial plotter to view the output and compare your results to those found here . Make sure you have set the baud rate on your Serial plotter to 115200 (as defined in the sketch). /* * ESP32 I2S Noise Level Example. * * By: maspetsberger * * Updated by: Andrew Tuline * * This example calculates a mean noise level. * * Tie the L/R pin to ground. Other pins are listed below. * VDD goes to 3.3V * GND goes to Gnd * */ #include <driver/i2s.h> #define I2S_WS 15 // aka LRCL #define I2S_SD 32 // aka DOUT #define I2S_SCK 14 // aka BCLK const i2s_port_t I2S_PORT = I2S_NUM_0 ; const int BLOCK_SIZE = 64 ; const int SAMPLE_RATE = 10240 ; float mean = 0 ; bool INMP_flag = 0 ; void setup () { Serial . begin ( 115200 ); Serial . println ( \"Configuring I2S...\" ); esp_err_t i2s_err ; // The I2S config as per the example const i2s_config_t i2s_config = { . mode = i2s_mode_t ( I2S_MODE_MASTER | I2S_MODE_RX ), // Receive, not transfer . sample_rate = SAMPLE_RATE , // 16KHz . bits_per_sample = I2S_BITS_PER_SAMPLE_32BIT , // could only get it to work with 32bits . channel_format = I2S_CHANNEL_FMT_ONLY_LEFT , // LEFT when pin is tied to ground. . communication_format = i2s_comm_format_t ( I2S_COMM_FORMAT_I2S | I2S_COMM_FORMAT_I2S_MSB ), . intr_alloc_flags = ESP_INTR_FLAG_LEVEL1 , // Interrupt level 1 . dma_buf_count = 8 , // number of buffers . dma_buf_len = BLOCK_SIZE // samples per buffer }; // The pin config as per the setup const i2s_pin_config_t pin_config = { . bck_io_num = I2S_SCK , // BCLK aka SCK . ws_io_num = I2S_WS , // LRCL aka WS . data_out_num = -1 , // not used (only for speakers) . data_in_num = I2S_SD // DOUT aka SD }; // Configuring the I2S driver and pins. // This function must be called before any I2S driver read/write operations. i2s_err = i2s_driver_install ( I2S_PORT , & i2s_config , 0 , NULL ); if ( i2s_err != ESP_OK ) { Serial . printf ( \"Failed installing driver: %d \\n \" , i2s_err ); while ( true ); } i2s_err = i2s_set_pin ( I2S_PORT , & pin_config ); if ( i2s_err != ESP_OK ) { Serial . printf ( \"Failed setting pin: %d \\n \" , i2s_err ); while ( true ); } Serial . println ( \"I2S driver installed.\" ); delay ( 1000 ); // Enough time to see these messages. This need to be BEFORE the INMP test. getINMP (); if ( mean != 0.0 ) { Serial . println ( \"INMP is present.\" ); INMP_flag = 1 ; } } // setup() void loop () { if ( INMP_flag ) { getINMP (); Serial . print ( abs ( mean )); Serial . print ( \" \" ); Serial . println ( 1600 ); } else { // Analog Read here!! } } // loop() void getINMP () { // Read multiple samples at once and calculate the sound pressure int32_t samples [ BLOCK_SIZE ]; int num_bytes_read = i2s_read_bytes ( I2S_PORT , ( char * ) samples , BLOCK_SIZE , // the doc says bytes, but its elements. portMAX_DELAY ); // no timeout int samples_read = num_bytes_read / 8 ; if ( samples_read > 0 ) { for ( int i = 0 ; i < samples_read ; ++ i ) { mean += samples [ i ]; } mean = mean / BLOCK_SIZE / 16384 ; } }","title":"Digital Sound Sampling Sketch Example"},{"location":"WLEDSR/End-user-guide/","text":"Introduction As WLED Sound Reactive is a fork of WLED, a general End User Guide can be found here . This page will show Sound Reactive specific information (in the near future)","title":"End user guide"},{"location":"WLEDSR/End-user-guide/#introduction","text":"As WLED Sound Reactive is a fork of WLED, a general End User Guide can be found here . This page will show Sound Reactive specific information (in the near future)","title":"Introduction"},{"location":"WLEDSR/First-Time-Setup/","text":"Introduction The sound reactive version of WLED provides all of the functionality of WLED with a few caveats: Some of the default services supported by WLED such as IR, Alexa and Blynk are disabled by default. To enable them, update the definitions in wled.h and re-compile. Spurious noise and spikes have been problematic during the development of SR WLED. See 'Noise and Spikes' below for further discussion on this topic. We recommend using SR WLED in STA mode, instead of the standalone AP mode (aka WLED-AP). It generates more noise. If you have problems with the LED's, make sure you can successfully run the latest version of standard WLED. Start out with a small strip of ~30 LED's before setting up a large installation. Grounding may also be a problem. For example, my line-in setup picked up a lot of noise when my ESP32 board was connected to the USB port on my PC, but NO noise when powered by a USB power bank. Connectors!! Dupont connectors are notoriously flaky. I use JST-SM connectors for the LED's and (so far) just soldered the microphones. First Steps First Contact (after uploading) After uploading WLED to the ESP, use your phone and connect to the WLED-AP using the password 'wled1234'. Click 'Login to network' when the notification about this shows up. You are then transfered to the WLED's start page, and here we should click \"WIFI SETTINGS\" to connect to the local network. Fill in the settings for your local Wifi network, and then click 'Save & Connect'. The device will reboot and if everything worked it will now be connected to the local network. Finding it's IP-address can be done via the network routers administration page, or via an mobile app like Fing were you can find a new device called \"wled-WLED\". Open this IP in a webbrowser to access WLED's control page. Wifi and LEDs On the WiFi Setup page, it is highly recommended that you connect your SR WLED strip to an existing network. At the bottom of the WiFi Setup page, check on 'Disable WiFi sleep'. This may not be necessary if you're not experiencing noise or UDP Sync lag issues. On the LED Preferences page, configure the length of your led strip. On the LED Preference page, configure the 2D matrix size, i.e. 1x30 or 16x16, etc. If you have not configured this, 2D routines may not work. Sound On the Sound Setting page, set the Squelch setting to '1', the Gain > 200, and AGC = Off. On the Effects page, set the animation to ' Gravcenter' or ' Gravimeter'. Back on the Sound Settings page, increase/save Squelch setting until strip no longer reacts to the ambient noise. On the Sound Settings page, set the Gain to 40. Then reduce/adjust the Gain setting until the leds react reasonably with your voice. You might also want to run a Pink Noise video and fine tune the values from there. Sound Settings: getting started with common microphones Disclaimer: The information below is for the latest release version of SR WLED . If you use an older release, please divide _Gain values by 4._ Here's a starting point table of Squelch and Gain settings for different input types: Input (I2S digital) Squelch Gain Type comments INMP441 6 60 Generic I2S ICS-43434 16 30 Generic I2S SPM1423 tbd tbd Generic I2S PDM M5StickC, M5AtomU SPH0654 tbd tbd SPH0654 ES7243 tbd tbd ES7243 ESP32 Lyra-T Mini Line-In CS5343 tbd tbd Generic I2S with Mclk MCLK to GPIO0 Input (ADC analog) Squelch Gain Type MAX9814 @40dB 10 80 Generic Analog Line-In 8 120 Generic Analog INMP411 20 80 Generic Analog MAX4466 16 120 Generic Analog Analog or I2S Digital? We recommend using an I2S digital microphone , like INMP441, ICS-43434, or PDM microphones. Analog input ( Microphone or Line-in ) is also possible, however you might have power fluctuation (3.3V) and noise issues when using these. Analog devices are handled by the \"ADC1\" unit of your ESP32. Problems can be expected when connecting \"analog buttons\" (Potentiometer) to the same ADC1 unit. Finally Analog Microphones often work best when placed very close to the sound source, while digital ones like the INMP441 can easily pick up sound from several meters apart. With the analog MAX4466, we found that 30-50cm is an optimal distance. AGC Automatic gain control (AGC) is not enabled by default in SR WLED, because of so many different input types and ambient noise in different environments. We don't know what your 'quiet' is. In addition, the LED's should NOT be reacting when it IS quiet, so it's up to you to first make those adjustments. In addition, sensitivity can be further adjusted with either the Intensity or Speed slider in many of the animations. While an improved autonomous gain control (iAGC) feature is available since version 0.13.1 , it is still very important that you first find a good Squelch setting for your environment. Afterwards you can enable AGC and let the controller adjust input levels automatically. Noise and Spikes While providing a lot of functionality, the ESP8266 and the ESP32 boards (typical ones) we have been using, have experienced a lot of spurious noise on their ADC pins. This has also been discussed at length on various ESP related forums. Methods that may help remediate this include: Use an I2S microphone, such as the INMP441, SPH0645 or ICS-43434. Use a separate WiFi antenna. Don't use AP mode. Disable the WiFi sleep mode. Use shielded wiring for your analog sampling pin. Isolate the power between the LED strips and the controller. Don't power your LED stripe from the ESP32 3.3v or 5v pins. Don't use USB power from your PC. Some batches of analog microphones are just no good.","title":"First Time Setup"},{"location":"WLEDSR/First-Time-Setup/#introduction","text":"The sound reactive version of WLED provides all of the functionality of WLED with a few caveats:","title":"Introduction"},{"location":"WLEDSR/First-Time-Setup/#some-of-the-default-services-supported-by-wled-such-as-ir-alexa-and-blynk-are-disabled-by-default-to-enable-them-update-the-definitions-in-wledh-and-re-compile","text":"Spurious noise and spikes have been problematic during the development of SR WLED. See 'Noise and Spikes' below for further discussion on this topic. We recommend using SR WLED in STA mode, instead of the standalone AP mode (aka WLED-AP). It generates more noise. If you have problems with the LED's, make sure you can successfully run the latest version of standard WLED. Start out with a small strip of ~30 LED's before setting up a large installation. Grounding may also be a problem. For example, my line-in setup picked up a lot of noise when my ESP32 board was connected to the USB port on my PC, but NO noise when powered by a USB power bank. Connectors!! Dupont connectors are notoriously flaky. I use JST-SM connectors for the LED's and (so far) just soldered the microphones.","title":"Some of the default services supported by WLED such as IR, Alexa and Blynk are disabled by default. To enable them, update the definitions in wled.h and re-compile."},{"location":"WLEDSR/First-Time-Setup/#first-steps","text":"","title":"First Steps"},{"location":"WLEDSR/First-Time-Setup/#first-contact-after-uploading","text":"After uploading WLED to the ESP, use your phone and connect to the WLED-AP using the password 'wled1234'. Click 'Login to network' when the notification about this shows up. You are then transfered to the WLED's start page, and here we should click \"WIFI SETTINGS\" to connect to the local network. Fill in the settings for your local Wifi network, and then click 'Save & Connect'. The device will reboot and if everything worked it will now be connected to the local network. Finding it's IP-address can be done via the network routers administration page, or via an mobile app like Fing were you can find a new device called \"wled-WLED\". Open this IP in a webbrowser to access WLED's control page.","title":"First Contact (after uploading)"},{"location":"WLEDSR/First-Time-Setup/#wifi-and-leds","text":"On the WiFi Setup page, it is highly recommended that you connect your SR WLED strip to an existing network. At the bottom of the WiFi Setup page, check on 'Disable WiFi sleep'. This may not be necessary if you're not experiencing noise or UDP Sync lag issues. On the LED Preferences page, configure the length of your led strip. On the LED Preference page, configure the 2D matrix size, i.e. 1x30 or 16x16, etc. If you have not configured this, 2D routines may not work.","title":"Wifi and LEDs"},{"location":"WLEDSR/First-Time-Setup/#sound","text":"On the Sound Setting page, set the Squelch setting to '1', the Gain > 200, and AGC = Off. On the Effects page, set the animation to ' Gravcenter' or ' Gravimeter'. Back on the Sound Settings page, increase/save Squelch setting until strip no longer reacts to the ambient noise. On the Sound Settings page, set the Gain to 40. Then reduce/adjust the Gain setting until the leds react reasonably with your voice. You might also want to run a Pink Noise video and fine tune the values from there.","title":"Sound"},{"location":"WLEDSR/First-Time-Setup/#sound-settings-getting-started-with-common-microphones","text":"Disclaimer: The information below is for the latest release version of SR WLED . If you use an older release, please divide _Gain values by 4._ Here's a starting point table of Squelch and Gain settings for different input types: Input (I2S digital) Squelch Gain Type comments INMP441 6 60 Generic I2S ICS-43434 16 30 Generic I2S SPM1423 tbd tbd Generic I2S PDM M5StickC, M5AtomU SPH0654 tbd tbd SPH0654 ES7243 tbd tbd ES7243 ESP32 Lyra-T Mini Line-In CS5343 tbd tbd Generic I2S with Mclk MCLK to GPIO0 Input (ADC analog) Squelch Gain Type MAX9814 @40dB 10 80 Generic Analog Line-In 8 120 Generic Analog INMP411 20 80 Generic Analog MAX4466 16 120 Generic Analog","title":"Sound Settings: getting started with common microphones"},{"location":"WLEDSR/First-Time-Setup/#analog-or-i2s-digital","text":"We recommend using an I2S digital microphone , like INMP441, ICS-43434, or PDM microphones. Analog input ( Microphone or Line-in ) is also possible, however you might have power fluctuation (3.3V) and noise issues when using these. Analog devices are handled by the \"ADC1\" unit of your ESP32. Problems can be expected when connecting \"analog buttons\" (Potentiometer) to the same ADC1 unit. Finally Analog Microphones often work best when placed very close to the sound source, while digital ones like the INMP441 can easily pick up sound from several meters apart. With the analog MAX4466, we found that 30-50cm is an optimal distance.","title":"Analog or I2S Digital?"},{"location":"WLEDSR/First-Time-Setup/#agc","text":"Automatic gain control (AGC) is not enabled by default in SR WLED, because of so many different input types and ambient noise in different environments. We don't know what your 'quiet' is. In addition, the LED's should NOT be reacting when it IS quiet, so it's up to you to first make those adjustments. In addition, sensitivity can be further adjusted with either the Intensity or Speed slider in many of the animations. While an improved autonomous gain control (iAGC) feature is available since version 0.13.1 , it is still very important that you first find a good Squelch setting for your environment. Afterwards you can enable AGC and let the controller adjust input levels automatically.","title":"AGC"},{"location":"WLEDSR/First-Time-Setup/#noise-and-spikes","text":"While providing a lot of functionality, the ESP8266 and the ESP32 boards (typical ones) we have been using, have experienced a lot of spurious noise on their ADC pins. This has also been discussed at length on various ESP related forums. Methods that may help remediate this include: Use an I2S microphone, such as the INMP441, SPH0645 or ICS-43434. Use a separate WiFi antenna. Don't use AP mode. Disable the WiFi sleep mode. Use shielded wiring for your analog sampling pin. Isolate the power between the LED strips and the controller. Don't power your LED stripe from the ESP32 3.3v or 5v pins. Don't use USB power from your PC. Some batches of analog microphones are just no good.","title":"Noise and Spikes"},{"location":"WLEDSR/Future-Directions/","text":"We've had a lot of fun creating our audio reactive fork of WLED, and we've got more to come. Wish List Topic Notes Skills Required \u2714\ufe0f Dynamic sliders/controls Allow additional sliders to be hidden by default, or displayed depending on the effect. Javascript, XML, JSON, HTML, CSS \u2714\ufe0f Improved default values for sliders Allow improved default values for sliders and on a per SEGMENT basis. Javascript, XML, JSON, HTML Add 2D Library support Add a full 2D library for FastLED functionality C, System \u2714\ufe0f Add SEGMENT support for 2D Improve SEGMENT capabilities Everything Improved/documented QA process We need to be able to better test our significant updates. A test/release plan would be a good start. ITIL Coordinated light show To have delayed/coordinated lighting effects in different devices. To run on Android. Kotlin (for Android), C Multi-pin To support SR WLED with SEGMENTS and multi-pin per-device squelch + gain see https://github.com/atuline/WLED/issues/221 for users who configure several sound inputs (use one at a time) it might be useful to have squelch/gain settings for each device. C++ Our focus for new functionality should be specific to sound reactivity. Otherwise, we should get some idea as to if/when AirCoookie is planning to implement this functionality. Outstanding Issues Issue Notes","title":"Future Directions"},{"location":"WLEDSR/Future-Directions/#wish-list","text":"Topic Notes Skills Required \u2714\ufe0f Dynamic sliders/controls Allow additional sliders to be hidden by default, or displayed depending on the effect. Javascript, XML, JSON, HTML, CSS \u2714\ufe0f Improved default values for sliders Allow improved default values for sliders and on a per SEGMENT basis. Javascript, XML, JSON, HTML Add 2D Library support Add a full 2D library for FastLED functionality C, System \u2714\ufe0f Add SEGMENT support for 2D Improve SEGMENT capabilities Everything Improved/documented QA process We need to be able to better test our significant updates. A test/release plan would be a good start. ITIL Coordinated light show To have delayed/coordinated lighting effects in different devices. To run on Android. Kotlin (for Android), C Multi-pin To support SR WLED with SEGMENTS and multi-pin per-device squelch + gain see https://github.com/atuline/WLED/issues/221 for users who configure several sound inputs (use one at a time) it might be useful to have squelch/gain settings for each device. C++ Our focus for new functionality should be specific to sound reactivity. Otherwise, we should get some idea as to if/when AirCoookie is planning to implement this functionality.","title":"Wish List"},{"location":"WLEDSR/Future-Directions/#outstanding-issues","text":"Issue Notes","title":"Outstanding Issues"},{"location":"WLEDSR/Home/","text":"The WLEDSR help you can find here have been copied from https://github.com/atuline/WLED/wiki . These pages are here temporarily. Aim is to migrate them step by step to 0.14 general and MM specific pages. WLED Sound Reactive Introduction This is a FORK of the original WLED code as found at wled.me . It provides basic sound reactivity for both the ESP8266 and ESP32 platforms as well as FFT sound reactivity for the ESP32. Due to the performance limitations of the ESP8266, we decided to separate the ESP8266 and ESP32 code in order to provide a more stable build for the ESP8266. Beginning with version 0.10.2 and moving forward, ESP8266 support has been removed from the master branch. It receives very limited support and updates and is located at ESP8266 Branch . We have also disabled functionality for other interfaces, such as Alexa, Blynk, Cronixie, Huesync, Infrared. If you would like to enable them, you will need to modify wled.h, compile and upload to your device. If you have any issues, please engage the Discord community, as we only support functionality for the web interface. Features We do our best to perform upstream merges with the original WLED. Our fork includes: Several volume reactive effects. Several FFT (frequency) reactive effects. Some new non-reactive 1D effects. Many 2D effects, including a highly configurable \"graphical equalizer\" effect. UDP sync for volume and FFT reactive effects. Additional sliders for controlling effects. Multiple panels of 2D led's. 2D segments. Dynamic naming and visibility of sliders. An interpreter - for creating your own custom effects. Configuration setting for 2D, panels, noise squelch, gain, and UDP sound synchronization. Sound Reactive WLED Fork Team: A bit of everything (mainly FastLED animations): Andrew Tuline (aka johnny5canuck) Sound reactive ESP32 FFT, 2D: Andreas Pleschutznig (aka apleschu) General contributor, documentation, versioning, keep us up to date: Chris Reese (aka THATDONFC) General contributor, UDP Sound Sync, INMP441 I2S: Chris Hultin (aka spedione) Panels, 2D, segments, animations, custom effects (interpreter) and code cleanup: Ewoud Wijma (aka ewowi) Sound processing, FFT, and code cleanup: Frank M\u00f6hle (aka softhack007) I2S Sound input and processing: Florian Heilmann (aka Haribo / FHeilmann) Other members of the WLED Discord group have provided code and testing support as well. Thanks all! Knowledge and Pre-Requisites Before attempting to compile this fork of WLED with Platform IO (the Arduino IDE is no longer viable for this project), make sure you CAN compile the one from wled.me . If you are unable to compile WLED, please consider flashing your device with binaries instead. Hardware used Using the WLED 0.10 codebase, our code has been tested with: INMP441 I2S digital microphone MAX9814 electret microphone INMP401 MEMS microphone MAX4466 Electret microphone 3.5mm Line In LOLIN D32 and Lolin D32 lite Espressif ESP32 DevKitC V4 WeMOS D1 Mini (ESP8266) For more information, see our Analog Audio Input Options or Digital Audio Input Options page. Default pins used GPIO2 (D4 on WEMOS) for both ESP8266 and ESP32 for WS2812's A0 for ESP8266 (audio-in pin) GPIO36 (or VP) for the ESP32 (audio-in pin) See [[Digital Microphone Hookup]] for pins used In SR-WLED 0.12.0 or newer, you can use the web UI to change pins. In older versions, you can change the pins used by adding definitions in your PlatformIO config or editing audio_reactive.h. Discussion and Support Please consider joining the WLED Discord groups where we have dedicated channels to discuss this project, your projects, and answer any questions you may have. Join Discord to discuss beta testing of our sound reactive fork of WLED. Join Discord to discuss AirCookie's WLED . We can also be found on reddit at r/soundreactive . Support Forums WLED on Reddit r/soundreactive on Reddit WLED Discord WLED Discord WLED Soundreactive Discord WLED on Discourse FastLED on Reddit","title":"Introduction"},{"location":"WLEDSR/Home/#wled-sound-reactive-introduction","text":"This is a FORK of the original WLED code as found at wled.me . It provides basic sound reactivity for both the ESP8266 and ESP32 platforms as well as FFT sound reactivity for the ESP32. Due to the performance limitations of the ESP8266, we decided to separate the ESP8266 and ESP32 code in order to provide a more stable build for the ESP8266. Beginning with version 0.10.2 and moving forward, ESP8266 support has been removed from the master branch. It receives very limited support and updates and is located at ESP8266 Branch . We have also disabled functionality for other interfaces, such as Alexa, Blynk, Cronixie, Huesync, Infrared. If you would like to enable them, you will need to modify wled.h, compile and upload to your device. If you have any issues, please engage the Discord community, as we only support functionality for the web interface.","title":"WLED Sound Reactive Introduction"},{"location":"WLEDSR/Home/#features","text":"We do our best to perform upstream merges with the original WLED. Our fork includes: Several volume reactive effects. Several FFT (frequency) reactive effects. Some new non-reactive 1D effects. Many 2D effects, including a highly configurable \"graphical equalizer\" effect. UDP sync for volume and FFT reactive effects. Additional sliders for controlling effects. Multiple panels of 2D led's. 2D segments. Dynamic naming and visibility of sliders. An interpreter - for creating your own custom effects. Configuration setting for 2D, panels, noise squelch, gain, and UDP sound synchronization.","title":"Features"},{"location":"WLEDSR/Home/#sound-reactive-wled-fork-team","text":"A bit of everything (mainly FastLED animations): Andrew Tuline (aka johnny5canuck) Sound reactive ESP32 FFT, 2D: Andreas Pleschutznig (aka apleschu) General contributor, documentation, versioning, keep us up to date: Chris Reese (aka THATDONFC) General contributor, UDP Sound Sync, INMP441 I2S: Chris Hultin (aka spedione) Panels, 2D, segments, animations, custom effects (interpreter) and code cleanup: Ewoud Wijma (aka ewowi) Sound processing, FFT, and code cleanup: Frank M\u00f6hle (aka softhack007) I2S Sound input and processing: Florian Heilmann (aka Haribo / FHeilmann) Other members of the WLED Discord group have provided code and testing support as well. Thanks all!","title":"Sound Reactive WLED Fork Team:"},{"location":"WLEDSR/Home/#knowledge-and-pre-requisites","text":"Before attempting to compile this fork of WLED with Platform IO (the Arduino IDE is no longer viable for this project), make sure you CAN compile the one from wled.me . If you are unable to compile WLED, please consider flashing your device with binaries instead.","title":"Knowledge and Pre-Requisites"},{"location":"WLEDSR/Home/#hardware-used","text":"Using the WLED 0.10 codebase, our code has been tested with: INMP441 I2S digital microphone MAX9814 electret microphone INMP401 MEMS microphone MAX4466 Electret microphone 3.5mm Line In LOLIN D32 and Lolin D32 lite Espressif ESP32 DevKitC V4 WeMOS D1 Mini (ESP8266) For more information, see our Analog Audio Input Options or Digital Audio Input Options page.","title":"Hardware used"},{"location":"WLEDSR/Home/#default-pins-used","text":"GPIO2 (D4 on WEMOS) for both ESP8266 and ESP32 for WS2812's A0 for ESP8266 (audio-in pin) GPIO36 (or VP) for the ESP32 (audio-in pin) See [[Digital Microphone Hookup]] for pins used In SR-WLED 0.12.0 or newer, you can use the web UI to change pins. In older versions, you can change the pins used by adding definitions in your PlatformIO config or editing audio_reactive.h.","title":"Default pins used"},{"location":"WLEDSR/Home/#discussion-and-support","text":"Please consider joining the WLED Discord groups where we have dedicated channels to discuss this project, your projects, and answer any questions you may have. Join Discord to discuss beta testing of our sound reactive fork of WLED. Join Discord to discuss AirCookie's WLED . We can also be found on reddit at r/soundreactive .","title":"Discussion and Support"},{"location":"WLEDSR/Home/#support-forums","text":"WLED on Reddit r/soundreactive on Reddit WLED Discord WLED Discord WLED Soundreactive Discord WLED on Discourse FastLED on Reddit","title":"Support Forums"},{"location":"WLEDSR/Installing-and-Compiling/","text":"IMPORTANT: Before attempting to compile this fork of WLED, make sure you can compile the original WLED - instructions are here . If you are unable to compile WLED, please consider flashing your device with binaries instead. If you managed to compile original WLED, test your new skills and compile the soundreactive fork of WLED . Installing pre-built binaries Downloading USB Drivers Download the CH340 drivers at https://www.wemos.cc/en/latest/ch340_driver.html Flashing From Binary The Sound Reactive WLED binaries for ESP32 are located here. SR WLED releases are also included in this web-based installer: https://wled-install.github.io Flashing ESP32 Binaries with esptool Warning : We had to change the partition size on the ESP32 in order to 'fit' all the new features. This means that the 'old way' of upgrading/flashing, no longer work unfortunately. You cannot use ESPHome Flasher , and you cannot use OTA from a build prior to v0.13.0-b5. Download esptool . Download the ESP32 bootloader, such as esp32_bootloader_v4 Download the sound reactive binary, such as Atuline releases Plug the ESP32 board into your computer. Optionally determine which Com port it uses. You could use NodeMCU-PyFlasher to do this, but don't flash the binary with it. Open a Command prompt on your computer. Assuming you copied esptool and both binaries to the same directory, you could clear the contents of the ESP32 with: esptool.exe erase_flash Then burn the bootloader with: esptool.exe write_flash 0x0 esp32_bootloader_v4.bin Once complete, you can now burn the sound reactive binary with: esptool write_flash 0x10000 soundReactive_WLED_0.13.X_ESP32.bin You can optionally add the port, such as '-p COM6'. In addition, if this is the first time you've used this version, you need to go to the \"Security & Updates\" settings page and tick the \"Factory reset\" box, then select \"Save & Reboot\". Caveat: May not be necessary if you ran 'erase_flash' above. This will reset the EEPROM and remove any settings or presets you may have saved. Note: If you Flash via another method, you will definitely need to perform a Factory Reset. Cycling the power is also a requirement if you're doing anything with I2S. Flashing ESP8266 Binaries Download for your platform NodeMCU-PyFlasher . Plug the WeMOS D1 Mini (or other ESP8266 device) into your computer. Run NodeMCU-PyFlasher. Load the binary. Select the Com port. Select 'yes, wipes all data'. Press Flash NodeMCU. unofficial development binaries - here be dragons You can find some unofficial SR WLED binaries, including intermediate development builds for ESP32, here: Installation services https://wled-install.github.io https://install.wled.me Firmware Binaries https://github.com/srg74/WLED-wemos-shield/tree/master/resources/Firmware/Sound_reactive https://github.com/wled-install/wled-install.github.io Please keep in mind that these sites are not maintained by the SR WLED team. You may find old outdated binaries, or binaries that might not work on generic ESP32 hardware. So please compare build number and dates, and read descriptions before installing one of these. Compiling from Platform IO Getting started \u21db first read https://kno.wled.ge/advanced/compiling-wled/ \u2192 use source code from https://github.com/atuline/WLED/tree/master \u2192 start with one of the sound reactive compile environments, like env:soundReactive_esp32dev \u2192 read wled00/wled.h , add your own settings to wled00/my_config.h \u2192 put your own compile environment(s) into platformio_override.ini . SoundReactive has some additional compile time options - see wled00/audio_reactive.h and wled00/audio_source.h . Additional Compile Guidelines If you get .py errors, install Python (wait for the VSCode popup to install Python) If you do not install the Arduino IDE (Why should you if you have PlatformIO) and your board is not recognised if you compile to board, install the USB to UART bridge VSP Drivers For the sound reactive ESP32 firmware, the board type should be env:soundreactive_esp32dev. This is because we have modified the build partitions in order to go beyond the original compile size limits of WLED. Note: We have long since stopped compiling WLED with the Arduino IDE. Disabled Feature of WLED Some features of \"standard WLED\" are by default disabled in SR WLED. These extended features have shown negative impacts on performance and stability - we need all available \"power\" to run sound analysis. For example, they possibly use too much memory (FLASH or RAM), can lead to lags in animations, or may cause slow responses to sound input. The same is true for many WLED usermods: they might work (like 4LineDisplay), but could have side-effects on our sound reactive features so we disabled them in our \"official\" firmware builds. How to Shoot Yourself in the Foot If you're keen to use a disabled WLED feature, in your personal build of SR-WLED: check if there is a -D DISABLE_... flag in your build environment (platformio.ini, or platformio_override.ini), and comment it out or remove it. check if the feature is disabled explicitly in wled00/wled.h . If a feature has been disabled explicitly in wled.h, then there is usually a good technical reason for that decision. Please don't write bug reports for feature that were disabled explicitly. If you still want that feature, you can un-disable it like this Add to your wled00/my_config.h // re-activate Alexa support. Yes I know this is not supported officially. // I don't mind if animations will sometimes \"stutter\" and lag behind the sound. #ifdef WLED_DISABLE_ALEXA #undef WLED_DISABLE_ALEXA #endif // re-activate MQTT support. Yes I know this is not supported officially. // I am ready to take good care of my hung, non-responsive device if necessary. #ifndef WLED_ENABLE_MQTT #define WLED_ENABLE_MQTT #ifdef WLED_DISABLE_MQTT #undef WLED_DISABLE_MQTT #endif #endif // re-activate IR receiver support. Yes I know this is not supported officially. // I can live with my LEDs flickering sometimes, and effects stuttering randomly. #ifdef WLED_DISABLE_INFRARED #undef WLED_DISABLE_INFRARED #endif","title":"Installing and Compiling"},{"location":"WLEDSR/Installing-and-Compiling/#installing-pre-built-binaries","text":"","title":"Installing pre-built binaries"},{"location":"WLEDSR/Installing-and-Compiling/#downloading-usb-drivers","text":"Download the CH340 drivers at https://www.wemos.cc/en/latest/ch340_driver.html","title":"Downloading USB Drivers"},{"location":"WLEDSR/Installing-and-Compiling/#flashing-from-binary","text":"The Sound Reactive WLED binaries for ESP32 are located here. SR WLED releases are also included in this web-based installer: https://wled-install.github.io","title":"Flashing From Binary"},{"location":"WLEDSR/Installing-and-Compiling/#flashing-esp32-binaries-with-esptool","text":"Warning : We had to change the partition size on the ESP32 in order to 'fit' all the new features. This means that the 'old way' of upgrading/flashing, no longer work unfortunately. You cannot use ESPHome Flasher , and you cannot use OTA from a build prior to v0.13.0-b5. Download esptool . Download the ESP32 bootloader, such as esp32_bootloader_v4 Download the sound reactive binary, such as Atuline releases Plug the ESP32 board into your computer. Optionally determine which Com port it uses. You could use NodeMCU-PyFlasher to do this, but don't flash the binary with it. Open a Command prompt on your computer. Assuming you copied esptool and both binaries to the same directory, you could clear the contents of the ESP32 with: esptool.exe erase_flash Then burn the bootloader with: esptool.exe write_flash 0x0 esp32_bootloader_v4.bin Once complete, you can now burn the sound reactive binary with: esptool write_flash 0x10000 soundReactive_WLED_0.13.X_ESP32.bin You can optionally add the port, such as '-p COM6'. In addition, if this is the first time you've used this version, you need to go to the \"Security & Updates\" settings page and tick the \"Factory reset\" box, then select \"Save & Reboot\". Caveat: May not be necessary if you ran 'erase_flash' above. This will reset the EEPROM and remove any settings or presets you may have saved. Note: If you Flash via another method, you will definitely need to perform a Factory Reset. Cycling the power is also a requirement if you're doing anything with I2S.","title":"Flashing ESP32 Binaries with esptool"},{"location":"WLEDSR/Installing-and-Compiling/#flashing-esp8266-binaries","text":"Download for your platform NodeMCU-PyFlasher . Plug the WeMOS D1 Mini (or other ESP8266 device) into your computer. Run NodeMCU-PyFlasher. Load the binary. Select the Com port. Select 'yes, wipes all data'. Press Flash NodeMCU.","title":"Flashing ESP8266 Binaries"},{"location":"WLEDSR/Installing-and-Compiling/#unofficial-development-binaries-here-be-dragons","text":"You can find some unofficial SR WLED binaries, including intermediate development builds for ESP32, here:","title":"unofficial development binaries - here be dragons"},{"location":"WLEDSR/Installing-and-Compiling/#installation-services","text":"https://wled-install.github.io https://install.wled.me","title":"Installation services"},{"location":"WLEDSR/Installing-and-Compiling/#firmware-binaries","text":"https://github.com/srg74/WLED-wemos-shield/tree/master/resources/Firmware/Sound_reactive https://github.com/wled-install/wled-install.github.io Please keep in mind that these sites are not maintained by the SR WLED team. You may find old outdated binaries, or binaries that might not work on generic ESP32 hardware. So please compare build number and dates, and read descriptions before installing one of these.","title":"Firmware Binaries"},{"location":"WLEDSR/Installing-and-Compiling/#compiling-from-platform-io","text":"","title":"Compiling from Platform IO"},{"location":"WLEDSR/Installing-and-Compiling/#getting-started","text":"\u21db first read https://kno.wled.ge/advanced/compiling-wled/ \u2192 use source code from https://github.com/atuline/WLED/tree/master \u2192 start with one of the sound reactive compile environments, like env:soundReactive_esp32dev \u2192 read wled00/wled.h , add your own settings to wled00/my_config.h \u2192 put your own compile environment(s) into platformio_override.ini . SoundReactive has some additional compile time options - see wled00/audio_reactive.h and wled00/audio_source.h .","title":"Getting started"},{"location":"WLEDSR/Installing-and-Compiling/#additional-compile-guidelines","text":"If you get .py errors, install Python (wait for the VSCode popup to install Python) If you do not install the Arduino IDE (Why should you if you have PlatformIO) and your board is not recognised if you compile to board, install the USB to UART bridge VSP Drivers For the sound reactive ESP32 firmware, the board type should be env:soundreactive_esp32dev. This is because we have modified the build partitions in order to go beyond the original compile size limits of WLED. Note: We have long since stopped compiling WLED with the Arduino IDE.","title":"Additional Compile Guidelines"},{"location":"WLEDSR/Installing-and-Compiling/#disabled-feature-of-wled","text":"Some features of \"standard WLED\" are by default disabled in SR WLED. These extended features have shown negative impacts on performance and stability - we need all available \"power\" to run sound analysis. For example, they possibly use too much memory (FLASH or RAM), can lead to lags in animations, or may cause slow responses to sound input. The same is true for many WLED usermods: they might work (like 4LineDisplay), but could have side-effects on our sound reactive features so we disabled them in our \"official\" firmware builds.","title":"Disabled Feature of WLED"},{"location":"WLEDSR/Installing-and-Compiling/#how-to-shoot-yourself-in-the-foot","text":"If you're keen to use a disabled WLED feature, in your personal build of SR-WLED: check if there is a -D DISABLE_... flag in your build environment (platformio.ini, or platformio_override.ini), and comment it out or remove it. check if the feature is disabled explicitly in wled00/wled.h . If a feature has been disabled explicitly in wled.h, then there is usually a good technical reason for that decision. Please don't write bug reports for feature that were disabled explicitly. If you still want that feature, you can un-disable it like this Add to your wled00/my_config.h // re-activate Alexa support. Yes I know this is not supported officially. // I don't mind if animations will sometimes \"stutter\" and lag behind the sound. #ifdef WLED_DISABLE_ALEXA #undef WLED_DISABLE_ALEXA #endif // re-activate MQTT support. Yes I know this is not supported officially. // I am ready to take good care of my hung, non-responsive device if necessary. #ifndef WLED_ENABLE_MQTT #define WLED_ENABLE_MQTT #ifdef WLED_DISABLE_MQTT #undef WLED_DISABLE_MQTT #endif #endif // re-activate IR receiver support. Yes I know this is not supported officially. // I can live with my LEDs flickering sometimes, and effects stuttering randomly. #ifdef WLED_DISABLE_INFRARED #undef WLED_DISABLE_INFRARED #endif","title":"How to Shoot Yourself in the Foot"},{"location":"WLEDSR/LED-Preferences/","text":"LED Preferences for Sound Reactive WLED The sound reactive fork of WLED supports multiple layouts of a 2D matrix led panel as well as multiple identical 2D matrix led panels. Many effects were written with a 16x16 panel in mind, so some 2D effects may not display properly on a panel/matrix of a different size. 2D Matrix 2D effects are projected on a 2 dimensional matrix. A specific led is identified by led[x,y] where led[0,0] is in the top left corner (logical layer) Setting name Value Range Description Master/Dev Width 1..x Width of the matrix Master Height 1..y Height of the matrix Master Note: width x height should match LED count! 2D Panels A matrix is made of 1 or more identical physical led panels (physical layer) Setting name Value Range Description Master/Dev Multiple panels Y/N No if only one panel, yes if more than one Dev Horizontal panels 1..x Number of panels side by side Dev Vertical panels 1..y Number of panels above each other Dev Note: Panel width = matrix width / horizontal panels and panel height = matrix height / vertical panels Note: Total panels = horizontal * vertical 2D Panel layout Specify how a led panel is wired. This is in most cases different from the logical layer (first led top left). Parameters here translate the logical layer (led[x,y]) to the physical layer (led[0] .. led[n]). Setting name Value Range Description Master/Dev First led position Top/Bottom & Left/Right Where is the first led positioned Dev (replacing flipmajor/minor) Orientation Horizontal / Vertical Are rows of leds wired horizontal or vertical Dev (replacing rowMajor) Serpentine Y/N Are rows of leds wired zig-zag or not Master Transpose Y/N Swap the axes (otherwise no swap). Don't use on non-square panels Dev Note: If multiple panels are used, they must be identical. Example: I have a 2D matrix of 6 - 8x8 panels. They are connected sequentially with a total of 24 led's wide and 16 led's high. The first led of each panel starts in the top left corner, the subsequent led is to the right of it (horizontally), and the panel is in a serpentine layout. These should be the settings for that layout:","title":"2D LED Preferences"},{"location":"WLEDSR/LED-Preferences/#led-preferences-for-sound-reactive-wled","text":"The sound reactive fork of WLED supports multiple layouts of a 2D matrix led panel as well as multiple identical 2D matrix led panels. Many effects were written with a 16x16 panel in mind, so some 2D effects may not display properly on a panel/matrix of a different size.","title":"LED Preferences for Sound Reactive WLED"},{"location":"WLEDSR/LED-Preferences/#2d-matrix","text":"2D effects are projected on a 2 dimensional matrix. A specific led is identified by led[x,y] where led[0,0] is in the top left corner (logical layer) Setting name Value Range Description Master/Dev Width 1..x Width of the matrix Master Height 1..y Height of the matrix Master Note: width x height should match LED count!","title":"2D Matrix"},{"location":"WLEDSR/LED-Preferences/#2d-panels","text":"A matrix is made of 1 or more identical physical led panels (physical layer) Setting name Value Range Description Master/Dev Multiple panels Y/N No if only one panel, yes if more than one Dev Horizontal panels 1..x Number of panels side by side Dev Vertical panels 1..y Number of panels above each other Dev Note: Panel width = matrix width / horizontal panels and panel height = matrix height / vertical panels Note: Total panels = horizontal * vertical","title":"2D Panels"},{"location":"WLEDSR/LED-Preferences/#2d-panel-layout","text":"Specify how a led panel is wired. This is in most cases different from the logical layer (first led top left). Parameters here translate the logical layer (led[x,y]) to the physical layer (led[0] .. led[n]). Setting name Value Range Description Master/Dev First led position Top/Bottom & Left/Right Where is the first led positioned Dev (replacing flipmajor/minor) Orientation Horizontal / Vertical Are rows of leds wired horizontal or vertical Dev (replacing rowMajor) Serpentine Y/N Are rows of leds wired zig-zag or not Master Transpose Y/N Swap the axes (otherwise no swap). Don't use on non-square panels Dev Note: If multiple panels are used, they must be identical.","title":"2D Panel layout"},{"location":"WLEDSR/LED-Preferences/#example","text":"I have a 2D matrix of 6 - 8x8 panels. They are connected sequentially with a total of 24 led's wide and 16 led's high. The first led of each panel starts in the top left corner, the subsequent led is to the right of it (horizontally), and the panel is in a serpentine layout. These should be the settings for that layout:","title":"Example:"},{"location":"WLEDSR/Modifying-Sound-Reactive-WLED/","text":"Changing Web UI In order to conserve space, Web UI interface are represented as a series of wled00/html_ui.h, wled00/html_settings.h and wled00/html_other.h files which contain C/C++ strings with specific parts of the Web UI. These files are automatically created from source files available in wled00/data folder. To generate files, install NodeJS 11.0+ globally . After that, recreate html_*.h files by running in the repo directory: > npm install > npm run build If you want to test changes to the UI, it is easiest to work with the local wled00/data/index.htm file. You just need to enter the IP address of a WLED 0.10.0 or newer instance into the popup. If you accidentally input an incorrect IP or want to test with a different instance, clear the local storage (in Chrome: Developer Tools -> Application -> Local Storage) If you continuously modify files in the wled00/data directory, you want to monitor these changes to make local html_*.h files being updated automatically. To do this, run this in repo directory: > npm run dev This will start monitoring wled00/data folder for changes. WARNING!!! Be careful with changing the javascript in HTML files! For example function GetV() {} must be the last javascript function in the <script> element as it will be replaced by automatically generated code to fetch relevant settings from EEPROM. See tools/cdata.js for the replacement rules which run for every *.htm file in wled00/data.","title":"Modifying Sound Reactive WLED"},{"location":"WLEDSR/Modifying-Sound-Reactive-WLED/#changing-web-ui","text":"In order to conserve space, Web UI interface are represented as a series of wled00/html_ui.h, wled00/html_settings.h and wled00/html_other.h files which contain C/C++ strings with specific parts of the Web UI. These files are automatically created from source files available in wled00/data folder. To generate files, install NodeJS 11.0+ globally . After that, recreate html_*.h files by running in the repo directory: > npm install > npm run build If you want to test changes to the UI, it is easiest to work with the local wled00/data/index.htm file. You just need to enter the IP address of a WLED 0.10.0 or newer instance into the popup. If you accidentally input an incorrect IP or want to test with a different instance, clear the local storage (in Chrome: Developer Tools -> Application -> Local Storage) If you continuously modify files in the wled00/data directory, you want to monitor these changes to make local html_*.h files being updated automatically. To do this, run this in repo directory: > npm run dev This will start monitoring wled00/data folder for changes. WARNING!!! Be careful with changing the javascript in HTML files! For example function GetV() {} must be the last javascript function in the <script> element as it will be replaced by automatically generated code to fetch relevant settings from EEPROM. See tools/cdata.js for the replacement rules which run for every *.htm file in wled00/data.","title":"Changing Web UI"},{"location":"WLEDSR/My--device--is-not-working/","text":"If you'd like some help with your device, these are the types of things we would be asking: If you require support, please engage the Discord community as linked to in the readme.md. Github issues are more for actual bugs in the firmware. When asking for support on Discord or on another forum, please provide details up front and not way down a threaded list of messages. Edit your original question if you have more information to provide. The latest version of SR WLED for the ESP32 has a sound pin configurator. Please review yours. Don't forget to check the pin on the LED settings page. Please provide a comprehensive, but clear and concise description of the symptoms and your environment. That includes things like exactly what board you're using, how many led's, are you using a level shifter Also, the exact steps you took to flash a binary and the steps you took after doing so. How about posting a crystal clear close-up photo of your wiring, or better yet, a block diagram. If something doesn't work as a result of an upgrade, did you roll back to ensure it still works? Don't just reboot the device. Actually, cycle the power (reference: IT Crowd). If you change the microphone pin/type, you need to reboot. If using an I2S microphone, you need to cycle the power on the device. You may need to re-flash/clear the device completely especially after a major update. SR WLED had to change from the default 'partition size' because we outgrew the default 1MB. As a result, you need to perform a 'Factory reset' after flashing it. Does the regular version of WLED work, while this one doesn't? We have disabled (and do not support) additional services such as IR, Alexa, Blynk, MQTT and so on. In order to enable them, you'll need to go into the code (see wled.h), enable the service and then compile/upload. The WLED SR team does not support these services. If you are referring to code, please provide a link to the version you are referring to. Is it just sound reactivity that doesn't work? Is there a specific animation? Is it an ESP32? An ESP8266? Please provide the link that you downloaded the files from. How exactly did you flash the device? See https://moonmodules.github.io/WLED-Docs/WLEDSR/Installing-and-Compiling Are you compiling from IDE? We are no longer supporting the Arduino IDE. Make sure your microphone is powered by the 3V pin and NOT Vin or 5V . . and that your LED's are NOT connected to that 3V pin either (source: experience). If you had previously used a 5V pin for your microphone, you may have blown that analog pin. Have you gone through initial settings ? Is your audio all wired up OK? See here . Which microphone/input are you using and how is it configured? Leave the MAX4466 gain untouched. It works fine out of the box. Have you tested that microphone with a basic analog sound sampling sketch ? You have an INMP441 or ICS-43434? Try the basic digital sound sampling sketch . What are the results of that sketch? Does it respond to your speech? A MAX4466 and INMP401 should average about 1875 on an ESP32, a MAX9814 about 1350 for all gain settings. Try a different pin when using that sketch if you're still not seeing good results. Have spares of everything. They're cheap and they break. (source: experience) How about power? Lots of LED's require lots of power and a common ground for everything. Does the latest release from WLED work? Are you using our most recent 'MASTER' release? Have you tried flashing our latest release ? Is your device working in AP mode? Got too much noise? Try lowering the current draw/brightness and clean up the wiring. If it's a compile error, can you provide the errors? Have you made any changes to the source? UDP Sync not working? Have you tested WLED's built-in sync? Do you need to enable multicast on your network equipment? If your bootloader is broken, the binary may not load. Try the one from wled.me first. Can you document the steps to re-create that error? Make sure your grounds are all connected together. If you're using our 'dev' branch, don't forget to make a fresh 'pull'. See my FastLED support FAQ . MAX4466/ESP32 Sampling results - Quiet room MAX4466/ESP32 Sampling results - Talking The other analog input options should provide something similar. UDP Sound Sync Issues We received a support request reporting that UDP sound synchronization will take down a Wi-Fi network. The challenge with troubleshooting WiFi is that you need to configure your packet sniffer in monitor mode, something which is very difficult to achieve with most workstations. As a result, we are unable to see a lot of Wi-Fi network traffic. One setting to change on 'WiFi Setup' is to check on \"Disable WiFi sleep\" mode. As for UDP support, this article may shed some light on the challenges: https://superuser.com/questions/1287485/udp-broadcasting-not-working-on-some-routers In the meantime, UDP Sound sync has been configured to transmit 50 packets per second.","title":"It's Not Working"},{"location":"WLEDSR/My--device--is-not-working/#udp-sound-sync-issues","text":"We received a support request reporting that UDP sound synchronization will take down a Wi-Fi network. The challenge with troubleshooting WiFi is that you need to configure your packet sniffer in monitor mode, something which is very difficult to achieve with most workstations. As a result, we are unable to see a lot of Wi-Fi network traffic. One setting to change on 'WiFi Setup' is to check on \"Disable WiFi sleep\" mode. As for UDP support, this article may shed some light on the challenges: https://superuser.com/questions/1287485/udp-broadcasting-not-working-on-some-routers In the meantime, UDP Sound sync has been configured to transmit 50 packets per second.","title":"UDP Sound Sync Issues"},{"location":"WLEDSR/News/","text":"What's possibly on the horizon (no dates given): Add 2D orientation settings, but no multi-SEGMENT 2D orientation support. Yes, we'd love dynamic controls for each animation, but we think that may interfere with future releases from Aircoookie. We are working on adding multiple panels. Automatic gain control. It's a challenge because each animation uses sound variables differently. And yes, it will be there \ud83d\udc4d in the upcoming release. Improvements to our audio processing algorithms. More awesomeness for your LEDs. More and improved sound reactive effects. May 15, 2021 We've since added several 2D routines to WLED and in the process have determined that our ESP32 binary now consumes about 98.5% of flash memory, or in oil industry terms. . . We have reached peak Flash. As a result, we're going to look carefully into ALL of the animations and see which ones consume the most flash and with the least coolness. In the meantime, we've updated SR WLED to support a very recent Master of 0.12.0, which has seen some changes/fixes since it was originally released. Special thanks to THATDONFC for keeping SR WLED in sync with Aircoookie's updates. It's not a small job. January 13, 2021 Well that was a year, only for 2021 to say 'hold my beer'. We've been working on fixing bugs, including UDP sync issues among others. Normalizing frequency and volume response for different microphones. Testing/updating various routines to work with the above changes. Modified routines to better support the 'FastLED' way of doing things, specifically for leds[i+1] = leds[i] and vice versa. Dealing with platform related noise and spikes. Had to add an exponential filter combined with the squelch control. Added a few more animations, and took out one or two. November 5, 2020 The ESP8266 branch continues to be reliable for that platform, but NOT reliable for the regular build. Would love to know why. Update: It was probably RAM usage. Have fixed issues around SEGMENTS for various sound reactive animations. Ths issue was SEGMENT specific 'persistent' variables. Use the uint16_t SEGENV.aux0 or SEGENV.aux1 variables if you need those. That was updated for both the dev and ESP8266 branches. We now have a dedicated Sound Settings page. August 22, 2020 Our dev build now has INMP441 (digital microphone) support for the ESP32. Our dev build also now has a Gain settings control for volume reactive or '*' routines. Neither update has been rolled up into our main branch. We've had a lot of issues with AP mode and ESP8266's, so Andrew created an ESP8266 branch, downloaded the latest version of WLED and added just the volume reactive functionality to that branch. We'll be removing ESP8266 support from our dev and main branches over time. That will simplify coding significantly. apleschu is still busy with his cross continental move.","title":"News"},{"location":"WLEDSR/News/#may-15-2021","text":"We've since added several 2D routines to WLED and in the process have determined that our ESP32 binary now consumes about 98.5% of flash memory, or in oil industry terms. . . We have reached peak Flash. As a result, we're going to look carefully into ALL of the animations and see which ones consume the most flash and with the least coolness. In the meantime, we've updated SR WLED to support a very recent Master of 0.12.0, which has seen some changes/fixes since it was originally released. Special thanks to THATDONFC for keeping SR WLED in sync with Aircoookie's updates. It's not a small job.","title":"May 15, 2021"},{"location":"WLEDSR/News/#january-13-2021","text":"Well that was a year, only for 2021 to say 'hold my beer'. We've been working on fixing bugs, including UDP sync issues among others. Normalizing frequency and volume response for different microphones. Testing/updating various routines to work with the above changes. Modified routines to better support the 'FastLED' way of doing things, specifically for leds[i+1] = leds[i] and vice versa. Dealing with platform related noise and spikes. Had to add an exponential filter combined with the squelch control. Added a few more animations, and took out one or two.","title":"January 13, 2021"},{"location":"WLEDSR/News/#november-5-2020","text":"The ESP8266 branch continues to be reliable for that platform, but NOT reliable for the regular build. Would love to know why. Update: It was probably RAM usage. Have fixed issues around SEGMENTS for various sound reactive animations. Ths issue was SEGMENT specific 'persistent' variables. Use the uint16_t SEGENV.aux0 or SEGENV.aux1 variables if you need those. That was updated for both the dev and ESP8266 branches. We now have a dedicated Sound Settings page.","title":"November 5, 2020"},{"location":"WLEDSR/News/#august-22-2020","text":"Our dev build now has INMP441 (digital microphone) support for the ESP32. Our dev build also now has a Gain settings control for volume reactive or '*' routines. Neither update has been rolled up into our main branch. We've had a lot of issues with AP mode and ESP8266's, so Andrew created an ESP8266 branch, downloaded the latest version of WLED and added just the volume reactive functionality to that branch. We'll be removing ESP8266 support from our dev and main branches over time. That will simplify coding significantly. apleschu is still busy with his cross continental move.","title":"August 22, 2020"},{"location":"WLEDSR/Noise-and-Spikes/","text":"During the development of our sound reactive version of WLED, we've had several challenges with WiFi along with the ADC capability of the ESP devices. ESP8266 After the code refactoring of WLED from .ino to .cpp files around April 2020, our ESP8266 code lost connection between the user interface and the ESP8266's web server. This eventually culimated in a re-write of a stripped down version of SR WLED dedicated just for the ESP8266. It included the UDP sound sync as a receiver (only), but supported none of the FFT or 2D functionality. This stripped down version seems to be stable, however that platform is now deprecated from further development. ESP32 Although the ESP32 did lose connection with the web server, it was nowhere near as bad as the ESP8266. Both platforms On both platforms, we encountered significant spikes when using the analog ADC when the WiFi is active. There are numerous articles on this issue, along with various methods to reduce the noise . We've found that an I2S microphone, such as the INMP441 or ICS-43434 will provide a better response than any of the analog microphones or input methods that we support. Here's some test results with the analog input, including strong spikes observed very frequently. Here's some references: https://www.atomic14.com/2020/09/12/esp32-audio-input.html https://www.youtube.com/watch?v=pPh3_ciEmzs https://www.youtube.com/watch?v=3g7l5bm7fZ8 https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/peripherals/adc.html https://www.esp32.com/viewtopic.php?t=9613 https://github.com/espressif/arduino-esp32/issues/92 https://randomnerdtutorials.com/esp32-adc-analog-read-arduino-ide/ Note: According to atomic14 in the above videos, the I2S microphones do not exhibit the issues found with the analog microphones.","title":"Noise and Spikes"},{"location":"WLEDSR/Noise-and-Spikes/#esp8266","text":"After the code refactoring of WLED from .ino to .cpp files around April 2020, our ESP8266 code lost connection between the user interface and the ESP8266's web server. This eventually culimated in a re-write of a stripped down version of SR WLED dedicated just for the ESP8266. It included the UDP sound sync as a receiver (only), but supported none of the FFT or 2D functionality. This stripped down version seems to be stable, however that platform is now deprecated from further development.","title":"ESP8266"},{"location":"WLEDSR/Noise-and-Spikes/#esp32","text":"Although the ESP32 did lose connection with the web server, it was nowhere near as bad as the ESP8266.","title":"ESP32"},{"location":"WLEDSR/Noise-and-Spikes/#both-platforms","text":"On both platforms, we encountered significant spikes when using the analog ADC when the WiFi is active. There are numerous articles on this issue, along with various methods to reduce the noise . We've found that an I2S microphone, such as the INMP441 or ICS-43434 will provide a better response than any of the analog microphones or input methods that we support. Here's some test results with the analog input, including strong spikes observed very frequently. Here's some references: https://www.atomic14.com/2020/09/12/esp32-audio-input.html https://www.youtube.com/watch?v=pPh3_ciEmzs https://www.youtube.com/watch?v=3g7l5bm7fZ8 https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/peripherals/adc.html https://www.esp32.com/viewtopic.php?t=9613 https://github.com/espressif/arduino-esp32/issues/92 https://randomnerdtutorials.com/esp32-adc-analog-read-arduino-ide/ Note: According to atomic14 in the above videos, the I2S microphones do not exhibit the issues found with the analog microphones.","title":"Both platforms"},{"location":"WLEDSR/Non-Reactive-Animations/","text":"Note 1: Due to its limited capability, we have disabled 2D animations on the ESP8266 platform. Note 2: The 2D routines require a minimum of 4 pixels in both directions. If you see blinking red, your 2D settings don't match the requirements. (not required in latest dev) Note 3: As we continue to develop SR WLED, some animations may appear or disappear. It's still a work very much in progress. Some may only appear in the dev branch for now. Note 6: In dev branch, sliders have been renamed from FFT Low to Custom 1, FFT High to Custom 2 and FFT Custom to Custom 3. See also Reactive animations See List of effects and palettes for AC Animations. See ScottrBaileys GIF visualizer for animations of the effects Effect Description Sliders \u2699\ufe0f Custom effect (New) Define your own effects, see here No controls (yet) Flow Stripe Strip with rotating colours. Speed: Controls a speed timer Intensity: Controls another timer Perlin Move Using Perlin Noise for movement. Speed: Speed of elements Intensity: # of pixels FFT Low: Fade rate Wavesins Beat waves and phase shifting. Looks OK in 2D'ish as well. Speed: Speed Intensity: Varying brightness FFT Low: Starting colour FFT High: Range of colours FFT Custom: More fun to adjust 2D Colored Bursts Multiple lines. Speed: Speed of lines Intensity: Number of lines 2D DNA A very cool DNA like pattern. Select a palette. Speed: Scroll speed Intensity: Blur 2D DNA Spiral Spiraling DNA pattern. Speed: Speed. Intensity: Frequency 2D Drift A rotating caleidoscope. Speed: Speed of rotation. Intensity: Blur 2D Fire2012 Mark Kriegsman's fire routine. n/a 2D Firenoise Using Perlin Noise for fire. Speed: Yscale. Intensity: Scale 2D Frizzles Moving patterns. Speed: One thing Intensity: Another thing 2D Gameoflife Scrolling game of life. Speed: Speed Intensity: Starting grid 2D Hiphotic A moving plasma. Speed: One direction Intensity: Other direction 2D Lissajous A frequency based Lissajous pattern. Speed: Frequency of cos Intensity: Frequency of sin 2D Matrix The Matrix in 2D. Speed: Affects the speed of the movement Intensity: Number of lines 2D Metaballs A cool plasma type effect. n/a 2D Plasma A plasma effect. Speed: Affects the speed of the movement FFT Low: Shifts the colours FFT High: Distance from the plasma 2D Plasma Ball A ball of plasma. Speed: Speed. Intensity: 2D Polar Lights The northern lights. Speed: Speed. Intensity: Frequency. FFT Low: Palette rotation 2D Pool Noise Looking at a pool. n/a 2D Pulser Travelling waves. Speed: Speed. Intensity: Blur 2D Sindots Moving/rotating pattern. Speed: Speed. Intensity: Length/size 2D Squared Swirl Boxes moving around. fft3: Blur amount 2D Sun radiation The sun! Doesn't support segments. Speed: Variance Intensity: Brightness 2D Twister A large twister. Speed: Speed Intensity: Phases 2D Tartan tbd 2D Julia tbd 2D Game of life tbd 2D Black hole tbd 2D Noise tbd 2D Clock Overlay To configure, go to Time & Macros setting Time setup: fill in required parameters Clock: Clock overlay; Analog Clock, check Show 5min marks, uncheck the rest 2D Animations Oh, and special thanks are in order for urish for creating wokwi, Elliot and his team for soulmatelights and Stepko and ldirko for some awesome 2D animations. With their approval, we were able to convert and publish several of their animations to use with WLED.","title":"Non-Reactive Animations"},{"location":"WLEDSR/Non-Reactive-Animations/#2d-clock-overlay","text":"To configure, go to Time & Macros setting Time setup: fill in required parameters Clock: Clock overlay; Analog Clock, check Show 5min marks, uncheck the rest","title":"2D Clock Overlay"},{"location":"WLEDSR/Non-Reactive-Animations/#2d-animations","text":"Oh, and special thanks are in order for urish for creating wokwi, Elliot and his team for soulmatelights and Stepko and ldirko for some awesome 2D animations. With their approval, we were able to convert and publish several of their animations to use with WLED.","title":"2D Animations"},{"location":"WLEDSR/On-Lossy-Colours/","text":"Issue The following code moves the pixels down the line, but as it gets to the end, the intensity decreases significantly: setPixelColor(i, getPixelColor(i-1)); Explanation getPixelColor() is lossy, whereas setPixelColor() perfectly sets the intended color. Unfortunately, the raw pixel memory buffer is also lossy, since it has to save the values scaled by master brightness. And unfortunately, if you do s = x\\*b /255 , later doing x = s\\*255/b won't yield exactly the same result (thanks integer division). To solve this problem, we would need a secondary pixel data buffer. See: https://github.com/Aircoookie/WLED/issues/820 Workarounds As a workaround, you could allocate memory for each function on the fly as a double buffer and use that, or you could hard code an array. Either way, you need to double up on the memory requirements and that is extremely limited with the ESP8266 and not recommended for that platform. Allocate memory if ( ! SEGENV . allocateData ( SEGLEN )) return mode_static (); // Allocation failed byte * myVal = SEGENV . data ; // Could also be an int or long or whatever. In this case, we are using that byte defined array for some function, but NOT to store full color values. You could then refer to myVal[0] up through myVal[SEGLEN-1] within the routine for that function. You could also define a long , then allocate the memory for it, and then store your colors in the array until you need to transfer them to the NeoPixel buffer at the end of your routine. See the transfer code below. One problem with dynamic memory allocation at the firmware level is that it can become segmented and fail. Hard-coded array First off, I would encapsulate ALL of this with #ifndef statements because you can't guarantee memory available on an ESP8266. In FX.cpp, you would define globally: #ifndef ESP8266 uint32_t ledData [ 1500 ]; // Or whatever value. #endif Similarly, you would encapsulate all functions and definitions that support that array. In the (encapsulated) animation, you would do the following: uint16_t WS2812FX::mode_myMode ( void ) { #ifndef ESP8266 uint32_t * leds = ledData ; // PERFORM ANIMATION MAGIC HERE!! for ( int i = SEGLEN ; i > 0 ; i -- ) { // You can shift LED's the FastLED way. leds [ i ] = leds [ i -1 ]; } for ( int i = 0 ; i < SEGLEN ; i ++ ) { // Now send to the NeoPixelBus array c . h = ( leds [ i ] >> 16 ) & 0xFF ; c . s = ( leds [ i ] >> 8 ) & 0xFF ; c . v = leds [ i ] & 0xFF ; color = c ; // Implicit conversion to RGB supplied by FastLED setPixelColor ( i , color . red , color . green , color . blue ); } #else // DO SOMETHING ELSE IF YOU WANT. Maybe a fade_out(32); #endif return FRAMETIME ; } // mode_myMode()","title":"On Lossy Colours"},{"location":"WLEDSR/On-Lossy-Colours/#issue","text":"The following code moves the pixels down the line, but as it gets to the end, the intensity decreases significantly: setPixelColor(i, getPixelColor(i-1));","title":"Issue"},{"location":"WLEDSR/On-Lossy-Colours/#explanation","text":"getPixelColor() is lossy, whereas setPixelColor() perfectly sets the intended color. Unfortunately, the raw pixel memory buffer is also lossy, since it has to save the values scaled by master brightness. And unfortunately, if you do s = x\\*b /255 , later doing x = s\\*255/b won't yield exactly the same result (thanks integer division). To solve this problem, we would need a secondary pixel data buffer. See: https://github.com/Aircoookie/WLED/issues/820","title":"Explanation"},{"location":"WLEDSR/On-Lossy-Colours/#workarounds","text":"As a workaround, you could allocate memory for each function on the fly as a double buffer and use that, or you could hard code an array. Either way, you need to double up on the memory requirements and that is extremely limited with the ESP8266 and not recommended for that platform.","title":"Workarounds"},{"location":"WLEDSR/On-Lossy-Colours/#allocate-memory","text":"if ( ! SEGENV . allocateData ( SEGLEN )) return mode_static (); // Allocation failed byte * myVal = SEGENV . data ; // Could also be an int or long or whatever. In this case, we are using that byte defined array for some function, but NOT to store full color values. You could then refer to myVal[0] up through myVal[SEGLEN-1] within the routine for that function. You could also define a long , then allocate the memory for it, and then store your colors in the array until you need to transfer them to the NeoPixel buffer at the end of your routine. See the transfer code below. One problem with dynamic memory allocation at the firmware level is that it can become segmented and fail.","title":"Allocate memory"},{"location":"WLEDSR/On-Lossy-Colours/#hard-coded-array","text":"First off, I would encapsulate ALL of this with #ifndef statements because you can't guarantee memory available on an ESP8266. In FX.cpp, you would define globally: #ifndef ESP8266 uint32_t ledData [ 1500 ]; // Or whatever value. #endif Similarly, you would encapsulate all functions and definitions that support that array. In the (encapsulated) animation, you would do the following: uint16_t WS2812FX::mode_myMode ( void ) { #ifndef ESP8266 uint32_t * leds = ledData ; // PERFORM ANIMATION MAGIC HERE!! for ( int i = SEGLEN ; i > 0 ; i -- ) { // You can shift LED's the FastLED way. leds [ i ] = leds [ i -1 ]; } for ( int i = 0 ; i < SEGLEN ; i ++ ) { // Now send to the NeoPixelBus array c . h = ( leds [ i ] >> 16 ) & 0xFF ; c . s = ( leds [ i ] >> 8 ) & 0xFF ; c . v = leds [ i ] & 0xFF ; color = c ; // Implicit conversion to RGB supplied by FastLED setPixelColor ( i , color . red , color . green , color . blue ); } #else // DO SOMETHING ELSE IF YOU WANT. Maybe a fade_out(32); #endif return FRAMETIME ; } // mode_myMode()","title":"Hard-coded array"},{"location":"WLEDSR/Other-Links/","text":"SR WLED interfacing https://github.com/netmindz/WLED-sync FFT related https://www.instructables.com/Faster-Than-the-Fastest-FFT-for-Arduino/ https://github.com/espressif/esp-dsp/blob/master/docs/esp-dsp-benchmarks.rst The fastest thing for Arduino seems to be an assembly version of the \"fast Hartley transform\" (FHT) by openmusiclabs: http://wiki.openmusiclabs.com/wiki/ArduinoFHT Audio processing Musical Analysis: https://github.com/creaktive/pianolizer audio drivers ES8388 Raw: https://github.com/thaaraak/ESP32-ES8388/blob/master/main/main.c Minimal library: https://github.com/perlix/es8388arduino/blob/main/example/i2sLoopback/i2sLoopback.ino AudioKit: https://github.com/pschatzmann/arduino-audio-tools/blob/main/examples/examples-stream/streams-i2s-i2s/streams-i2s-i2s.ino Espressif Audio Development Framework (ADF): https://github.com/espressif/esp-adf/","title":"Other"},{"location":"WLEDSR/Other-Links/#sr-wled-interfacing","text":"https://github.com/netmindz/WLED-sync","title":"SR WLED interfacing"},{"location":"WLEDSR/Other-Links/#fft-related","text":"https://www.instructables.com/Faster-Than-the-Fastest-FFT-for-Arduino/ https://github.com/espressif/esp-dsp/blob/master/docs/esp-dsp-benchmarks.rst The fastest thing for Arduino seems to be an assembly version of the \"fast Hartley transform\" (FHT) by openmusiclabs: http://wiki.openmusiclabs.com/wiki/ArduinoFHT","title":"FFT related"},{"location":"WLEDSR/Other-Links/#audio-processing","text":"Musical Analysis: https://github.com/creaktive/pianolizer","title":"Audio processing"},{"location":"WLEDSR/Other-Links/#audio-drivers","text":"","title":"audio drivers"},{"location":"WLEDSR/Other-Links/#es8388","text":"Raw: https://github.com/thaaraak/ESP32-ES8388/blob/master/main/main.c Minimal library: https://github.com/perlix/es8388arduino/blob/main/example/i2sLoopback/i2sLoopback.ino AudioKit: https://github.com/pschatzmann/arduino-audio-tools/blob/main/examples/examples-stream/streams-i2s-i2s/streams-i2s-i2s.ino Espressif Audio Development Framework (ADF): https://github.com/espressif/esp-adf/","title":"ES8388"},{"location":"WLEDSR/Persistent-Variables-and-WLED/","text":"Introduction Let's investigate persistent variables for the Arduino and how to use them, and then see how we can do so in WLED. Normally, for a given Arduino sketch you can define variables as follows: uint8_t var1 = 5; // A persistent global variable that is defined once. void setup() { Serial.begin(115200); } void loop() { routine1(); } void routine1() { uint8_t var2; // A non-persistent local variable. static uint8_t var3; // A persistent local variable. Serial.print(var1); Serial.print(\"\\t\"); Serial.print(var2); Serial.print(\"\\t\"); Serial.println(var3); var1 = 7; var2 = 10; var3 = 25; delay(1000); } The first time you run through the loop, we'll see the following, where only var1 has been assigned a non-zero value: 5 0 0 At the end of the first loop, all the variables were assigned values. The second time through the loop, var1 was already changed to 7 in the first loop, while var2 is non-persistent and has yet to have a value assigned in this loop. The variable var3 is a 'persistent' local variable, with a value assigned in the first pass of the loop. Output will be: 7 0 25 So, we have global and local variables, as well as persistent and non-persistent ones. Local variables require the 'static' keyword in order for them to keep their values (or be persistent) between function calls, while ALL global variables are persistent. Enter WLED . . . Although you CAN use the static keyword in a WLED animation to define a persistent variable, that variable will have the same value for ALL of the segments, and may not result in the desired properties. As a result, you may need to define a persistent variable unique to each SEGMENT. WLED has a SEGMENT runtime structure that supports persistency. The only problem is that it has a limited number of pre-defined variables for generic use by animations (in FX.cpp). The readily available variables (as defined in FX.h) are: uint16_t SEGENV.aux0; // Available for your routine. uint16_t SEGENV.aux1 // Available for your routine. byte* SEGENV.data; // Available for your routine. SEGENV.aux0 and SEGENV.aux1 are both unsigned 16 bit values, which you can use as persistent variables in your routines and will be unique for each SEGMENT. The question is, what if you need: A floating point or long variable? An array? A structure? At that point, you'll need to make use of that *byte SEGENV.data pointer and allocate memory for it and then redefine how it's used. Let's examine some methods to do so and review some of the animations in FX.cpp to do so. WLED has a method called SEGENT.allocateData() which allocates memory for your animation. Here's some examples of how to use that. Basic Memory Allocation In its simplest form, the routine mode_dynamic() just performs a basic request to allocate space for the length of a given SEGMENT with: ` if (!SEGENV.allocateData(SEGLEN)) return mode_static(); // If it fails, WLED runs mode_static(). It doesn't make use of additional variables and is probably a good idea to implement on other animations, especially in a limited environment such as the ESP01 and with a considerable number of LED's. An Array Next up is mode_multi_comet(), which reserves space for 8 uint16_t values for an array of comets. if (!SEGENV.allocateData(sizeof(uint16_t) * 8)) return mode_static(); //Allocates based on the size of 8 uint16_t variables uint16_t* comets = reinterpret_cast<uint16_t*>(SEGENV.data); // It then redefined that byte* pointer to uint16_t comets[16]. Now you can use things like: for (int i=0; i<8; i++) { comets[i] = 65535; // Or other uint16_t value. } A Structure Finally, we'll look into ripple_base(), which allocates persistent memory for a 'Ripple' structure. First off, we define the structure externally to the animation and call it 'ripple'. typedef struct Ripple { int8_t state; uint8_t color; uint16_t pos; } ripple; From within the ripple_base() routine, we determine the number of ripples we want to support for each segment. In this case, we'll say: ` uint16_t maxRipples = 1 + (SEGLEN >> 2); Next, we determine how much memory we need, where 'sizeof' returns number of bytes occupied by a variable of a given type. ` uint16_t dataSize = sizeof(ripple) * maxRipples; Next, we allocate the memory, and then re-define it as our structure: if (!SEGENV.allocateData(dataSize)) return mode_static(); Ripple* ripples = reinterpret_cast<Ripple*>(SEGENV.data); Now, we can use our structure, up to maxRipples-1: for (uint16_t i = 0; i < maxRipples; i++) { ripples[i].pos = ???; // uint16_t ripples[i].state = ???; // int8_t ripples[i].color = ???; // uint8_t } A Floating Point Variable As an exercise, let's just allocate a single floating point variable: if (!SEGENV.allocateData(sizeof(float))) return mode_static(); float* expAdj = reinterpret_cast<float*>(SEGENV.data); // We then redefine that byte* pointer to a float. We should now be able to use the persistent floating point variable 'expAdj' with our routine and it should work with ALL segments indepently of each other. expAdj = 1.2345;","title":"Persistent Variables and WLED"},{"location":"WLEDSR/Persistent-Variables-and-WLED/#introduction","text":"Let's investigate persistent variables for the Arduino and how to use them, and then see how we can do so in WLED. Normally, for a given Arduino sketch you can define variables as follows: uint8_t var1 = 5; // A persistent global variable that is defined once. void setup() { Serial.begin(115200); } void loop() { routine1(); } void routine1() { uint8_t var2; // A non-persistent local variable. static uint8_t var3; // A persistent local variable. Serial.print(var1); Serial.print(\"\\t\"); Serial.print(var2); Serial.print(\"\\t\"); Serial.println(var3); var1 = 7; var2 = 10; var3 = 25; delay(1000); } The first time you run through the loop, we'll see the following, where only var1 has been assigned a non-zero value: 5 0 0 At the end of the first loop, all the variables were assigned values. The second time through the loop, var1 was already changed to 7 in the first loop, while var2 is non-persistent and has yet to have a value assigned in this loop. The variable var3 is a 'persistent' local variable, with a value assigned in the first pass of the loop. Output will be: 7 0 25 So, we have global and local variables, as well as persistent and non-persistent ones. Local variables require the 'static' keyword in order for them to keep their values (or be persistent) between function calls, while ALL global variables are persistent.","title":"Introduction"},{"location":"WLEDSR/Persistent-Variables-and-WLED/#enter-wled","text":"Although you CAN use the static keyword in a WLED animation to define a persistent variable, that variable will have the same value for ALL of the segments, and may not result in the desired properties. As a result, you may need to define a persistent variable unique to each SEGMENT. WLED has a SEGMENT runtime structure that supports persistency. The only problem is that it has a limited number of pre-defined variables for generic use by animations (in FX.cpp). The readily available variables (as defined in FX.h) are: uint16_t SEGENV.aux0; // Available for your routine. uint16_t SEGENV.aux1 // Available for your routine. byte* SEGENV.data; // Available for your routine. SEGENV.aux0 and SEGENV.aux1 are both unsigned 16 bit values, which you can use as persistent variables in your routines and will be unique for each SEGMENT. The question is, what if you need: A floating point or long variable? An array? A structure? At that point, you'll need to make use of that *byte SEGENV.data pointer and allocate memory for it and then redefine how it's used. Let's examine some methods to do so and review some of the animations in FX.cpp to do so. WLED has a method called SEGENT.allocateData() which allocates memory for your animation. Here's some examples of how to use that.","title":"Enter WLED . . ."},{"location":"WLEDSR/Persistent-Variables-and-WLED/#basic-memory-allocation","text":"In its simplest form, the routine mode_dynamic() just performs a basic request to allocate space for the length of a given SEGMENT with: ` if (!SEGENV.allocateData(SEGLEN)) return mode_static(); // If it fails, WLED runs mode_static(). It doesn't make use of additional variables and is probably a good idea to implement on other animations, especially in a limited environment such as the ESP01 and with a considerable number of LED's.","title":"Basic Memory Allocation"},{"location":"WLEDSR/Persistent-Variables-and-WLED/#an-array","text":"Next up is mode_multi_comet(), which reserves space for 8 uint16_t values for an array of comets. if (!SEGENV.allocateData(sizeof(uint16_t) * 8)) return mode_static(); //Allocates based on the size of 8 uint16_t variables uint16_t* comets = reinterpret_cast<uint16_t*>(SEGENV.data); // It then redefined that byte* pointer to uint16_t comets[16]. Now you can use things like: for (int i=0; i<8; i++) { comets[i] = 65535; // Or other uint16_t value. }","title":"An Array"},{"location":"WLEDSR/Persistent-Variables-and-WLED/#a-structure","text":"Finally, we'll look into ripple_base(), which allocates persistent memory for a 'Ripple' structure. First off, we define the structure externally to the animation and call it 'ripple'. typedef struct Ripple { int8_t state; uint8_t color; uint16_t pos; } ripple; From within the ripple_base() routine, we determine the number of ripples we want to support for each segment. In this case, we'll say: ` uint16_t maxRipples = 1 + (SEGLEN >> 2); Next, we determine how much memory we need, where 'sizeof' returns number of bytes occupied by a variable of a given type. ` uint16_t dataSize = sizeof(ripple) * maxRipples; Next, we allocate the memory, and then re-define it as our structure: if (!SEGENV.allocateData(dataSize)) return mode_static(); Ripple* ripples = reinterpret_cast<Ripple*>(SEGENV.data); Now, we can use our structure, up to maxRipples-1: for (uint16_t i = 0; i < maxRipples; i++) { ripples[i].pos = ???; // uint16_t ripples[i].state = ???; // int8_t ripples[i].color = ???; // uint8_t }","title":"A Structure"},{"location":"WLEDSR/Persistent-Variables-and-WLED/#a-floating-point-variable","text":"As an exercise, let's just allocate a single floating point variable: if (!SEGENV.allocateData(sizeof(float))) return mode_static(); float* expAdj = reinterpret_cast<float*>(SEGENV.data); // We then redefine that byte* pointer to a float. We should now be able to use the persistent floating point variable 'expAdj' with our routine and it should work with ALL segments indepently of each other. expAdj = 1.2345;","title":"A Floating Point Variable"},{"location":"WLEDSR/Reactive-Animations/","text":"Note 1: Effects beginning with ' ' are volume only and run on both ESP32 and ESP8266 (unless they are 2D). Note 2: Effects beginning with ' ' use FFT (Fast Fourier Transforms) for frequency detection and only run on the ESP32. Note 3: We have also not added 2D animations to the ESP8266 platform. Note 4: The 2D routines require a minimum of 4 pixels in both directions. If you see blinking red, your 2D settings don't match the requirements. (not required in latest dev) Note 5: As we continue to develop SR WLED, some animations may appear or disappear. It's still a work very much in progress. Some may only appear in the dev branch for now. Note 6: * In dev branch, sliders have been renamed from FFT Low to Custom 1, FFT High to Custom 2 and FFT Custom to Custom 3. See also Non reactive animations See List of effects and palettes for AC Animations. See ScottrBaileys GIF visualizer for animations of the effects Effect Description Sliders * 2D Swirl Several blurred circles. Looks good with pink plasma palette. Supports AGC. Speed: Speed Intensity: Sensitivity FFT Low: Blur * 2D Waverly Noise waves with some sound Speed: Amplification Intensity: Sensitivity * Gravcenter Volume reactive vu-meter from center with gravity and perlin noise. Speed: Rate of fall Intensity: Sensitivity * Gravcentric Volume reactive vu-meter from center with gravity. Volume provides index to (time rotating) palette colour. Speed: Rate of fall Intensity: Sensitivity * Gravimeter Volume reactive vu-meter with gravity and perlin noise. Speed: Rate of fall Intensity: Sensitivity * Juggles Juggling balls. Speed: Yes Intensity: # of balls * Matripix Similar to Matrix. Speed: yes Intensity: Brightness * Midnoise Perlin noise emanating from center. Speed: Fade rate Intensity: Maximum length * Noisefire A perlin noise based volume reactive fire routine. n/a * Noisemeter Volume reactive vu-meter. Speed: Fade rate Intensity: Width * Pixels Random pixels. Speed: Fade rate Intensity: # of pixels * Pixelwave Pixels emanating from center. Speed: yes Intensity: Sensitivity * Plasmoid Sine wave based plasma. Intensity: # of pixels * Puddlepeak Blast coloured puddles randomly up and down the strand with the 'beat'. Speed: Adjust fade rate. Intensity: Size of puddles FFT High: 256 freq bin select on ESP32. FFT Custom: Volume comparator on ESP32 * Puddles Blast coloured puddles based on volume. Speed: Fade rate Intensity: Size of puddle * Ripple Peak Peak detection triggers ripples. Intensity: Max number of ripples. FFT High: 256 freq bin select on ESP32 FFT Custom: Volume comparator on ESP32 * Waterfall A volume AND FFT version of a Waterfall that has 'beat' support. Speed: Speed Intensity: Adjust colour ** 2D CenterBars A 16x16 spectral analysis routine emanating from the center Speed: Bar Speed Intensity: Ripple time FFT Custom1: Center horizontally FFT Custom2: Center vertically FFT Custom3: Color vertically ** 2D Funky Plank A 2D wall of reactivity running from bottom to top Speed: Scroll Speed FFT Custom1: Number of bands ** 2D GEQ A 16x16 graphic equalizer. Speed: Bar Speed Intensity: Ripple time FFT Custom1: Number of bands ** Binmap Map bins 3-255 throughout the length of the LEDs. This does not work with UDP sync. Values are not normalized. Intensity: Max volume ** Blurz Flash an fftResult bin per frame and then blur/fade. Speed: Fade Rate Intensity: Blurring ** DJLight An effect emanating from the center to the edges. Speed: Speed ** Freqmap Map the loudest frequency throughout the length of the LED's. Speed: Fade rate Intensity: Starting colour ** Freqmatrix See below See below ** Freqpixels Random pixels coloured by frequency. Speed: Fade rate Intensity: Starting colour and number of pixels ** Freqwave See below See below ** Gravfreq VU Meter from center. Log of frequency is index to center colour. Speed: Rate of fall Intensity: Sensitivity ** Noisemove Using perlin noise as movement for different frequency bins. Speed: Speed of perlin movement Intensity: Fade rate ** Rocktaves Colours the same for each note between octaves, with sine wave going back and forth. Speed: n/a Intensity: n/a ** Waterfall FFT version of a Waterfall. Speed: Speed Intensity: Adjust colour FFT High: 256 freq bin select on ESP32 FFT Custom: Volume comparator on ESP32 ** DJ Light tbd ** 2D Akemi tbd Slider Usage Please see the brief slider descripion for each effect in the rightmost column above. Speed/Intensity These typically reflect the value of their namesake. Intensity would typically be number of LED's lit, or brightness of the LED's FFT Sliders These may get renamed in the future and could be used for FFT routines OR for additional effect adjustments. Peak Detection This is NOT beat detection, but rather samples that are louder than a the current average plus a slider adjustable value. Automatic Gain Control We are just beginning to add Automatic Gain Control to the routines, starting with 2D Swirl. This setting is only available on the LED Preferences page on the ESP32. FFT Routines Additional effect notes Freqmatrix The temporal tail for this animation starts at the beginning of the Segment rather than in the center of the segment. Sliders used: Slider usage is described in the rightmost column for each effect. In general, the sliders are configured for: Speed: This determines the time delay before each pixel is moved down the line. Intensity: This determines how MUCH the sound input affects the selected effect. FFT Low: Can be an additional adjustment. Can also select low end of frequency bins if used by that effect. FFT High: Can be an additional adjustment. Can also select high end of frequency bins if used by that effect. FFT Custom: Can be an addiitional adjustment. Freqwave This effect maps the major frequencies from the incoming signal to colors in the HSV color space. From the low notes being mapped to red (0) to the high notes being mapped to blue (255) and everything in between. The band you are looking at can be restricted by the FFT Low and FFT High sliders. We are digitizing at 10240Hz, meaning the highest frequency bin that you can find is 5120Hz, which for most music is just fine. Sliders used: Speed: This determines the time delay before each pixel is moved down the line. Intensity: This determines how MUCH the sound input affects the selected effect. FFT Low: The low cut off for the FFT bins. Values range from 0-100. Good values are from 0 to 10 FFT High: High cut off for the FFT bins. Values range from 0-100. This is important because every type of music is different and what is considered a high note in one type of music is not the case in others. FFT Custom: This slider works similarly to a \"pre-amp\" for the input signal. The possible values for this slider are 1-10. A good starting point for this is around 2-3.","title":"Sound Reactive Animations"},{"location":"WLEDSR/Reactive-Animations/#slider-usage","text":"Please see the brief slider descripion for each effect in the rightmost column above.","title":"Slider Usage"},{"location":"WLEDSR/Reactive-Animations/#speedintensity","text":"These typically reflect the value of their namesake. Intensity would typically be number of LED's lit, or brightness of the LED's","title":"Speed/Intensity"},{"location":"WLEDSR/Reactive-Animations/#fft-sliders","text":"These may get renamed in the future and could be used for FFT routines OR for additional effect adjustments.","title":"FFT Sliders"},{"location":"WLEDSR/Reactive-Animations/#peak-detection","text":"This is NOT beat detection, but rather samples that are louder than a the current average plus a slider adjustable value.","title":"Peak Detection"},{"location":"WLEDSR/Reactive-Animations/#automatic-gain-control","text":"We are just beginning to add Automatic Gain Control to the routines, starting with 2D Swirl. This setting is only available on the LED Preferences page on the ESP32.","title":"Automatic Gain Control"},{"location":"WLEDSR/Reactive-Animations/#fft-routines","text":"","title":"FFT Routines"},{"location":"WLEDSR/Reactive-Animations/#additional-effect-notes","text":"","title":"Additional effect notes"},{"location":"WLEDSR/Reactive-Animations/#freqmatrix","text":"The temporal tail for this animation starts at the beginning of the Segment rather than in the center of the segment. Sliders used: Slider usage is described in the rightmost column for each effect. In general, the sliders are configured for: Speed: This determines the time delay before each pixel is moved down the line. Intensity: This determines how MUCH the sound input affects the selected effect. FFT Low: Can be an additional adjustment. Can also select low end of frequency bins if used by that effect. FFT High: Can be an additional adjustment. Can also select high end of frequency bins if used by that effect. FFT Custom: Can be an addiitional adjustment.","title":"Freqmatrix"},{"location":"WLEDSR/Reactive-Animations/#freqwave","text":"This effect maps the major frequencies from the incoming signal to colors in the HSV color space. From the low notes being mapped to red (0) to the high notes being mapped to blue (255) and everything in between. The band you are looking at can be restricted by the FFT Low and FFT High sliders. We are digitizing at 10240Hz, meaning the highest frequency bin that you can find is 5120Hz, which for most music is just fine. Sliders used: Speed: This determines the time delay before each pixel is moved down the line. Intensity: This determines how MUCH the sound input affects the selected effect. FFT Low: The low cut off for the FFT bins. Values range from 0-100. Good values are from 0 to 10 FFT High: High cut off for the FFT bins. Values range from 0-100. This is important because every type of music is different and what is considered a high note in one type of music is not the case in others. FFT Custom: This slider works similarly to a \"pre-amp\" for the input signal. The possible values for this slider are 1-10. A good starting point for this is around 2-3.","title":"Freqwave"},{"location":"WLEDSR/Running-Sound-Reactive-WLED/","text":"Captive Portal When you first connect to a WLED device in AP mode, there is some really annoying behavior on the captive portal implementation in Android. The captive portal is the limited browser you are forwarded to in order to login to a web site. What happens is that if you go into 'Effects', you can't scroll up. In order to get around that, click the three dots at the top right of the page, select 'Use Network as is', then open up Chrome and navigate to the site at 4.3.2.1. Initial Sound Reactive Settings On the \"Sound Settings\" page, configure the Squelch for a value (default is 10) to reduce your background noise for volume reactive effects. Volume reactive effects start with a single '*'. Typically, values between 4 and 20 should suffice. The higher the number, the greater the background noise is suppressed. Configure the Gain setting (default is 60) to change the \"perceived volume\" of the input signal. More info on Squelch and Gain here . Initial 2D Settings - ESP32 Only When changing any values in the LED settings page, you'll need to update the 2D settings. If not using a 2D matrix, you can set them to 1 x or vice versa. If using a 2D matrix, configure these values for width x height. A value of less than 4 in either dimension will not work with some of the 2D animations. The serpentine parameter configures whether the LED's are wired up in a continuous/serpentine layout or top to bottom and repeat. Initial UDP Sync Settings Devices can be configured as 'disabled', 'transmit' or 'receive' UDP sound . This is completely independent of the 'Sync' button, which synchronizes effects. As a result, you can run multiple types of sound reactive animations when UDP Sound Sync is enabled. This feature provides a subset of the sound and FFT data to several 'slave' devices. As a result, some FFT enabled routines will not function in this mode. You must RESET the ESP32 after you enable/disable this on the Sync settings page. Connect to WLED Open up settings on your phone or computer. Navigate to your Wi-Fi settings. Look for the WLED SSID, default is \"WLED-AP\". Enter the password, the default is \"wled1234\". Once connected, you should automatically be re-directed to your LED strip. This gets you to the limited captive portal 'browser'. If not, open up a browser and navigate to 4.3.2.1. Configure a bootup effects sequence From the main screen, click on \"TO THE CONTROLS!\" Select the \"Effects\" tab. Select an effect mode, i.e. \"Bpm\". Adjust overall brightness, speed, and intensity/fade rate. Select the \"Colors\" tab. Select one of the palettes, such as \"Beach\". Select the \"Favorites\" tab. Select the \"Saving mode\" checkbox. Save to slot \"1\". Check the \"Preset\" cycle. Select the Config cog at the top right of the application display. Select \"LED Preference\". Check \"Set current preset cycle setting as boot default\" checkbox. Click on \"Save\" at the bottom of the screen. Reset the device Log in to the device. If you cannot log in, then you need to Reflash the device, which may default to AP mode. Select the Config cog at the top right of the application display. Select \"Security and Updates\". Check \"Factory reset\". Click on \"Save & reboot\". Reverts to the initial AP Mode and all other settings are gone.","title":"Running Sound Reactive WLED"},{"location":"WLEDSR/Running-Sound-Reactive-WLED/#captive-portal","text":"When you first connect to a WLED device in AP mode, there is some really annoying behavior on the captive portal implementation in Android. The captive portal is the limited browser you are forwarded to in order to login to a web site. What happens is that if you go into 'Effects', you can't scroll up. In order to get around that, click the three dots at the top right of the page, select 'Use Network as is', then open up Chrome and navigate to the site at 4.3.2.1.","title":"Captive Portal"},{"location":"WLEDSR/Running-Sound-Reactive-WLED/#initial-sound-reactive-settings","text":"On the \"Sound Settings\" page, configure the Squelch for a value (default is 10) to reduce your background noise for volume reactive effects. Volume reactive effects start with a single '*'. Typically, values between 4 and 20 should suffice. The higher the number, the greater the background noise is suppressed. Configure the Gain setting (default is 60) to change the \"perceived volume\" of the input signal. More info on Squelch and Gain here .","title":"Initial Sound Reactive Settings"},{"location":"WLEDSR/Running-Sound-Reactive-WLED/#initial-2d-settings-esp32-only","text":"When changing any values in the LED settings page, you'll need to update the 2D settings. If not using a 2D matrix, you can set them to 1 x or vice versa. If using a 2D matrix, configure these values for width x height. A value of less than 4 in either dimension will not work with some of the 2D animations. The serpentine parameter configures whether the LED's are wired up in a continuous/serpentine layout or top to bottom and repeat.","title":"Initial 2D Settings - ESP32 Only"},{"location":"WLEDSR/Running-Sound-Reactive-WLED/#initial-udp-sync-settings","text":"Devices can be configured as 'disabled', 'transmit' or 'receive' UDP sound . This is completely independent of the 'Sync' button, which synchronizes effects. As a result, you can run multiple types of sound reactive animations when UDP Sound Sync is enabled. This feature provides a subset of the sound and FFT data to several 'slave' devices. As a result, some FFT enabled routines will not function in this mode. You must RESET the ESP32 after you enable/disable this on the Sync settings page.","title":"Initial UDP Sync Settings"},{"location":"WLEDSR/Running-Sound-Reactive-WLED/#connect-to-wled","text":"Open up settings on your phone or computer. Navigate to your Wi-Fi settings. Look for the WLED SSID, default is \"WLED-AP\". Enter the password, the default is \"wled1234\". Once connected, you should automatically be re-directed to your LED strip. This gets you to the limited captive portal 'browser'. If not, open up a browser and navigate to 4.3.2.1.","title":"Connect to WLED"},{"location":"WLEDSR/Running-Sound-Reactive-WLED/#configure-a-bootup-effects-sequence","text":"From the main screen, click on \"TO THE CONTROLS!\" Select the \"Effects\" tab. Select an effect mode, i.e. \"Bpm\". Adjust overall brightness, speed, and intensity/fade rate. Select the \"Colors\" tab. Select one of the palettes, such as \"Beach\". Select the \"Favorites\" tab. Select the \"Saving mode\" checkbox. Save to slot \"1\". Check the \"Preset\" cycle. Select the Config cog at the top right of the application display. Select \"LED Preference\". Check \"Set current preset cycle setting as boot default\" checkbox. Click on \"Save\" at the bottom of the screen.","title":"Configure a bootup effects sequence"},{"location":"WLEDSR/Running-Sound-Reactive-WLED/#reset-the-device","text":"Log in to the device. If you cannot log in, then you need to Reflash the device, which may default to AP mode. Select the Config cog at the top right of the application display. Select \"Security and Updates\". Check \"Factory reset\". Click on \"Save & reboot\". Reverts to the initial AP Mode and all other settings are gone.","title":"Reset the device"},{"location":"WLEDSR/Settings/","text":"AirCoookie's LED settings See WLED General Led Settings LED Settings for Sound Reactive Additions See LED Preferences Sound Reactive Settings See Sound Settings","title":"Settings"},{"location":"WLEDSR/Settings/#aircoookies-led-settings","text":"See WLED General Led Settings","title":"AirCoookie's LED settings"},{"location":"WLEDSR/Settings/#led-settings-for-sound-reactive-additions","text":"See LED Preferences","title":"LED Settings for Sound Reactive Additions"},{"location":"WLEDSR/Settings/#sound-reactive-settings","text":"See Sound Settings","title":"Sound Reactive Settings"},{"location":"WLEDSR/Sound-Settings/","text":"Introduction Disclaimer: The information below is for the latest release version of SR WLED . If you use an older release, you will not have all options. In order to accommodate a wide range of audio inputs, ambient environments and string lengths, we have added user configurable squelch (noise reduction/suppression) and gain controls on the sound settings page that apply to all sound reactive animations. Press reset key after changing sound source After changing the sound source (either GPIO pins or Microphone type), it is important to press the \"reset\" (RST) button on your ESP32 - don't forget to \"save\" first. WLED cannot change the sound input configuration \"on the fly\", due to a known hardware problem of ESP32. See https://github.com/espressif/esp-idf/issues/7442 \"only a hard CPU reset can disconnect the I2S signal from built-in ADC\". Analog Input Pins We typically recommend using GPIO 36, aka VP or ADC1_CH0 for analog input, however the following pins should also work: GPIO 32 => ADC1_CH4 GPIO 33 => ADC1_CH5 GPI 34 => ADC1_CH6 GPI 35 => ADC1_CH7 GPI 36 => ADC1_CH0, VP GPI 37 => ADC1_CH1 GPI 38 => ADC1_CH2 GPI 39 => ADC1_CH3, VN Do NOT use any of the pins from ADC2, as they will conflict with the WiFi and with I2S sampling. Remember to press Reset after saving your new analog input configuration. We have observed problems when using \"analog buttons\" (potentiometer) together with ADC analog sound input. It seems that different drivers (I2S-ADC for sound, analogRead() for potentiometer) are getting into conflict - more details in the related bug report for espressif software . If you plan to attach a potentiometer to your WLED device, we recommend to use an I2S digital microphone to avoid these problems. More information about analog inputs on our analog microphones page. Squelch Adjust this value on the Sound Settings page so that the leds are only activated above a certain 'background noise' level. In order to accommodate a wide range of audio inputs, ambient environments and string lengths, we have added user configurable squelch (noise reduction/suppression) and gain controls on the LED settings page for the volume reactive animations. See also \u21d2 Squelch and Gain \u21d2 Sound setting examples for common microphones Gain Line-in signals are typically much lower than that of some of the microphones. Rather than use an auto gain function, you can manually adjust the gain from 1 to 255, which translates to 0.1 up to almost 6.5 gain. That's equivalent to a range of -20dB up to +16dB . In addition, the 'Intensity' and \"input level\" sliders can sometimes adjust an animation to simulate increased gain. How To Here's a method to setup squelch and gain for your SR WLED Device. Start out with the routine '*Gravimeter' with default sliders in the middle. Go to the sound settings configuration page. Increase gain to a high value, let's say 234 (or higher) and set the squelch to '1', AGC off, then save. Depending on your input, you should now see the led's flashing, even when the wind blows. In a quiet environment, increase and occasionally save the \"squelch\" incrementally until the led's are no longer flashing. Once that's done, set \"gain\" to 40. Make noise appropriate to your 'noisy' environment and number of led's. Then adjust/save the gain so that the led's are responding appropriately. Note that some of the animations allow further sensitivity adjustment with the 'Intensity' setting. Check out the ' Sound Reactive Animations ' page to see what controls are available for each animation. Voltage Fluctuation From faulty microphones to flaky wiring, to WiFi related issues, particularly in AP mode, getting reliable and spike free sound sampling with WLED and in particular analog sampling has been a challenge. Digital microphones such as the INMP441, the ICS-43434 provide the best results. I2S Digital Input Currently the following I2S options are available: Some more information can be found on our I2S digital microphones page. to be extended soon I2S Line-in There are solutions available for line-in via I2S. For example, boards/shields with \"es7243\" chip should work already (we have a special driver for these), and we're investigating \"es8388\". Please check our I2S digital microphone hookup - I2S audio boards/modules page for more information. AGC - improved Autonomous Gain Control We have recently improved the AGC (automatic gain control) algorithm in WLED-SR. It's not enabled by default, however we encourage you to give it a try - all sound reactive effects now support AGC, including 2D and frequency-reactive effects. The only prerequisite for using AGC is that you first adjust \"Squelch\" to define 'silence' (ambient noise level) in your environment - see previous section . AGC will automatically perform sound input amplification, based on current sound loudness. For example, if you play music and then increase the speaker volume, WLED-SR will adjust internal gain factors to follow your music. Forget about manually changing \"gain\" settings. Just relax and let WLED-SR do it autonomously. Currently WLED-SR offers four different AGC presets that can be selected in sound settings: * Off - AGC off. WLED will strictly use the Gain value from sound input settings, without any adjustments. * Normal - AGC tries to smoothly follow changes in sound input volume. Recommended as a balanced option for general use. * Vivid - AGC will quickly adjust to changes in sound input volume. Recommended in case you want \"more blinken from your LEDs\". * Lazy - AGC will take some more time before internal gain is adjusted. Recommended for GEQ effects, or when listening to music that features strong \"dynamics\". to be extended soon","title":"Sound Settings"},{"location":"WLEDSR/Sound-Settings/#introduction","text":"Disclaimer: The information below is for the latest release version of SR WLED . If you use an older release, you will not have all options. In order to accommodate a wide range of audio inputs, ambient environments and string lengths, we have added user configurable squelch (noise reduction/suppression) and gain controls on the sound settings page that apply to all sound reactive animations.","title":"Introduction"},{"location":"WLEDSR/Sound-Settings/#press-reset-key-after-changing-sound-source","text":"After changing the sound source (either GPIO pins or Microphone type), it is important to press the \"reset\" (RST) button on your ESP32 - don't forget to \"save\" first. WLED cannot change the sound input configuration \"on the fly\", due to a known hardware problem of ESP32. See https://github.com/espressif/esp-idf/issues/7442 \"only a hard CPU reset can disconnect the I2S signal from built-in ADC\".","title":"Press reset key after changing sound source"},{"location":"WLEDSR/Sound-Settings/#analog-input-pins","text":"We typically recommend using GPIO 36, aka VP or ADC1_CH0 for analog input, however the following pins should also work: GPIO 32 => ADC1_CH4 GPIO 33 => ADC1_CH5 GPI 34 => ADC1_CH6 GPI 35 => ADC1_CH7 GPI 36 => ADC1_CH0, VP GPI 37 => ADC1_CH1 GPI 38 => ADC1_CH2 GPI 39 => ADC1_CH3, VN Do NOT use any of the pins from ADC2, as they will conflict with the WiFi and with I2S sampling. Remember to press Reset after saving your new analog input configuration. We have observed problems when using \"analog buttons\" (potentiometer) together with ADC analog sound input. It seems that different drivers (I2S-ADC for sound, analogRead() for potentiometer) are getting into conflict - more details in the related bug report for espressif software . If you plan to attach a potentiometer to your WLED device, we recommend to use an I2S digital microphone to avoid these problems. More information about analog inputs on our analog microphones page.","title":"Analog Input Pins"},{"location":"WLEDSR/Sound-Settings/#squelch","text":"Adjust this value on the Sound Settings page so that the leds are only activated above a certain 'background noise' level. In order to accommodate a wide range of audio inputs, ambient environments and string lengths, we have added user configurable squelch (noise reduction/suppression) and gain controls on the LED settings page for the volume reactive animations. See also \u21d2 Squelch and Gain \u21d2 Sound setting examples for common microphones","title":"Squelch"},{"location":"WLEDSR/Sound-Settings/#gain","text":"Line-in signals are typically much lower than that of some of the microphones. Rather than use an auto gain function, you can manually adjust the gain from 1 to 255, which translates to 0.1 up to almost 6.5 gain. That's equivalent to a range of -20dB up to +16dB . In addition, the 'Intensity' and \"input level\" sliders can sometimes adjust an animation to simulate increased gain.","title":"Gain"},{"location":"WLEDSR/Sound-Settings/#how-to","text":"Here's a method to setup squelch and gain for your SR WLED Device. Start out with the routine '*Gravimeter' with default sliders in the middle. Go to the sound settings configuration page. Increase gain to a high value, let's say 234 (or higher) and set the squelch to '1', AGC off, then save. Depending on your input, you should now see the led's flashing, even when the wind blows. In a quiet environment, increase and occasionally save the \"squelch\" incrementally until the led's are no longer flashing. Once that's done, set \"gain\" to 40. Make noise appropriate to your 'noisy' environment and number of led's. Then adjust/save the gain so that the led's are responding appropriately. Note that some of the animations allow further sensitivity adjustment with the 'Intensity' setting. Check out the ' Sound Reactive Animations ' page to see what controls are available for each animation.","title":"How To"},{"location":"WLEDSR/Sound-Settings/#voltage-fluctuation","text":"From faulty microphones to flaky wiring, to WiFi related issues, particularly in AP mode, getting reliable and spike free sound sampling with WLED and in particular analog sampling has been a challenge. Digital microphones such as the INMP441, the ICS-43434 provide the best results.","title":"Voltage Fluctuation"},{"location":"WLEDSR/Sound-Settings/#i2s-digital-input","text":"Currently the following I2S options are available: Some more information can be found on our I2S digital microphones page. to be extended soon","title":"I2S Digital Input"},{"location":"WLEDSR/Sound-Settings/#i2s-line-in","text":"There are solutions available for line-in via I2S. For example, boards/shields with \"es7243\" chip should work already (we have a special driver for these), and we're investigating \"es8388\". Please check our I2S digital microphone hookup - I2S audio boards/modules page for more information.","title":"I2S Line-in"},{"location":"WLEDSR/Sound-Settings/#agc-improved-autonomous-gain-control","text":"We have recently improved the AGC (automatic gain control) algorithm in WLED-SR. It's not enabled by default, however we encourage you to give it a try - all sound reactive effects now support AGC, including 2D and frequency-reactive effects. The only prerequisite for using AGC is that you first adjust \"Squelch\" to define 'silence' (ambient noise level) in your environment - see previous section . AGC will automatically perform sound input amplification, based on current sound loudness. For example, if you play music and then increase the speaker volume, WLED-SR will adjust internal gain factors to follow your music. Forget about manually changing \"gain\" settings. Just relax and let WLED-SR do it autonomously. Currently WLED-SR offers four different AGC presets that can be selected in sound settings: * Off - AGC off. WLED will strictly use the Gain value from sound input settings, without any adjustments. * Normal - AGC tries to smoothly follow changes in sound input volume. Recommended as a balanced option for general use. * Vivid - AGC will quickly adjust to changes in sound input volume. Recommended in case you want \"more blinken from your LEDs\". * Lazy - AGC will take some more time before internal gain is adjusted. Recommended for GEQ effects, or when listening to music that features strong \"dynamics\". to be extended soon","title":"AGC - improved Autonomous Gain Control"},{"location":"WLEDSR/Squelch-and-Gain/","text":"Introduction In order to accommodate a wide range of audio inputs, ambient environments and string lengths, we have added user configurable squelch (noise reduction/suppression) and gain controls on the LED settings page for the volume reactive animations. Squelch Adjust this value on the LED Settings page so that the leds are only activated above a certain 'background noise' level. Gain Line-in signals are typically much lower than that of some of the microphones. Rather than use an auto gain function, you can manually adjust the gain from 1 to 255, which translate up to almost 6.0 gain. In addition, the 'Intensity' slider can sometimes adjust an animation to simulate increased gain. How To Here's a method to setup squelch and gain for your SR WLED Device. Start out with the routine '*Gravcenter' with default sliders in the middle. Go to the sound settings configuration page. Increase gain to a high value, let's say 234 (or higher) and set the squelch to '1' , AGC off, and save. Depending on your input, you should now see the led's flashing. In a quiet environment, increase and occasionally save the squelch incrementally until the led's are no longer flashing. Once that's done, make noise appropriate to your 'noisy' environment and number of led's. Then adjust/save the gain so that the led's are responding appropriately. Note that some of the animations allow further sensitivity adjustment with the 'Intensity' setting. Check out the ' Sound Reactive Animations ' page to see what controls are available for each animation. Voltage Fluctuation From faulty microphones to flaky wiring, to WiFi related issues, particularly in AP mode, getting reliable and spike free sound sampling with WLED and in particular analog sampling has been a challenge. Digital microphones such as the INMP441, the ICS-43434 provide the best results.","title":"Squelch and Gain"},{"location":"WLEDSR/Squelch-and-Gain/#introduction","text":"In order to accommodate a wide range of audio inputs, ambient environments and string lengths, we have added user configurable squelch (noise reduction/suppression) and gain controls on the LED settings page for the volume reactive animations.","title":"Introduction"},{"location":"WLEDSR/Squelch-and-Gain/#squelch","text":"Adjust this value on the LED Settings page so that the leds are only activated above a certain 'background noise' level.","title":"Squelch"},{"location":"WLEDSR/Squelch-and-Gain/#gain","text":"Line-in signals are typically much lower than that of some of the microphones. Rather than use an auto gain function, you can manually adjust the gain from 1 to 255, which translate up to almost 6.0 gain. In addition, the 'Intensity' slider can sometimes adjust an animation to simulate increased gain.","title":"Gain"},{"location":"WLEDSR/Squelch-and-Gain/#how-to","text":"Here's a method to setup squelch and gain for your SR WLED Device. Start out with the routine '*Gravcenter' with default sliders in the middle. Go to the sound settings configuration page. Increase gain to a high value, let's say 234 (or higher) and set the squelch to '1' , AGC off, and save. Depending on your input, you should now see the led's flashing. In a quiet environment, increase and occasionally save the squelch incrementally until the led's are no longer flashing. Once that's done, make noise appropriate to your 'noisy' environment and number of led's. Then adjust/save the gain so that the led's are responding appropriately. Note that some of the animations allow further sensitivity adjustment with the 'Intensity' setting. Check out the ' Sound Reactive Animations ' page to see what controls are available for each animation.","title":"How To"},{"location":"WLEDSR/Squelch-and-Gain/#voltage-fluctuation","text":"From faulty microphones to flaky wiring, to WiFi related issues, particularly in AP mode, getting reliable and spike free sound sampling with WLED and in particular analog sampling has been a challenge. Digital microphones such as the INMP441, the ICS-43434 provide the best results.","title":"Voltage Fluctuation"},{"location":"WLEDSR/Testing/","text":"IMPORTANT NOTE: When testing the UI, make sure to refresh your web browser . It may have cached incorrect information. Compile Compile/run on ESP32. Compile/run on ESP8266. Network Configure/test for AP mode. Configure/test for STA mode. Colors Test Default palette as well as defined palettes. Test RGBW. Test with various effects. Effects Test each effect with/without palette. Ensure they are all present and line-up. Segments Configure multiple segments. Configure multiple groups. Segment options. Sound Configure squelch setting. Reboot. Microphone input sensitivity. 2D Test different sizes, i.e. 1x32, 16x16, etc. Serpentine/linear. Single/multi-panels. Layouts UDP Sound Sync Test ESP32 to ESP8266 sync. Test ESP32 to ESP32 sync. Test all modes. EEPROM Ensure EEPROM changes survive reboot. Test with ESP32. Test with ESP8266. (Ensure EEPROM default is not 255 or 65535 - Not done yet). OTA updates.","title":"Testing"},{"location":"WLEDSR/Testing/#compile","text":"Compile/run on ESP32. Compile/run on ESP8266.","title":"Compile"},{"location":"WLEDSR/Testing/#network","text":"Configure/test for AP mode. Configure/test for STA mode.","title":"Network"},{"location":"WLEDSR/Testing/#colors","text":"Test Default palette as well as defined palettes. Test RGBW. Test with various effects.","title":"Colors"},{"location":"WLEDSR/Testing/#effects","text":"Test each effect with/without palette. Ensure they are all present and line-up.","title":"Effects"},{"location":"WLEDSR/Testing/#segments","text":"Configure multiple segments. Configure multiple groups. Segment options.","title":"Segments"},{"location":"WLEDSR/Testing/#sound","text":"Configure squelch setting. Reboot. Microphone input sensitivity.","title":"Sound"},{"location":"WLEDSR/Testing/#2d","text":"Test different sizes, i.e. 1x32, 16x16, etc. Serpentine/linear. Single/multi-panels. Layouts","title":"2D"},{"location":"WLEDSR/Testing/#udp-sound-sync","text":"Test ESP32 to ESP8266 sync. Test ESP32 to ESP32 sync. Test all modes.","title":"UDP Sound Sync"},{"location":"WLEDSR/Testing/#eeprom","text":"Ensure EEPROM changes survive reboot. Test with ESP32. Test with ESP8266. (Ensure EEPROM default is not 255 or 65535 - Not done yet). OTA updates.","title":"EEPROM"},{"location":"WLEDSR/UDP-Sound-Sync/","text":"UDP Sound Sync is a feature to synchronize (share) the sound input of a 'master' device with one or more 'slave' devices. All devices must be running the same release of SR WLED, and they must be in the same local network. Sound Sync is not availeable in \"upstream\" WLED by Aircookie. Sound Sync is also different from direct LEDs control using protocols like E1.31, DMX, DDP or AdaLight. UDP Sound Sync does not sync the actual animations, but rather transmits summary audio sampling information to several devices that still run their own animations locally. In a nutshell, it means that several devices can share a single microphone. Setup Before configuring UDP Sound Sync, make sure you have gone into the WiFi Preferences and clicked on 'Disable WiFi sleep' at the bottom of the page. It has caused us innumerable problems in the past. In order to configure UDP sound sync, the \u2018master\u2019 needs to be an ESP32 along with an audio input . You would then to go the \u2018Sync Interfaces\u2019 page and configure the 'Audio Sync' at the bottom of the page. Transmit for the ESP32 and Receive for devices without an audio input (either ESP32's or ESP8266's). Make sure the UDP port is the same on all devices. This does not sync the actual animations, but rather just the transmission of summary audio sampling information (as best we can). In order to change the UDP Sync Mode (Disabled/Transmit/Receive), you need to power-cycle the ESP32/ESP8266. Technical When an ESP32 is configured for audio transmission, it will connect to a UDP Multicast address, and begin sending a single UDP Multicast packet containing the data used to generate sound-reactive animations out to any other devices that are configured to receive on the same network. The following information is transmitted: V1 format, used in SR WLED up to 0.13.x #define UDP_SYNC_HEADER \"00001\" struct audioSyncPacket { char header [ 6 ] = UDP_SYNC_HEADER ; uint8_t myVals [ 32 ]; // 32 Bytes int sampleAgc ; // 04 Bytes int sampleRaw ; // 04 Bytes float sampleAvg ; // 04 Bytes bool samplePeak ; // 01 Bytes uint8_t fftResult [ 16 ]; // 16 Bytes - FFT results, one byte per GEQ channel double FFT_Magnitude ; // 08 Bytes double FFT_MajorPeak ; // 08 Bytes }; UDP_SYNC_HEADER is a versioning number that's defined in audio_reactive.h V2 Format - WLED version >= 0.14.0 (including MoonModules fork) #define UDP_SYNC_HEADER_V2 \"00002\" // new \"V2\" AC 0.14.0 audiosync struct - 40 Bytes struct audioSyncPacket_v2 { char header [ 6 ] = UDP_SYNC_HEADER_V2 ; // 06 bytes, last byte is '\\0' as string terminator. float sampleRaw ; // 04 Bytes - either \"sampleRaw\" or \"rawSampleAgc\" depending on soundAgc setting float sampleSmth ; // 04 Bytes - either \"sampleAvg\" or \"sampleAgc\" depending on soundAgc setting uint8_t samplePeak ; // 01 Bytes - 0 no peak; >=1 peak detected. In future, this will also provide peak Magnitude uint8_t reserved1 ; // 01 Bytes - reserved for future extensions like loudness uint8_t fftResult [ 16 ]; // 16 Bytes - FFT results, one byte per GEQ channel float FFT_Magnitude ; // 04 Bytes - magnitude of strongest peak in FFT float FFT_MajorPeak ; // 04 Bytes - frequency of strongest peak in FFT }; The V2 format expects that AGC is performed by the sender, so there is no need to transmit \"AGC\" and \"non-AGC\" samples separately. To save bandwidth, the myvals[] array was removed, and all numbers are either float or uint8_t . SR-WLED 0.13.3 still sends out V1 format, however it is able to receive and decode V2 format, too. What else ? You might want to take a look at this library, which allows to send and receive WLED Audio Sync data independent from WLED. When an ESP32 or ESP8266 is configured to receive audio data from another device, the receiver will disable any onboard microphone sampling and FFT processing, in favor of audio data received from the network. Any time a UDP Multicast packet is received from a transmitter, it will be treated as a discrete microphone sample and stored in memory the same way it would be if it were a local microphone. An ESP8266 will not be able to use any FFT data transmitted from an ESP32, as a result of the differences in hardware and software. The UDP Multicast IP is 239.0.0.1 , and the default UDP port is 11988 . UDP port can be changed in WLED config pages, for example to have several groups of devices by assigning different UDP ports to each group. UDP multicast is generally not very reliable with typical \"consumer grade hardware\". Some users found that creating a \"port forwarding rule\" on their local Wifi router helps. For example, you could create a \"dynamic port forwarding rule\" for UDP port 11988. UDP Sound sync brought to you by @spedione on Discord. Reference: https://github.com/Aircoookie/WLED/wiki/UDP-Realtime-Control","title":"UDP Sound Sync"},{"location":"WLEDSR/UDP-Sound-Sync/#setup","text":"Before configuring UDP Sound Sync, make sure you have gone into the WiFi Preferences and clicked on 'Disable WiFi sleep' at the bottom of the page. It has caused us innumerable problems in the past. In order to configure UDP sound sync, the \u2018master\u2019 needs to be an ESP32 along with an audio input . You would then to go the \u2018Sync Interfaces\u2019 page and configure the 'Audio Sync' at the bottom of the page. Transmit for the ESP32 and Receive for devices without an audio input (either ESP32's or ESP8266's). Make sure the UDP port is the same on all devices. This does not sync the actual animations, but rather just the transmission of summary audio sampling information (as best we can). In order to change the UDP Sync Mode (Disabled/Transmit/Receive), you need to power-cycle the ESP32/ESP8266.","title":"Setup"},{"location":"WLEDSR/UDP-Sound-Sync/#technical","text":"When an ESP32 is configured for audio transmission, it will connect to a UDP Multicast address, and begin sending a single UDP Multicast packet containing the data used to generate sound-reactive animations out to any other devices that are configured to receive on the same network. The following information is transmitted:","title":"Technical"},{"location":"WLEDSR/UDP-Sound-Sync/#v1-format-used-in-sr-wled-up-to-013x","text":"#define UDP_SYNC_HEADER \"00001\" struct audioSyncPacket { char header [ 6 ] = UDP_SYNC_HEADER ; uint8_t myVals [ 32 ]; // 32 Bytes int sampleAgc ; // 04 Bytes int sampleRaw ; // 04 Bytes float sampleAvg ; // 04 Bytes bool samplePeak ; // 01 Bytes uint8_t fftResult [ 16 ]; // 16 Bytes - FFT results, one byte per GEQ channel double FFT_Magnitude ; // 08 Bytes double FFT_MajorPeak ; // 08 Bytes }; UDP_SYNC_HEADER is a versioning number that's defined in audio_reactive.h","title":"V1 format, used in SR WLED up to 0.13.x"},{"location":"WLEDSR/UDP-Sound-Sync/#v2-format-wled-version-0140-including-moonmodules-fork","text":"#define UDP_SYNC_HEADER_V2 \"00002\" // new \"V2\" AC 0.14.0 audiosync struct - 40 Bytes struct audioSyncPacket_v2 { char header [ 6 ] = UDP_SYNC_HEADER_V2 ; // 06 bytes, last byte is '\\0' as string terminator. float sampleRaw ; // 04 Bytes - either \"sampleRaw\" or \"rawSampleAgc\" depending on soundAgc setting float sampleSmth ; // 04 Bytes - either \"sampleAvg\" or \"sampleAgc\" depending on soundAgc setting uint8_t samplePeak ; // 01 Bytes - 0 no peak; >=1 peak detected. In future, this will also provide peak Magnitude uint8_t reserved1 ; // 01 Bytes - reserved for future extensions like loudness uint8_t fftResult [ 16 ]; // 16 Bytes - FFT results, one byte per GEQ channel float FFT_Magnitude ; // 04 Bytes - magnitude of strongest peak in FFT float FFT_MajorPeak ; // 04 Bytes - frequency of strongest peak in FFT }; The V2 format expects that AGC is performed by the sender, so there is no need to transmit \"AGC\" and \"non-AGC\" samples separately. To save bandwidth, the myvals[] array was removed, and all numbers are either float or uint8_t . SR-WLED 0.13.3 still sends out V1 format, however it is able to receive and decode V2 format, too.","title":"V2 Format - WLED version &gt;= 0.14.0 (including MoonModules fork)"},{"location":"WLEDSR/UDP-Sound-Sync/#what-else","text":"You might want to take a look at this library, which allows to send and receive WLED Audio Sync data independent from WLED. When an ESP32 or ESP8266 is configured to receive audio data from another device, the receiver will disable any onboard microphone sampling and FFT processing, in favor of audio data received from the network. Any time a UDP Multicast packet is received from a transmitter, it will be treated as a discrete microphone sample and stored in memory the same way it would be if it were a local microphone. An ESP8266 will not be able to use any FFT data transmitted from an ESP32, as a result of the differences in hardware and software. The UDP Multicast IP is 239.0.0.1 , and the default UDP port is 11988 . UDP port can be changed in WLED config pages, for example to have several groups of devices by assigning different UDP ports to each group. UDP multicast is generally not very reliable with typical \"consumer grade hardware\". Some users found that creating a \"port forwarding rule\" on their local Wifi router helps. For example, you could create a \"dynamic port forwarding rule\" for UDP port 11988. UDP Sound sync brought to you by @spedione on Discord. Reference: https://github.com/Aircoookie/WLED/wiki/UDP-Realtime-Control","title":"What else ?"},{"location":"WLEDSR/Using-my-PC-for-the-Sound/","text":"Q. Is it possible to use my PC for the sound and without using the microphone, or any ADC pins on the board. The sound reactive fork of WLED was designed as an all-in-one unit that doesn't require the intervention of a PC. You can setup a display and have it run completely independently. It supports your PC's analog line-out signal, several analog microphones, an INMP441 digital microphone, as well as UDP sound sync: https://moonmodules.github.io/WLED-Docs/WLEDSR/UDP-Sound-Sync To answer this question, not directly, except for the line-out signal. Although we support UDP sound sync, someone would have to write a program for their OS of choice to capture the sound from the PC, perform FFT calculations, and UDP transmit the sampled data (the packet matching our sound reactive WLED data structure). That's a non-trivial course of action. All that being said, LedFx (as found at https://github.com/LedFx/LedFx ) may be just the solution for this use case. Since WLED supports UDP, DDP, and E1.31 DMX protocols, you can use the sound reactive LedFx running on your PC to control a WLED device. There's an excellent video on setting this environment up at https://www.youtube.com/watch?v=ipSfQdfX4fE LedFx will then directly control the LED's on your WLED device, although you can still revert to native WLED animations.","title":"Using my PC for the Sound"},{"location":"WLEDSR/WLED-Custom-effects/","text":"Custom effects Custom effects are effects which are not compiled in the WLED repository but specified by a file (program file) which is interpreted in real time. The big advantage of this is that effects are not limited by what is made by WLED programmers but anybody can create effects without releasing a new version of WLED. Furthermore any change in the effect code is instantly shown on leds allowing fast developing of effects. A disadvantage is that the file needs to be loaded, examined and then run in real-time which is 'per definition' slower then pre-compiled code, although performance is promising already and will get better over time. Quick start To get your first Custom Effect running, perform the following steps In tab effects, select '\u2699\ufe0f Custom Effect' In tab Segments, give the segment a name, this will be the name of the Custom Effect Click on Custom Effect Editor Click on Download wled.json to enable Custom Effects for WLED (needed each time a new version of CE is published) Click on Load template to get a 'hello world' example Press save and the template will be executed Running examples Custom Effects examples are stored in Github repository If you develop effects which you want to share, ask for access on Github. These effects can be loaded easily within WLED: Give a Custom Effects segment name the same name as an effect in this repository (case sensitive, without .wled), click on Custom Effect Editor and click Download 'effect'.wled and press Save. Alternatively, if you want all the effects in this folder at once, go to the Custom Effect Editor and click Download presets.json (Segment stop is set to 50! This will overwrite any existing presets you have). Refresh the WLED page or reboot to see the new presets. Create your own Custom Effects A Custom Effects program typically looks like this: A program contains structures like if statements, for loops, assignments, calls (e.g. renderFrame) etc., commands like setPixelcolor and variables like ledCount. Components program: Once every effect. Can contain global variables and internal functions. There are 2 special internal functions: renderFrame and renderLed Global variables: Once every effect, reused between functions. Variables (global and local) are defined by using an assignment e.g. t=0 renderFrame: Once every frame renderLed: Once every led within a frame Functions and variables Functions and variables give access to the WLED functionality. The list of functions and variables will grow as we go. A function has parameters (even empty parameters) e.g. setPixelColor(x,y), variables haven't e.g. ledCount. WLED general \"ledCount\": {}, \"setPixelColor\": {\"pixelNr\":\"int\", \"color\":\"int\"}, \"leds\": {}, \"setPixels\": {\"leds\": \"array\"}, \"hsv\": {\"h\":\"uint8\", \"s\":\"uint8\", \"v\":\"uint8\"}, \"setRange\": {\"from\":\"uint16\", \"to\":\"uint16\", \"color\":\"uint32\"}, \"fill\": {\"color\":\"uint32\"}, \"colorBlend\": {\"color1\":\"uint32\", \"color2\":\"uint32\", \"blend\":\"uint16\"}, \"colorWheel\": {\"pos\":\"uint8\"}, \"colorFromPalette\": {\"index\":\"uint8\", \"brightness\":\"uint8\"}, \"segcolor\": {\"index\":\"uint8\"}, \"speedSlider\": {\"return\":\"uint8\"}, \"intensitySlider\": {\"return\":\"uint8\"}, WLED SR \"beatSin\": { \"bpm\":\"uint16\", \"lowest\":\"uint8\", \"highest\":\"uint8\", \"timebase\":\"uint32\", \"phase_offset\":\"uint8\"}, \"fadeToBlackBy\": {\"fadeBy\":\"uint8\"}, \"iNoise\": {\"x\":\"uint32\", \"y\":\"uint32\"}, \"fadeOut\": {\"rate\":\"uint8\"}, \"custom1Slider\": {\"return\":\"uint8\"}, \"custom2Slider\": {\"return\":\"uint8\"}, \"custom3Slider\": {\"return\":\"uint8\"}, \"sampleAvg\": {\"return\": \"double\"}, Custom Effects \"counter\": {\"return\": \"uint32\"}, \"shift\": {\"delta\": \"int\"}, \"circle2D\": {\"degrees\": \"int\"}, Math \"constrain\": {\"amt\":\"any\", \"low\":\"any\", \"high\":\"any\"}, \"map\": {\"x\":\"int\", \"in_min\":\"int\", \"in_max\":\"int\", \"out_min\":\"int\", \"out_max\":\"int\"}, \"seed\": {\"seed\": \"uint16\"}, \"random\": {\"return\": \"uint16\"}, \"sin\": {\"degrees\": \"double\", \"return\": \"double\"}, \"cos\": {\"degrees\": \"double\", \"return\": \"double\"}, \"abs\": {\"value\": \"double\", \"return\": \"double\"}, \"min\": {\"value1\": \"double\", \"value2\": \"double\", \"return\": \"double\"}, \"max\": {\"value1\": \"double\", \"value2\": \"double\", \"return\": \"double\"}, Time \"hour\": {\"return\":\"uint8\"}, \"minute\": {\"return\":\"uint8\"}, \"second\": {\"return\":\"uint8\"}, \"millis\": {\"return\": \"uint32\"}, Pixelblase support \"time\": {\"inVal\":\"double\", \"return\": \"double\"}, \"triangle\": {\"t\":\"double\", \"return\": \"double\"}, \"wave\": {\"v\":\"double\", \"return\": \"double\"}, \"square\": {\"v\":\"double\", \"t\":\"double\", \"return\": \"double\"}, Serial output \"printf\": {\"args\": \"__VA_ARGS__\"} Details ledcount: number of leds within(!) a segment setpixelColor: currently the second parameter is color from palette! leds: one or 2 dimensional array: One index for led strips and 2 indexes for panels. If the leds variable is used an implicit setPixels(leds) will be done each frame! shift: shift all leds left or right (using delta) circle2D: puts a dot on a circle using the angle. Used to show a 2D clock, see clock2D.wled random: 16 bit random nr sin/cos: value between -1 and 1 hour/minute/second: current time (set in time preferences) printf: currently no real printf: prints numbers, max 3 Implementation of variables and functions All variables and values are internally stored as doubles and where needed converted to (unsigned) integers, e.g. to WLED functions or operators like %. Technical details about external variables and functions can be found in arti_wled.h. Look for arti_external_function, arti_set_external_variable and arti_get_external_variable. Some examples: Current limitations Only 1 segment no unary operators like - (use 0-1) and ++, -- no strings trouble shooting effect crashes: most likely too deeply nested commands (e.g. pixbri = (sin(startVal + millis()/(255- freq)) + 1) * 128), try to split up in more lines.","title":"Custom Effects"},{"location":"WLEDSR/WLED-Custom-effects/#custom-effects","text":"Custom effects are effects which are not compiled in the WLED repository but specified by a file (program file) which is interpreted in real time. The big advantage of this is that effects are not limited by what is made by WLED programmers but anybody can create effects without releasing a new version of WLED. Furthermore any change in the effect code is instantly shown on leds allowing fast developing of effects. A disadvantage is that the file needs to be loaded, examined and then run in real-time which is 'per definition' slower then pre-compiled code, although performance is promising already and will get better over time.","title":"Custom effects"},{"location":"WLEDSR/WLED-Custom-effects/#quick-start","text":"To get your first Custom Effect running, perform the following steps In tab effects, select '\u2699\ufe0f Custom Effect' In tab Segments, give the segment a name, this will be the name of the Custom Effect Click on Custom Effect Editor Click on Download wled.json to enable Custom Effects for WLED (needed each time a new version of CE is published) Click on Load template to get a 'hello world' example Press save and the template will be executed","title":"Quick start"},{"location":"WLEDSR/WLED-Custom-effects/#running-examples","text":"Custom Effects examples are stored in Github repository If you develop effects which you want to share, ask for access on Github. These effects can be loaded easily within WLED: Give a Custom Effects segment name the same name as an effect in this repository (case sensitive, without .wled), click on Custom Effect Editor and click Download 'effect'.wled and press Save. Alternatively, if you want all the effects in this folder at once, go to the Custom Effect Editor and click Download presets.json (Segment stop is set to 50! This will overwrite any existing presets you have). Refresh the WLED page or reboot to see the new presets.","title":"Running examples"},{"location":"WLEDSR/WLED-Custom-effects/#create-your-own-custom-effects","text":"A Custom Effects program typically looks like this: A program contains structures like if statements, for loops, assignments, calls (e.g. renderFrame) etc., commands like setPixelcolor and variables like ledCount.","title":"Create your own Custom Effects"},{"location":"WLEDSR/WLED-Custom-effects/#components","text":"program: Once every effect. Can contain global variables and internal functions. There are 2 special internal functions: renderFrame and renderLed Global variables: Once every effect, reused between functions. Variables (global and local) are defined by using an assignment e.g. t=0 renderFrame: Once every frame renderLed: Once every led within a frame","title":"Components"},{"location":"WLEDSR/WLED-Custom-effects/#functions-and-variables","text":"Functions and variables give access to the WLED functionality. The list of functions and variables will grow as we go. A function has parameters (even empty parameters) e.g. setPixelColor(x,y), variables haven't e.g. ledCount.","title":"Functions and variables"},{"location":"WLEDSR/WLED-Custom-effects/#wled-general","text":"\"ledCount\": {}, \"setPixelColor\": {\"pixelNr\":\"int\", \"color\":\"int\"}, \"leds\": {}, \"setPixels\": {\"leds\": \"array\"}, \"hsv\": {\"h\":\"uint8\", \"s\":\"uint8\", \"v\":\"uint8\"}, \"setRange\": {\"from\":\"uint16\", \"to\":\"uint16\", \"color\":\"uint32\"}, \"fill\": {\"color\":\"uint32\"}, \"colorBlend\": {\"color1\":\"uint32\", \"color2\":\"uint32\", \"blend\":\"uint16\"}, \"colorWheel\": {\"pos\":\"uint8\"}, \"colorFromPalette\": {\"index\":\"uint8\", \"brightness\":\"uint8\"}, \"segcolor\": {\"index\":\"uint8\"}, \"speedSlider\": {\"return\":\"uint8\"}, \"intensitySlider\": {\"return\":\"uint8\"},","title":"WLED general"},{"location":"WLEDSR/WLED-Custom-effects/#wled-sr","text":"\"beatSin\": { \"bpm\":\"uint16\", \"lowest\":\"uint8\", \"highest\":\"uint8\", \"timebase\":\"uint32\", \"phase_offset\":\"uint8\"}, \"fadeToBlackBy\": {\"fadeBy\":\"uint8\"}, \"iNoise\": {\"x\":\"uint32\", \"y\":\"uint32\"}, \"fadeOut\": {\"rate\":\"uint8\"}, \"custom1Slider\": {\"return\":\"uint8\"}, \"custom2Slider\": {\"return\":\"uint8\"}, \"custom3Slider\": {\"return\":\"uint8\"}, \"sampleAvg\": {\"return\": \"double\"},","title":"WLED SR"},{"location":"WLEDSR/WLED-Custom-effects/#custom-effects_1","text":"\"counter\": {\"return\": \"uint32\"}, \"shift\": {\"delta\": \"int\"}, \"circle2D\": {\"degrees\": \"int\"},","title":"Custom Effects"},{"location":"WLEDSR/WLED-Custom-effects/#math","text":"\"constrain\": {\"amt\":\"any\", \"low\":\"any\", \"high\":\"any\"}, \"map\": {\"x\":\"int\", \"in_min\":\"int\", \"in_max\":\"int\", \"out_min\":\"int\", \"out_max\":\"int\"}, \"seed\": {\"seed\": \"uint16\"}, \"random\": {\"return\": \"uint16\"}, \"sin\": {\"degrees\": \"double\", \"return\": \"double\"}, \"cos\": {\"degrees\": \"double\", \"return\": \"double\"}, \"abs\": {\"value\": \"double\", \"return\": \"double\"}, \"min\": {\"value1\": \"double\", \"value2\": \"double\", \"return\": \"double\"}, \"max\": {\"value1\": \"double\", \"value2\": \"double\", \"return\": \"double\"},","title":"Math"},{"location":"WLEDSR/WLED-Custom-effects/#time","text":"\"hour\": {\"return\":\"uint8\"}, \"minute\": {\"return\":\"uint8\"}, \"second\": {\"return\":\"uint8\"}, \"millis\": {\"return\": \"uint32\"},","title":"Time"},{"location":"WLEDSR/WLED-Custom-effects/#pixelblase-support","text":"\"time\": {\"inVal\":\"double\", \"return\": \"double\"}, \"triangle\": {\"t\":\"double\", \"return\": \"double\"}, \"wave\": {\"v\":\"double\", \"return\": \"double\"}, \"square\": {\"v\":\"double\", \"t\":\"double\", \"return\": \"double\"},","title":"Pixelblase support"},{"location":"WLEDSR/WLED-Custom-effects/#serial-output","text":"\"printf\": {\"args\": \"__VA_ARGS__\"}","title":"Serial output"},{"location":"WLEDSR/WLED-Custom-effects/#details","text":"ledcount: number of leds within(!) a segment setpixelColor: currently the second parameter is color from palette! leds: one or 2 dimensional array: One index for led strips and 2 indexes for panels. If the leds variable is used an implicit setPixels(leds) will be done each frame! shift: shift all leds left or right (using delta) circle2D: puts a dot on a circle using the angle. Used to show a 2D clock, see clock2D.wled random: 16 bit random nr sin/cos: value between -1 and 1 hour/minute/second: current time (set in time preferences) printf: currently no real printf: prints numbers, max 3","title":"Details"},{"location":"WLEDSR/WLED-Custom-effects/#implementation-of-variables-and-functions","text":"All variables and values are internally stored as doubles and where needed converted to (unsigned) integers, e.g. to WLED functions or operators like %. Technical details about external variables and functions can be found in arti_wled.h. Look for arti_external_function, arti_set_external_variable and arti_get_external_variable. Some examples:","title":"Implementation of variables and functions"},{"location":"WLEDSR/WLED-Custom-effects/#current-limitations","text":"Only 1 segment no unary operators like - (use 0-1) and ++, -- no strings","title":"Current limitations"},{"location":"WLEDSR/WLED-Custom-effects/#trouble-shooting","text":"effect crashes: most likely too deeply nested commands (e.g. pixbri = (sin(startVal + millis()/(255- freq)) + 1) * 128), try to split up in more lines.","title":"trouble shooting"},{"location":"WLEDSR/WLED-Programming-Notes/","text":"Introduction This version of WLED contains sound reactive routines, which are prefaced with a * FX_NAME for volume reactive routines and ** FX_NAME for FFT routines. Each is controllable by the intensity and/or speed sliders. Some routines also include 3 dedicated FFT control sliders. **Caveat: As our sound reactive fork of WLED evolves, some of this content may become out of date. We'll update as we become aware of any issues. Contents: HTTP API Links , Updating FX.h , Updating FX.cpp WLED Support Functions Important WLED variables , Important Structures Delays in WLED , Displaying LEDs , FastLED , 2D Functionality Variable Length Arrays , Using CRGB Color Space , Using CHSV Colour Space Non-Dynamically Created Variable Arrays Sound Reactive EEPROM Layout Caveat: Some information on this page is in our 'dev' branch only and not yet ready for prime time. HTTP API Links I hope to work on an Android application in the future, so I'm keeping notes on the HTTP API. * https://tynick.com/blog/01-28-2020/controlling-wled-with-raspberry-pi-using-the-wled-api/ * https://github.com/Aircoookie/WLED/wiki/HTTP-request-API Updating FX.h (line numbers will vary) Line 105 \u2013 Update the mode count. Line 250 - Added extern variables around line 250 of FX.h. These are defined in audio_reactive.h. Line 214 \u2013 Update the defines. Line 456 \u2013 Update the _mode. Line 697 \u2013 Update the mode definition and don\u2019t forget , and ; Line 816 \u2013 Update the JSON entry. Can add an extra entry. No Spaces, 10 per line!! Updating FX.cpp Append the new function(s) and use current functions as templates. Cannot add any functions without accompanying index entry. WLED Support Functions fade_out(uint8_t rate); - This is CRITICAL!!! blur(uint8_t blur_amount); - Can be useful. color_wheel(uint8_t index); - This has history with NeoPixel library. I use palettes instead. Important WLED variables SEGLEN // uint16_t - Segment length. _segment_index // uint8_t - Current segment being displayed. SEGMENT.length // uint16_t - Segment length (but not for ESP8266 :^/ ) SEGMENT.intensity // uint8_t - You can use this from the slider. SEGMENT.speed // uint8_t - You can use this from the slider. SEGMENT.palette // uint8_t - Current palette. Otherwise SEGCOLOR(0) and SEGCOLOR(1). SEGMENT.mode // uint8_t - Current mode. now // uint32_t \u2013 Millis counter. SEGENV.call // uint32_t \u2013 Counter each time a routine is called. Can be used for 'setup'. SEGENV.next_time // uint32_t \u2013 Millis counter. SEGENV.step // uint32_t - Counter each time a routine is called. SEGENV.aux0 // uint16_t - Available for use as a SEGMENT specific persistent variable. SEGENV.aux1 // uint16_t - Available for use as a SEGMENT specific persistent variable. Important Structures FX.h:267 - Segment aka SEGMENT FX.h:318 - Segment runtime.value> aka SEGENV FX.h:66 - Other stuff Delays You DO NOT use delay statements here, except to keep the watchdog happy. Here is the awesome FastLED method of timing/scheduling (which DOES NOT work with segments): EVERY_N_MILLISECONDS_I ( pixTimer , SEGMENT . speed ) { pixTimer . setPeriod ( 256 - SEGMENT . speed ); // Put your display code here. } Here's the standard blink without delay version: long lastTime = 0 ; int delayMs = 2000 ; // We want to do something every 2 seconds. void userLoop () { if ( millis () - lastTime > delayMs ) { lastTime = millis (); //do something you want to do every 2 seconds } } Displaying the LED's. We were used to FastLED.show(). Well, no longer, and this has some disadvantages. CRGB myCol = ColorFromPalette ( currentPalette , index , brightness , LINEARBLEND ); setPixelColor ( myLED , myCol . red , myCol . green , myCol . blue ); The next line supports SEGCOLOR(0) and SEGCOLOR(1) if no palette (i.e. default) is selected: setPixelColor ( i , color_blend ( SEGCOLOR ( 1 ), color_from_palette ( index , false , PALETTE_SOLID_WRAP , 0 ), pixBri )); where, i is the location, index is the color and pixBri is the brightness. Now, onto the disadvantage. . The problem is that you can perform a getPixelColor and move it to another LED with setPixelColor . After moving to about 10 pixels, the LED is now black. This is because of the built-in scaling and addressing the memory that's used for DMA transfer. Unfortunately, we don't get a nice lossless leds[location] as we do with FastLED. FastLED WLED uses the NeoPixelBus library to drive the LED's directly, however, a significant amount of FastLED functionality has been enabled in WLED. Things included: FastLED Math and trigonometry Noise Palettes Palette transitioning (use your own palette variables though) EVERY_N_MILLIS What is NOT included: * FastLED.show() * FastLED pixel setup * FastLED power management * Working directly with the leds[x] array * fill_rainbow and related routines that directly affect the array * fade / nscale , you need to use the WLED equivalent On Variable Length Arrays These will be used so that we can address leds[x] in our routines with the known and lossless FastLED method rather than the lossy NeoPixelBus method. We'll also be using these for ancillary functions, i.e. heat[x] as used in fire2012. Since you cannot define variable arrays in C, we need other methods to do so for our functions. The WLED method has been to malloc() some memory as follows: if ( ! SEGENV . allocateData ( SEGLEN )) return mode_static (); byte * heat = SEGENV . data ; heat [ value ] = 25 ; For the 2D and FastLED data array functionality, the developers of this fork are not comfortable with the malloc() method of memory allocation and have decided to create large fixed arrays instead and to create pointers for use with variable-length arrays. Already declared in FX.cpp: uint32_t ledData [ MAX_LEDS ]; // Currently 1500 as defined in const.h. Used for conversion from NeoPixelBus to FastLED. RGB or RGBW. uint32_t dataStore [ 4096 ]; // For ancillary functions. Can use any data type. Using CRGB Color Space CRGB * leds = ( CRGB * ) ledData ; // Define the pointer and override the default data type. leds [ 0 ] = CRGB :: Red ; leds [ 1 ] = ColorFromPalette ( currentPalette , index , bright , LINEARBLEND ); Display the CRGB Array First, define a function and add to FX.h void WS2812FX::setPixels(CRGB* leds) { for (int i=0; i<SEGLEN; i++) { setPixelColor(i, leds[i].red, leds[i].green, leds[i].blue); } } You can now use FastLED address methods, AND it works with segments. Then, you can call this function at the end of your routine as follows: setPixels(leds); return FRAMETIME; } // End of your routine. Proposed - Using CHSV Colour Space CHSV * leds = ( CHSV * ) ledData ; leds [ i ] = CHSV ( 25 , 255 , 255 ); Proposed - Display the CHSV Colour Space The leds[] array is already defined in the CHSV color space. CRGB color ; for ( int i = 0 ; i < SEGLEN ; i ++ ) { color = leds [ i ]; setPixelColor ( i , color . red , color . green , color . blue ); } Current Use of the CHSV Colour Space As used in one of the FFT animations (** Freqmatrix) in FX.cpp around line 4079. uint32_t * leds = ledData ; CHSV c ; c = CHSV ( 20 , 255 , 255 ); leds [ i ] = ( c . h << 16 ) + ( c . s << 8 ) + ( c . v ); Current Display of CHSV array for ( int i = 0 ; i < SEGLEN ; i ++ ) { c . h = ( leds [ i ] >> 16 ) & 0xFF ; c . s = ( leds [ i ] >> 8 ) & 0xFF ; c . v = leds [ i ] & 0xFF ; color = c ; setPixelColor ( i , color . red , color . green , color . blue ); } How to use a non-dynamically created variable array We'll use that large dataStore array that was defined globally in FX.cpp. Although it was defined as a unint32_t , you can still use smaller dynamic arrays and override the data type using pointers with a function: uint8_t *myArray = (uint8_t *)dataStore; // Just make sure you don't go over. You can now use it as a 1D or quasi 2D array, i.e. myArray [ 5 ] = 4 ; // 1D array myArray [ 5 * matrixWidth + 4 ] = 10 ; // 2D array 2D Changes We have implemented an advanced XY() function to support not only panels of varying sizes and orientations, but also for multiple (identical) panels. Animations have been written so that the top left led in the panel(s) is, well, at the top left. We do not (yet) have animation specific orientation settings. If you would like to do so, for any given 2D animation, you'll need to swap the parameters for the XY() function as well as changing the for loop parameter from height to width (or vice versa). Sound Reactive EEPROM Layout We've expanded EEPSIZE in const.h to 4095 for ESP32 and 3300 for ESP8266 due to our additional requirements. We started saving values at 3072 defined as EEP_AUDIO . Although we'd like to apply SEGMENT specific settings, we may have some challenges with the FFT sliders. We're not sure at this point. Byte Data EEP_AUDIO Sound Squelch Setting EEP_AUDIO+1 Audio Sync Port EEP_AUDIO+2 Audio Sync Port EEP_AUDIO+3 Audio Sync Enabled EEP_AUDIO+4 FFT1 Slider Value EEP_AUDIO+5 FFT2 Slider Value EEP_AUDIO+6 FFT3 Slider Value EEP_AUDIO+7 Begin 2D Matrix Values EEP_AUDIO+11 End 2D Matrix Values EEP_AUDIO+12 Input Gain Setting Presets in EEPROM How do we store FFT slider values in EEPROM for WLED presets? WLED Presets are 20-byte blocks (slots) stored in EEPROM. There is space reserved in EEPROM for 25 slots from 400-899. Currently, 18 of the 20 bytes are being used by WLED. This presents a problem for us since, at the time of writing, we have 3 bytes that we need to store for our FFT sliders. We didn't want to attempt to rewrite the entire WLED preset protocol as that would surely introduce unnecessary headaches. To solve this problem, we reserved 25 5-byte blocks (slots) in EEPROM from 3175-3299. With the space in EEPROM allocated, we can now save/retrieve FFT slider data to/from WLED presets. Byte Data 0 FFT1 Slider Value 1 FFT2 Slider Value 2 FFT3 Slider Value 3 ZERO (Reserved) 4 ZERO (Reserved) On Frame Rates WLED limits the frame rate, and it's apparently because the LED's start flashing if the frame rate is too high. The standard for maintaining a consistent frame rate when writing any animations is to make sure you add to the end of your animation: return FRAMETIME; If you wish to increase the frame rate, have a look at fx.h with: #define MIN_SHOW_DELAY 15 Also, in fx_fcn.h, there's: if (nowUp - _lastShow<MIN_SHOW_DELAY) return; Frametime is a constant, which is 1000/42. In order to increase the FPS, instead of return frametime, we can write a smaller value than that and for max speed simply go for return(0), which is the smallest. On Segments Some animations may break when the users start implementing SEGMENTS. Issues encountered were: Triggers. A triggered event, which was reset by the animation. This does not work with SEGMENTS. One workaround is knowing that the MIN_SHOW_DELAY is 15, and then determine if now-original_event > MIN_SHOW_DELAY in order to reset the animation. To get the current segment being displayed, try Serial.println(_segment_index); To use persistent variable across SEGMENTS, don't use 'static', but rather use the existing uint16_t defined SEGENV.aux0 and SEGENV.aux1 variables. Too bad they're not uint32_t. For further reading on persistent variables, see this page https://moonmodules.github.io/WLED-Docs/WLEDSR/Persistent-Variables-and-WLED Here's a replacement for EVERY_N_MILLIS() uint8_t secondHand = millis () / ( 256 - SEGMENT . speed ) % 10 ; if ( SEGENV . aux0 != secondHand ) { SEGENV . aux0 = secondHand ; < rest of code goes here > } getPixel and setPixel In the FastLED world, we could cascade led information with things like: leds [ i + 1 ] = leds [ i ]; That's not an option with WLED (unless you use the *ledData method described above), because it doesn't have the leds[] array. Instead, you have: setPixelColor ( i + 1 , getPixelColor ( i )); The problem, however is that while the FastLED method preserves the original pixel information, the 'WLED' method is lossy, and eventually the cascaded led's will fade out entirely. The workaround, as previously shown, is to create an array used by the segment that preserves the LED information. AirCoookie's method is to allocate memory on the fly for this. For instance: if ( ! SEGENV . allocateData ( SEGLEN )) return mode_static (); // allocation failed SEGENV . data [ SEGLEN -1 ] = 0 ; // a byte value If you want, you can give it another name with: if ( ! SEGENV . allocateData ( SEGLEN )) return mode_static (); // allocation failed byte * heat = SEGENV . data ; heat [ SEGLEN -1 ] = 0 ; // a byte value You now have SEGENV.data[SEGLEN] allocated for your use. Adding a structure for use with your segment is a whole other level of complexity and can be found by examining mode_multi_comet and mode_oscillate among others. Just search for SEGENV.allocateData in FX.cpp.","title":"WLED Programming Notes"},{"location":"WLEDSR/WLED-Programming-Notes/#introduction","text":"This version of WLED contains sound reactive routines, which are prefaced with a * FX_NAME for volume reactive routines and ** FX_NAME for FFT routines. Each is controllable by the intensity and/or speed sliders. Some routines also include 3 dedicated FFT control sliders. **Caveat: As our sound reactive fork of WLED evolves, some of this content may become out of date. We'll update as we become aware of any issues. Contents: HTTP API Links , Updating FX.h , Updating FX.cpp WLED Support Functions Important WLED variables , Important Structures Delays in WLED , Displaying LEDs , FastLED , 2D Functionality Variable Length Arrays , Using CRGB Color Space , Using CHSV Colour Space Non-Dynamically Created Variable Arrays Sound Reactive EEPROM Layout Caveat: Some information on this page is in our 'dev' branch only and not yet ready for prime time.","title":"Introduction"},{"location":"WLEDSR/WLED-Programming-Notes/#http-api-links","text":"I hope to work on an Android application in the future, so I'm keeping notes on the HTTP API. * https://tynick.com/blog/01-28-2020/controlling-wled-with-raspberry-pi-using-the-wled-api/ * https://github.com/Aircoookie/WLED/wiki/HTTP-request-API","title":"HTTP API Links"},{"location":"WLEDSR/WLED-Programming-Notes/#updating-fxh-line-numbers-will-vary","text":"Line 105 \u2013 Update the mode count. Line 250 - Added extern variables around line 250 of FX.h. These are defined in audio_reactive.h. Line 214 \u2013 Update the defines. Line 456 \u2013 Update the _mode. Line 697 \u2013 Update the mode definition and don\u2019t forget , and ; Line 816 \u2013 Update the JSON entry. Can add an extra entry. No Spaces, 10 per line!!","title":"Updating FX.h (line numbers will vary)"},{"location":"WLEDSR/WLED-Programming-Notes/#updating-fxcpp","text":"Append the new function(s) and use current functions as templates. Cannot add any functions without accompanying index entry.","title":"Updating FX.cpp"},{"location":"WLEDSR/WLED-Programming-Notes/#wled-support-functions","text":"fade_out(uint8_t rate); - This is CRITICAL!!! blur(uint8_t blur_amount); - Can be useful. color_wheel(uint8_t index); - This has history with NeoPixel library. I use palettes instead.","title":"WLED Support Functions"},{"location":"WLEDSR/WLED-Programming-Notes/#important-wled-variables","text":"SEGLEN // uint16_t - Segment length. _segment_index // uint8_t - Current segment being displayed. SEGMENT.length // uint16_t - Segment length (but not for ESP8266 :^/ ) SEGMENT.intensity // uint8_t - You can use this from the slider. SEGMENT.speed // uint8_t - You can use this from the slider. SEGMENT.palette // uint8_t - Current palette. Otherwise SEGCOLOR(0) and SEGCOLOR(1). SEGMENT.mode // uint8_t - Current mode. now // uint32_t \u2013 Millis counter. SEGENV.call // uint32_t \u2013 Counter each time a routine is called. Can be used for 'setup'. SEGENV.next_time // uint32_t \u2013 Millis counter. SEGENV.step // uint32_t - Counter each time a routine is called. SEGENV.aux0 // uint16_t - Available for use as a SEGMENT specific persistent variable. SEGENV.aux1 // uint16_t - Available for use as a SEGMENT specific persistent variable.","title":"Important WLED variables"},{"location":"WLEDSR/WLED-Programming-Notes/#important-structures","text":"FX.h:267 - Segment aka SEGMENT FX.h:318 - Segment runtime.value> aka SEGENV FX.h:66 - Other stuff","title":"Important Structures"},{"location":"WLEDSR/WLED-Programming-Notes/#delays","text":"You DO NOT use delay statements here, except to keep the watchdog happy. Here is the awesome FastLED method of timing/scheduling (which DOES NOT work with segments): EVERY_N_MILLISECONDS_I ( pixTimer , SEGMENT . speed ) { pixTimer . setPeriod ( 256 - SEGMENT . speed ); // Put your display code here. } Here's the standard blink without delay version: long lastTime = 0 ; int delayMs = 2000 ; // We want to do something every 2 seconds. void userLoop () { if ( millis () - lastTime > delayMs ) { lastTime = millis (); //do something you want to do every 2 seconds } }","title":"Delays"},{"location":"WLEDSR/WLED-Programming-Notes/#displaying-the-leds","text":"We were used to FastLED.show(). Well, no longer, and this has some disadvantages. CRGB myCol = ColorFromPalette ( currentPalette , index , brightness , LINEARBLEND ); setPixelColor ( myLED , myCol . red , myCol . green , myCol . blue ); The next line supports SEGCOLOR(0) and SEGCOLOR(1) if no palette (i.e. default) is selected: setPixelColor ( i , color_blend ( SEGCOLOR ( 1 ), color_from_palette ( index , false , PALETTE_SOLID_WRAP , 0 ), pixBri )); where, i is the location, index is the color and pixBri is the brightness. Now, onto the disadvantage. . The problem is that you can perform a getPixelColor and move it to another LED with setPixelColor . After moving to about 10 pixels, the LED is now black. This is because of the built-in scaling and addressing the memory that's used for DMA transfer. Unfortunately, we don't get a nice lossless leds[location] as we do with FastLED.","title":"Displaying the LED's."},{"location":"WLEDSR/WLED-Programming-Notes/#fastled","text":"WLED uses the NeoPixelBus library to drive the LED's directly, however, a significant amount of FastLED functionality has been enabled in WLED. Things included: FastLED Math and trigonometry Noise Palettes Palette transitioning (use your own palette variables though) EVERY_N_MILLIS What is NOT included: * FastLED.show() * FastLED pixel setup * FastLED power management * Working directly with the leds[x] array * fill_rainbow and related routines that directly affect the array * fade / nscale , you need to use the WLED equivalent","title":"FastLED"},{"location":"WLEDSR/WLED-Programming-Notes/#on-variable-length-arrays","text":"These will be used so that we can address leds[x] in our routines with the known and lossless FastLED method rather than the lossy NeoPixelBus method. We'll also be using these for ancillary functions, i.e. heat[x] as used in fire2012. Since you cannot define variable arrays in C, we need other methods to do so for our functions. The WLED method has been to malloc() some memory as follows: if ( ! SEGENV . allocateData ( SEGLEN )) return mode_static (); byte * heat = SEGENV . data ; heat [ value ] = 25 ; For the 2D and FastLED data array functionality, the developers of this fork are not comfortable with the malloc() method of memory allocation and have decided to create large fixed arrays instead and to create pointers for use with variable-length arrays. Already declared in FX.cpp: uint32_t ledData [ MAX_LEDS ]; // Currently 1500 as defined in const.h. Used for conversion from NeoPixelBus to FastLED. RGB or RGBW. uint32_t dataStore [ 4096 ]; // For ancillary functions. Can use any data type.","title":"On Variable Length Arrays"},{"location":"WLEDSR/WLED-Programming-Notes/#using-crgb-color-space","text":"CRGB * leds = ( CRGB * ) ledData ; // Define the pointer and override the default data type. leds [ 0 ] = CRGB :: Red ; leds [ 1 ] = ColorFromPalette ( currentPalette , index , bright , LINEARBLEND );","title":"Using CRGB Color Space"},{"location":"WLEDSR/WLED-Programming-Notes/#display-the-crgb-array","text":"First, define a function and add to FX.h void WS2812FX::setPixels(CRGB* leds) { for (int i=0; i<SEGLEN; i++) { setPixelColor(i, leds[i].red, leds[i].green, leds[i].blue); } } You can now use FastLED address methods, AND it works with segments. Then, you can call this function at the end of your routine as follows: setPixels(leds); return FRAMETIME; } // End of your routine.","title":"Display the CRGB Array"},{"location":"WLEDSR/WLED-Programming-Notes/#proposed-using-chsv-colour-space","text":"CHSV * leds = ( CHSV * ) ledData ; leds [ i ] = CHSV ( 25 , 255 , 255 );","title":"Proposed - Using CHSV Colour Space"},{"location":"WLEDSR/WLED-Programming-Notes/#proposed-display-the-chsv-colour-space","text":"The leds[] array is already defined in the CHSV color space. CRGB color ; for ( int i = 0 ; i < SEGLEN ; i ++ ) { color = leds [ i ]; setPixelColor ( i , color . red , color . green , color . blue ); }","title":"Proposed - Display the CHSV Colour Space"},{"location":"WLEDSR/WLED-Programming-Notes/#current-use-of-the-chsv-colour-space","text":"As used in one of the FFT animations (** Freqmatrix) in FX.cpp around line 4079. uint32_t * leds = ledData ; CHSV c ; c = CHSV ( 20 , 255 , 255 ); leds [ i ] = ( c . h << 16 ) + ( c . s << 8 ) + ( c . v );","title":"Current Use of the CHSV Colour Space"},{"location":"WLEDSR/WLED-Programming-Notes/#current-display-of-chsv-array","text":"for ( int i = 0 ; i < SEGLEN ; i ++ ) { c . h = ( leds [ i ] >> 16 ) & 0xFF ; c . s = ( leds [ i ] >> 8 ) & 0xFF ; c . v = leds [ i ] & 0xFF ; color = c ; setPixelColor ( i , color . red , color . green , color . blue ); }","title":"Current Display of CHSV array"},{"location":"WLEDSR/WLED-Programming-Notes/#how-to-use-a-non-dynamically-created-variable-array","text":"We'll use that large dataStore array that was defined globally in FX.cpp. Although it was defined as a unint32_t , you can still use smaller dynamic arrays and override the data type using pointers with a function: uint8_t *myArray = (uint8_t *)dataStore; // Just make sure you don't go over. You can now use it as a 1D or quasi 2D array, i.e. myArray [ 5 ] = 4 ; // 1D array myArray [ 5 * matrixWidth + 4 ] = 10 ; // 2D array","title":"How to use a non-dynamically created variable array"},{"location":"WLEDSR/WLED-Programming-Notes/#2d-changes","text":"We have implemented an advanced XY() function to support not only panels of varying sizes and orientations, but also for multiple (identical) panels. Animations have been written so that the top left led in the panel(s) is, well, at the top left. We do not (yet) have animation specific orientation settings. If you would like to do so, for any given 2D animation, you'll need to swap the parameters for the XY() function as well as changing the for loop parameter from height to width (or vice versa).","title":"2D Changes"},{"location":"WLEDSR/WLED-Programming-Notes/#sound-reactive-eeprom-layout","text":"We've expanded EEPSIZE in const.h to 4095 for ESP32 and 3300 for ESP8266 due to our additional requirements. We started saving values at 3072 defined as EEP_AUDIO . Although we'd like to apply SEGMENT specific settings, we may have some challenges with the FFT sliders. We're not sure at this point. Byte Data EEP_AUDIO Sound Squelch Setting EEP_AUDIO+1 Audio Sync Port EEP_AUDIO+2 Audio Sync Port EEP_AUDIO+3 Audio Sync Enabled EEP_AUDIO+4 FFT1 Slider Value EEP_AUDIO+5 FFT2 Slider Value EEP_AUDIO+6 FFT3 Slider Value EEP_AUDIO+7 Begin 2D Matrix Values EEP_AUDIO+11 End 2D Matrix Values EEP_AUDIO+12 Input Gain Setting","title":"Sound Reactive EEPROM Layout"},{"location":"WLEDSR/WLED-Programming-Notes/#presets-in-eeprom","text":"How do we store FFT slider values in EEPROM for WLED presets? WLED Presets are 20-byte blocks (slots) stored in EEPROM. There is space reserved in EEPROM for 25 slots from 400-899. Currently, 18 of the 20 bytes are being used by WLED. This presents a problem for us since, at the time of writing, we have 3 bytes that we need to store for our FFT sliders. We didn't want to attempt to rewrite the entire WLED preset protocol as that would surely introduce unnecessary headaches. To solve this problem, we reserved 25 5-byte blocks (slots) in EEPROM from 3175-3299. With the space in EEPROM allocated, we can now save/retrieve FFT slider data to/from WLED presets. Byte Data 0 FFT1 Slider Value 1 FFT2 Slider Value 2 FFT3 Slider Value 3 ZERO (Reserved) 4 ZERO (Reserved)","title":"Presets in EEPROM"},{"location":"WLEDSR/WLED-Programming-Notes/#on-frame-rates","text":"WLED limits the frame rate, and it's apparently because the LED's start flashing if the frame rate is too high. The standard for maintaining a consistent frame rate when writing any animations is to make sure you add to the end of your animation: return FRAMETIME; If you wish to increase the frame rate, have a look at fx.h with: #define MIN_SHOW_DELAY 15 Also, in fx_fcn.h, there's: if (nowUp - _lastShow<MIN_SHOW_DELAY) return; Frametime is a constant, which is 1000/42. In order to increase the FPS, instead of return frametime, we can write a smaller value than that and for max speed simply go for return(0), which is the smallest.","title":"On Frame Rates"},{"location":"WLEDSR/WLED-Programming-Notes/#on-segments","text":"Some animations may break when the users start implementing SEGMENTS. Issues encountered were: Triggers. A triggered event, which was reset by the animation. This does not work with SEGMENTS. One workaround is knowing that the MIN_SHOW_DELAY is 15, and then determine if now-original_event > MIN_SHOW_DELAY in order to reset the animation. To get the current segment being displayed, try Serial.println(_segment_index); To use persistent variable across SEGMENTS, don't use 'static', but rather use the existing uint16_t defined SEGENV.aux0 and SEGENV.aux1 variables. Too bad they're not uint32_t. For further reading on persistent variables, see this page https://moonmodules.github.io/WLED-Docs/WLEDSR/Persistent-Variables-and-WLED Here's a replacement for EVERY_N_MILLIS() uint8_t secondHand = millis () / ( 256 - SEGMENT . speed ) % 10 ; if ( SEGENV . aux0 != secondHand ) { SEGENV . aux0 = secondHand ; < rest of code goes here > }","title":"On Segments"},{"location":"WLEDSR/WLED-Programming-Notes/#getpixel-and-setpixel","text":"In the FastLED world, we could cascade led information with things like: leds [ i + 1 ] = leds [ i ]; That's not an option with WLED (unless you use the *ledData method described above), because it doesn't have the leds[] array. Instead, you have: setPixelColor ( i + 1 , getPixelColor ( i )); The problem, however is that while the FastLED method preserves the original pixel information, the 'WLED' method is lossy, and eventually the cascaded led's will fade out entirely. The workaround, as previously shown, is to create an array used by the segment that preserves the LED information. AirCoookie's method is to allocate memory on the fly for this. For instance: if ( ! SEGENV . allocateData ( SEGLEN )) return mode_static (); // allocation failed SEGENV . data [ SEGLEN -1 ] = 0 ; // a byte value If you want, you can give it another name with: if ( ! SEGENV . allocateData ( SEGLEN )) return mode_static (); // allocation failed byte * heat = SEGENV . data ; heat [ SEGLEN -1 ] = 0 ; // a byte value You now have SEGENV.data[SEGLEN] allocated for your use. Adding a structure for use with your segment is a whole other level of complexity and can be found by examining mode_multi_comet and mode_oscillate among others. Just search for SEGENV.allocateData in FX.cpp.","title":"getPixel and setPixel"},{"location":"WLEDSR/wip/","text":"This page is work in progress Check WLED Atuline Wiki for original content Template text: Fork specific info WLED SR","title":"Work in Progress"},{"location":"WLEDSR/wip/#fork-specific-info","text":"","title":"Fork specific info"},{"location":"WLEDSR/wip/#wled-sr","text":"","title":"WLED SR"},{"location":"about/contributors/","text":"This page is to honor the work of all the people who helped to make WLED what it is today! Direct Contributors to WLED code Everyone you see on the Contributors page and: 8bitbrett made the WiFi auto connect QR code with the Aircoookie/WLED logo! adamo made the animated Discord server logo! @blazoncek makes countless new features and improvements to many parts of WLED! @debsahu provided the HomeAssistant autodiscovery and a lot of help with PIO! @frenck made an amazing, stable and feature-packed native integration with HomeAssistant! @photocromax is helping bringing the Live visualization feature to life and added GIF previews to the doc! @raymiec is currently working on creating the best clients for Android and iOS! @StormPie , the creator of the awesome mobile UI! @timothybrown added MQTT authentication! @viknet365 ported the Meteor effect! @wiesendaniel added the configuration for the PlatformIO IDE! @YeonV provided the initial HomeAssistant MQTT light config! This list is incomplete. Testing, Contributors and Supporters This list has been redacted for privacy reasons. If you've contributed to the project by testing a lot, helping the community, or sending me a gift, feel free to edit this page and add yourself (maintain alphabetical order) \ud83d\ude04 Thank you very much, your help is truly appreciated! Put two spaces behind your name, else the line break will not appear in the final page! @Def3nder @DutchmanNL DrZzs (Justin A.) Dylan L. Fil Quindor (Andries F.) Tonyno Used Libraries and Dependencies ESP8266 / ESP32 Arduino Core NeoPixelBus by Makuna FastLED library ESPAsyncTCP by me-no-dev ESPAsyncUDP by me-no-dev (as of 0.9.0) ESPAsyncWebServer by me-no-dev ArduinoJSON by bblanchon async-mqtt-client by marvinroger WS2812FX by kitesurfer1404 (modified) IRremoteESP8266 by markszabo (optional) Timezone by JChristensen Blynk library (compacted) E1.31 library by forkineye (modified) Espalexa by Aircoookie (modified) Many included FastLED effects are modified versions of kriegsman 's gists! WLED implements Art-Net\u2122 Designed by and Copyright Artistic Licence Holdings Ltd WebServer_tng by bbx10 (ESP32, up to 0.8.3) PubSubClient by knolleary (modified, up to 0.8.3) iro.js colorpicker by James Daniel! Classic UI icons by Linearicons created by Perxis ! If you would like to appear in this list for a contribution you made or be removed from it, feel free to contact me!","title":"Contributors & Credits"},{"location":"about/contributors/#direct-contributors-to-wled-code","text":"Everyone you see on the Contributors page and: 8bitbrett made the WiFi auto connect QR code with the Aircoookie/WLED logo! adamo made the animated Discord server logo! @blazoncek makes countless new features and improvements to many parts of WLED! @debsahu provided the HomeAssistant autodiscovery and a lot of help with PIO! @frenck made an amazing, stable and feature-packed native integration with HomeAssistant! @photocromax is helping bringing the Live visualization feature to life and added GIF previews to the doc! @raymiec is currently working on creating the best clients for Android and iOS! @StormPie , the creator of the awesome mobile UI! @timothybrown added MQTT authentication! @viknet365 ported the Meteor effect! @wiesendaniel added the configuration for the PlatformIO IDE! @YeonV provided the initial HomeAssistant MQTT light config! This list is incomplete.","title":"Direct Contributors to WLED code"},{"location":"about/contributors/#testing-contributors-and-supporters","text":"This list has been redacted for privacy reasons. If you've contributed to the project by testing a lot, helping the community, or sending me a gift, feel free to edit this page and add yourself (maintain alphabetical order) \ud83d\ude04 Thank you very much, your help is truly appreciated! Put two spaces behind your name, else the line break will not appear in the final page! @Def3nder @DutchmanNL DrZzs (Justin A.) Dylan L. Fil Quindor (Andries F.) Tonyno","title":"Testing, Contributors and Supporters"},{"location":"about/contributors/#used-libraries-and-dependencies","text":"ESP8266 / ESP32 Arduino Core NeoPixelBus by Makuna FastLED library ESPAsyncTCP by me-no-dev ESPAsyncUDP by me-no-dev (as of 0.9.0) ESPAsyncWebServer by me-no-dev ArduinoJSON by bblanchon async-mqtt-client by marvinroger WS2812FX by kitesurfer1404 (modified) IRremoteESP8266 by markszabo (optional) Timezone by JChristensen Blynk library (compacted) E1.31 library by forkineye (modified) Espalexa by Aircoookie (modified) Many included FastLED effects are modified versions of kriegsman 's gists! WLED implements Art-Net\u2122 Designed by and Copyright Artistic Licence Holdings Ltd WebServer_tng by bbx10 (ESP32, up to 0.8.3) PubSubClient by knolleary (modified, up to 0.8.3) iro.js colorpicker by James Daniel! Classic UI icons by Linearicons created by Perxis ! If you would like to appear in this list for a contribution you made or be removed from it, feel free to contact me!","title":"Used Libraries and Dependencies"},{"location":"about/privacy-policy/","text":"By using the WLED embedded system code, the WLED iOS mobile application, the WLED Android mobile application, web client, or associated Services, no personally identifiable data is collected, transmitted and/or stored on external servers. No data is processed in any way not absolutely required for the operation of the Service. This https://kno.wled.ge page is hosted using GitHub Pages. While the author of this page does not collect any personally identifiable data, the service provider GitHub \"may collect User Personal Information from visitors to [the] GitHub Pages website, including logs of visitor IP addresses, to comply with legal obligations, and to maintain the security and integrity of the Website and the Service.\" (https://docs.github.com/en/github/site-policy/github-privacy-statement#github-pages) This is outside the influence of the author. Overview of collected data The embedded system internally stores configuration data, including, but not limited to the user's WiFi credentials. This data is deletable by the user. External read access to sensitive data is blocked. No user or configuration data is sent to any system outside the users local network, unless the user modifies the Software or network configuration. The mobile apps internally store data regarding connected devices, including, but not limited to the device's network-local IP addresses. Using the provided Support services (including, but not limited to GitHub, Discord and E-mail), only the information you choose to disclose will be processed. Privacy policies and Terms of Service of service providers apply. In accordance with the Service MIT license, THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. If you have inquiries regarding this Policy please feel free to contact me at: dev.aircoookie@gmail,com","title":"Privacy Policy"},{"location":"about/privacy-policy/#overview-of-collected-data","text":"The embedded system internally stores configuration data, including, but not limited to the user's WiFi credentials. This data is deletable by the user. External read access to sensitive data is blocked. No user or configuration data is sent to any system outside the users local network, unless the user modifies the Software or network configuration. The mobile apps internally store data regarding connected devices, including, but not limited to the device's network-local IP addresses. Using the provided Support services (including, but not limited to GitHub, Discord and E-mail), only the information you choose to disclose will be processed. Privacy policies and Terms of Service of service providers apply. In accordance with the Service MIT license, THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. If you have inquiries regarding this Policy please feel free to contact me at: dev.aircoookie@gmail,com","title":"Overview of collected data"},{"location":"about/roadmap/","text":"These are currently on my list of what COULD be implemented, there is no guarantee if and when they will be available! Create named playlists of presets Custom color palettes Settings pages overhaul Rework of WiFi connection logic (reconnect after WiFi or power outage)","title":"Upcoming Features"},{"location":"advanced/compile-analog/","text":"Moved, see How to compile WLED","title":"Compile Analog WLED"},{"location":"advanced/compile-wled/","text":"Moved, see How to compile WLED","title":"Compile WLED"},{"location":"advanced/compiling-wled/","text":"You want to add custom features to WLED, use non-default pins, or add in a usermod? You've found the right place! Tip Only want to build the code with some custom defines to e.g. enable a usermod? Unless you want to do changes yourself, you don't necessarily have to install the development environment. In the WLED Discord server, there is the WBLD bot which will build your custom PIO environemt with the ./build custom command. WLED has come to rely on so many dependencies in the latest versions that building with the Arduino IDE is no longer recommended. Instead, installing Visual Studio Code and its PlatformIO (PIO) extension is easier, as it will install the ESP Arduino core, all the required libraries and the correct compilation settings for you automatically. Installation guide (PlatformIO, recommended) Make sure Git client is installed on your system. If it isn't, you can get it here . Download and install the free Visual Studio Code by Microsoft. Open VS Code and go to the Extensions manager (the icon with the stacked blocks in the left bar) Search for platformio ide and install the PlatformIO extension Download the WLED source code by executing git clone https://github.com/Aircoookie/WLED.git in some folder. (You can also use GitHub Desktop or download the latest source code from https://github.com/Aircoookie/WLED under the Code dropdown menu as a .zip file.) Alternatively fork the WLED project first and download it from your fork. Go to File -> Open Folder and open that root WLED folder (the one that contains platformio.ini , NOT the wled00 folder) Compilation guide (PlatformIO) Tip Make sure Git Client is installed on your system. You can get it here . In VS Code, open the file platformio.ini . Add a semicolon in front of the line that says default_envs = travis_esp8266, travis_esp32 to comment it out. Select your build environment by un-commenting one of the lines starting with ; default_envs = . Please remove BOTH the ; and the whitespace behind it to correctly uncomment the line. For most ESP8266 boards, the d1_mini environment is best. In the blue bottom bar, hit the checkmark to compile WLED or the arrow pointing right to compile and upload! Picture Guide Success! If you get one of these two errors, hit the checkmark icon once again to compile and that time the code should build without problems! error: wled00\\wled00.ino.cpp: No such file or directory FileNotFoundError: [WinError 2] The system cannot find the file specified: '[...].sconsign37.dblite' Making a custom environment Once you've confirmed VSCode with Platformio is set up correctly, you can add/define overrides to allow you to use non-default pins, add a usermod, or add other custom features. Copy and paste the contents of platformio_override.ini.sample into a new file called platformio_override.ini . Make sure platformio_override.ini is in the same folder as platformio.ini . Replace the line default_envs = WLED_tasmota_1M with the line you uncommented in platformio.ini in the previous steps (from Compilation guide (PlatformIO)). Example: default_envs = d1_mini In platformio.ini scroll down until you see #-------------------- # WLED BUILDS #-------------------- Find the section that matches the build environment you selected in previous steps. Example: [env:d1_mini] Select the whole section (including the first line in brackets [ ] ), and copy and paste it into platformio_override.ini overwriting the build environment section that was already there. Add a new line under the the line that starts with build_flags = Put your -D overrides on this new line, giving each -D it's own new line. Compile your freshly customized WLED image! Flashing the compiled binary Tip This step is optional and only recommended if you want to install the same binary to multiple boards. For testing, it is easiest to upload directly from PlatformIO The .bin file is located in the subfolder /build_output/firmware in your WLED folder. The binary will have the same name as your environment. All that's left to do is flash this .bin file onto your ESP board and then connect it to WiFi. Compilation guide (Arduino IDE, not recommended) Warning This method is outdated. The source is no longer officially checked to be buildable with the Arduino IDE. Using PlatformIO is strongly advised. Follow a guide to setup your Arduino IDE (I am using version 1.8.9) with the ESP8266 libraries. For current compiles I recommend the latest Arduino core version 2.7.4. If you do not wish to install all libraries manually it is recommended to download the PlatformIO extension for VS Code (see above). You will need to install a few libraries: Library Name Platform NeoPixelBus (2.6.0) All FastLED All ESPAsyncWebServer Aircoookie fork (2.0.0) All IRRemoteESP8266 All ESPAsyncTCP ESP8266 only ESPAsyncUDP ESP8266 only AsyncTCP for ESP32 ESP32 only LITTLEFS_esp32 * ESP32 only * Please see the installation guide . You might need to enable a define in the library code. All other dependencies are included with WLED for convenience. Now compile and flash the software! Make sure you erase everything when you flash! (If your board config does not provide this option, you can Sketch -> Export compiled Binary and upload with any ESP flashing tool .) Compilation settings (Arduino IDE) ESP8266: Arduino Core v2.7.4 Board: NodeMCU 1.0 (ESP-12E module) (or select your ESP board) CPU frequency: 80 MHz Flash size : 4MB (1MB SPIFFS) LwIP variant: v1.4 Higher Bandwidth (try 2 if you experience issues) Upload speed: Any, 921600 recommended ESP8266-07 (External Antenna): Variants have 512kB or 1MB flash Be sure to use DOUT mode when flashing Flash Size 1MB (128k SPIFFS) 512kB variant no longer compatible ESP-07s (External Antenna): Variant has 4MB flash Settings as for NodeMCU or Wemos ESP32: Arduino Core v1.0.6","title":"Compiling WLED"},{"location":"advanced/compiling-wled/#installation-guide-platformio-recommended","text":"Make sure Git client is installed on your system. If it isn't, you can get it here . Download and install the free Visual Studio Code by Microsoft. Open VS Code and go to the Extensions manager (the icon with the stacked blocks in the left bar) Search for platformio ide and install the PlatformIO extension Download the WLED source code by executing git clone https://github.com/Aircoookie/WLED.git in some folder. (You can also use GitHub Desktop or download the latest source code from https://github.com/Aircoookie/WLED under the Code dropdown menu as a .zip file.) Alternatively fork the WLED project first and download it from your fork. Go to File -> Open Folder and open that root WLED folder (the one that contains platformio.ini , NOT the wled00 folder)","title":"Installation guide (PlatformIO, recommended)"},{"location":"advanced/compiling-wled/#compilation-guide-platformio","text":"Tip Make sure Git Client is installed on your system. You can get it here . In VS Code, open the file platformio.ini . Add a semicolon in front of the line that says default_envs = travis_esp8266, travis_esp32 to comment it out. Select your build environment by un-commenting one of the lines starting with ; default_envs = . Please remove BOTH the ; and the whitespace behind it to correctly uncomment the line. For most ESP8266 boards, the d1_mini environment is best. In the blue bottom bar, hit the checkmark to compile WLED or the arrow pointing right to compile and upload! Picture Guide Success! If you get one of these two errors, hit the checkmark icon once again to compile and that time the code should build without problems! error: wled00\\wled00.ino.cpp: No such file or directory FileNotFoundError: [WinError 2] The system cannot find the file specified: '[...].sconsign37.dblite'","title":"Compilation guide (PlatformIO)"},{"location":"advanced/compiling-wled/#making-a-custom-environment","text":"Once you've confirmed VSCode with Platformio is set up correctly, you can add/define overrides to allow you to use non-default pins, add a usermod, or add other custom features. Copy and paste the contents of platformio_override.ini.sample into a new file called platformio_override.ini . Make sure platformio_override.ini is in the same folder as platformio.ini . Replace the line default_envs = WLED_tasmota_1M with the line you uncommented in platformio.ini in the previous steps (from Compilation guide (PlatformIO)). Example: default_envs = d1_mini In platformio.ini scroll down until you see #-------------------- # WLED BUILDS #-------------------- Find the section that matches the build environment you selected in previous steps. Example: [env:d1_mini] Select the whole section (including the first line in brackets [ ] ), and copy and paste it into platformio_override.ini overwriting the build environment section that was already there. Add a new line under the the line that starts with build_flags = Put your -D overrides on this new line, giving each -D it's own new line. Compile your freshly customized WLED image!","title":"Making a custom environment"},{"location":"advanced/compiling-wled/#flashing-the-compiled-binary","text":"Tip This step is optional and only recommended if you want to install the same binary to multiple boards. For testing, it is easiest to upload directly from PlatformIO The .bin file is located in the subfolder /build_output/firmware in your WLED folder. The binary will have the same name as your environment. All that's left to do is flash this .bin file onto your ESP board and then connect it to WiFi.","title":"Flashing the compiled binary"},{"location":"advanced/compiling-wled/#compilation-guide-arduino-ide-not-recommended","text":"Warning This method is outdated. The source is no longer officially checked to be buildable with the Arduino IDE. Using PlatformIO is strongly advised. Follow a guide to setup your Arduino IDE (I am using version 1.8.9) with the ESP8266 libraries. For current compiles I recommend the latest Arduino core version 2.7.4. If you do not wish to install all libraries manually it is recommended to download the PlatformIO extension for VS Code (see above). You will need to install a few libraries: Library Name Platform NeoPixelBus (2.6.0) All FastLED All ESPAsyncWebServer Aircoookie fork (2.0.0) All IRRemoteESP8266 All ESPAsyncTCP ESP8266 only ESPAsyncUDP ESP8266 only AsyncTCP for ESP32 ESP32 only LITTLEFS_esp32 * ESP32 only * Please see the installation guide . You might need to enable a define in the library code. All other dependencies are included with WLED for convenience. Now compile and flash the software! Make sure you erase everything when you flash! (If your board config does not provide this option, you can Sketch -> Export compiled Binary and upload with any ESP flashing tool .)","title":"Compilation guide (Arduino IDE, not recommended)"},{"location":"advanced/compiling-wled/#compilation-settings-arduino-ide","text":"ESP8266: Arduino Core v2.7.4 Board: NodeMCU 1.0 (ESP-12E module) (or select your ESP board) CPU frequency: 80 MHz Flash size : 4MB (1MB SPIFFS) LwIP variant: v1.4 Higher Bandwidth (try 2 if you experience issues) Upload speed: Any, 921600 recommended ESP8266-07 (External Antenna): Variants have 512kB or 1MB flash Be sure to use DOUT mode when flashing Flash Size 1MB (128k SPIFFS) 512kB variant no longer compatible ESP-07s (External Antenna): Variant has 4MB flash Settings as for NodeMCU or Wemos ESP32: Arduino Core v1.0.6","title":"Compilation settings (Arduino IDE)"},{"location":"advanced/custom-ap/","text":"Warning Note: These options change the documented access point name and password. The WLED community does not recommend changing these settings unless you are familiar with the risks. Three compile time defines are available to modify the access point name. These are WLED_AP_SSID , WLED_AP_PASS , and WLED_AP_SSID_UNIQUE . Defining WLED_AP_SSID will set the SSID to the value of the define. Defining WLED_AP_PASS will set the password to the value of the define. Defining WLED_AP_SSID_UNIQUE will append the last 6 digits of the MAC address to the SSID. WLED_AP_SSID and WLED_AP_PASS are string values, and as such need to be defined with \" surrounding them. For example, #define WLED_AP_SSID \"MyWLED\" or -D WLED_AP_SSID='\"MyWLED\"' in the build_flags of platformio.ini . Modifying the Access Point SSID Defining WLED_AP_SSID will set the SSID to the value of the define. This is useful to set a device specific access point name. For example, if you have multiple WLED devices, you can set the SSID to the device name. WLED_AP_SSID is a string value, and as such needs to be defined with \" surrounding it. For example, #define WLED_AP_SSID \"MyWLED\" or -D WLED_AP_SSID='\"MyWLED\"' in the build_flags of platformio.ini . Modifying the Access Point Password Defining WLED_AP_PASS will set the password to the value of the define. This is useful to set a device specific access point password. For example, if you have multiple WLED devices, you can set the password to the device name. Tip If WLED_AP_PASS is defined, but WLED_AP_SSID is not, the compilation will fail. Ensure you define both WLED_AP_SSID and WLED_AP_PASS if you wish to change the access point password. Please also change the SSID if you wish to set a custom password. WLED_AP_PASS is a string value, and as such needs to be defined with \" surrounding it. For example, #define WLED_AP_PASS \"MyWLEDPass\" or -D WLED_AP_PASS='\"MyWLEDPass\"' in the build_flags of platformio.ini . Modifying the Access Point SSID to be Unique Defining WLED_AP_SSID_UNIQUE will append the last 6 digits of the MAC address to the SSID. This is useful to set a device specific access point name with a common prefix. For example, if you have multiple WLED devices, you can set the SSID to ChristmasTree- followed by the last 6 digits of the MAC address. WLED_AP_SSID_UNIQUE is a boolean value, and as such only needs to be defined or not. For example, #define WLED_AP_SSID_UNIQUE or -D WLED_AP_SSID_UNIQUE in the build_flags of platformio.ini . Example For custom devices in platformio_override.ini : [env:mywled] board = esp32dev platform = ${esp32.platform} platform_packages = ${esp32.platform_packages} build_unflags = ${common.build_unflags} build_flags = ${common.build_flags_esp32} -D WLED_AP_SSID_UNIQUE -D WLED_AP_SSID = '\"MyWLED\"' -D WLED_AP_PASS = '\"MyWLEDPass\"' lib_deps = ${esp32.lib_deps} monitor_filters = esp32_exception_decoder board_build.partitions = ${esp32.default_partitions} In my_config.h : #define WLED_AP_SSID_UNIQUE #define WLED_AP_SSID \"MyWLED\" #define WLED_AP_PASS \"MyWLEDPass\"","title":"Custom Access Point Configuration"},{"location":"advanced/custom-ap/#modifying-the-access-point-ssid","text":"Defining WLED_AP_SSID will set the SSID to the value of the define. This is useful to set a device specific access point name. For example, if you have multiple WLED devices, you can set the SSID to the device name. WLED_AP_SSID is a string value, and as such needs to be defined with \" surrounding it. For example, #define WLED_AP_SSID \"MyWLED\" or -D WLED_AP_SSID='\"MyWLED\"' in the build_flags of platformio.ini .","title":"Modifying the Access Point SSID"},{"location":"advanced/custom-ap/#modifying-the-access-point-password","text":"Defining WLED_AP_PASS will set the password to the value of the define. This is useful to set a device specific access point password. For example, if you have multiple WLED devices, you can set the password to the device name. Tip If WLED_AP_PASS is defined, but WLED_AP_SSID is not, the compilation will fail. Ensure you define both WLED_AP_SSID and WLED_AP_PASS if you wish to change the access point password. Please also change the SSID if you wish to set a custom password. WLED_AP_PASS is a string value, and as such needs to be defined with \" surrounding it. For example, #define WLED_AP_PASS \"MyWLEDPass\" or -D WLED_AP_PASS='\"MyWLEDPass\"' in the build_flags of platformio.ini .","title":"Modifying the Access Point Password"},{"location":"advanced/custom-ap/#modifying-the-access-point-ssid-to-be-unique","text":"Defining WLED_AP_SSID_UNIQUE will append the last 6 digits of the MAC address to the SSID. This is useful to set a device specific access point name with a common prefix. For example, if you have multiple WLED devices, you can set the SSID to ChristmasTree- followed by the last 6 digits of the MAC address. WLED_AP_SSID_UNIQUE is a boolean value, and as such only needs to be defined or not. For example, #define WLED_AP_SSID_UNIQUE or -D WLED_AP_SSID_UNIQUE in the build_flags of platformio.ini .","title":"Modifying the Access Point SSID to be Unique"},{"location":"advanced/custom-ap/#example","text":"For custom devices in platformio_override.ini : [env:mywled] board = esp32dev platform = ${esp32.platform} platform_packages = ${esp32.platform_packages} build_unflags = ${common.build_unflags} build_flags = ${common.build_flags_esp32} -D WLED_AP_SSID_UNIQUE -D WLED_AP_SSID = '\"MyWLED\"' -D WLED_AP_PASS = '\"MyWLEDPass\"' lib_deps = ${esp32.lib_deps} monitor_filters = esp32_exception_decoder board_build.partitions = ${esp32.default_partitions} In my_config.h : #define WLED_AP_SSID_UNIQUE #define WLED_AP_SSID \"MyWLED\" #define WLED_AP_PASS \"MyWLEDPass\"","title":"Example"},{"location":"advanced/custom-features/","text":"Warning Note: this page is now out of date, see updated functionality in the code ( WLED/usermods/EXAMPLE_v2 ) This page is intended for those wishing to modify the WLED code to add their own functionality. Basics Programming is done in the Arduino IDE. There is a special file, usermod.cpp , to write your own code. (however, if you think your code may be relevant to many users, feel free to code it in directly and open a pull request) This file has three empty methods: - userSetup() is called after loading settings but before connecting to WiFi. Use it to start own interfaces if it does not depend on WiFi (IR, Sensors, GPIOs,...). Also you can use it to load custom settings or to specify own server pages with the server.on() method. - userConnected() is called once WiFi is connected. Use it to connect to external servers or init interfaces using wiFi. - userLoop() is called by the main loop() function. Modify WLED values If you know what you're doing, you may choose to change the value of any global variable declared in wled.h . However, for basic color and brightness changes, these are the most important: Variable Name Type Purpose bri byte (0-255) Master Brightness (0 is off, 255 is maximum) col[0] byte (0-255) Red color value col[1] byte (0-255) Green color value col[2] byte (0-255) Blue color value col[3] byte (0-255) White color value After updating the color, you must call the colorUpdated(int) method. If you want to send a notification with the new color to other ESPs, use colorUpdated(NOTIFIER_CALL_MODE_DIRECT_CHANGE) , otherwise colorUpdated(NOTIFIER_CALL_MODE_NO_NOTIFY) . Timing If you'd just like a simple modification that requires timing (like sending a request every 2 seconds), please never use the delay() function in your userLoop() ! It will block everything else and WLED will become unresponsive and effects won't work! Instead, try this instead: long lastTime = 0 ; int delayMs = 2000 ; //we want to do something every 2 seconds void userLoop () { if ( millis () - lastTime > delayMs ) { lastTime = millis (); //do something you want to do every 2 seconds } } Internal Segments API You can use Segments from your code to set different parts of the strip to different colors or effects. This can be very useful for highly customized installations, clocks, ... To set a segment, use strip.setSegment(id, start, stop); , where id is the segment ID, start is the first LED of the segment and stop is the LED after the last one in the segment. To edit the configuration of a segment, use: WS2812FX :: Segment & seg = strip . getSegment ( id ); //set color (i=0 is primary, i=1 secondary i=2 tertiary) seg . colors [ i ] = (( myWhite << 24 ) | (( myRed & 0xFF ) << 16 ) | (( myGreen & 0xFF ) << 8 ) | (( myBlue & 0xFF ))); //set effect config seg . mode = myFxI ; seg . speed = mySpeed ; seg . intensity = myIntensity ; seg . palette = myPaletteId ; Keep in mind that this will not cause interface updates as of 0.8.6. For that, you still need to use colorUpdated(NOTIFIER_CALL_MODE_DIRECT_CHANGE) Create custom effects It is possible to create your own effects and add them to the FX library. The relevant files for that are FX.cpp and FX.h . Here is a step-by-step guide on how to make your effect: Take a look at some of the effects in FX.cpp to see how they are implemented! Add your own routine in FX.cpp starting with: uint16_t WS2812FX::mode_custom Add to total number of effects in FX.h line 110: #define MODE_COUNT Add your mode number (ie #define FX_MODE_CUSTOM 110 ) in FX.h around line 200. Add your mode around line 400 of FX.h, like so: _mode[FX_MODE_CUSTOM] = &WS2812FX::mode_custom; Add it to the functions in FX.h around line 600: mode_custom(void), Give it a name at the bottom (10 modes per line) in JSON_mode_names[] . Wrap your name in quotes just like the others. Compile, upload and enjoy! Your new effect will automatically be added to the list in the web ui. If you programmed a nice effect you want to share, submit a pull request! Changing Web UI In order to conserve space, the Web UI interface is represented as a series of wled00/html_ui.h, wled00/html_settings.h and wled00/html_other.h files which contain C/C++ strings with specific parts of the Web UI. These files are automatically created from source files available in wled00/data folder. To generate files, install NodeJS 11.0+ globally. After that, recreate html_*.h files by running in the repo directory: > npm install > npm run build If you want to test changes to the UI, it is easiest to work with the local wled00/data/index.htm file. You just need to enter the IP address of a WLED 0.10.0 or newer instance into the popup. If you accidentally input an incorrect IP or want to test with a different instance, clear the local storage (in Chrome: Developer Tools -> Application -> Local Storage) If you continuously modify files in the wled00/data directory, you want to monitor these changes to make local html_*.h files being updated automatically. To do this, run this in repo directory: > npm run dev This will start monitoring wled00/data folder for changes. WARNING!! Be careful with changing the javascript in HTML files! For example function GetV() {} must be the last javascript function in the <script> element as it will be replaced by automatically generated code to fetch relevant settings from EEPROM. See tools/cdata.js for the replacement rules which run for every *.htm file in wled00/data . Recompile and flash WLED!","title":"Custom Features"},{"location":"advanced/custom-features/#basics","text":"Programming is done in the Arduino IDE. There is a special file, usermod.cpp , to write your own code. (however, if you think your code may be relevant to many users, feel free to code it in directly and open a pull request) This file has three empty methods: - userSetup() is called after loading settings but before connecting to WiFi. Use it to start own interfaces if it does not depend on WiFi (IR, Sensors, GPIOs,...). Also you can use it to load custom settings or to specify own server pages with the server.on() method. - userConnected() is called once WiFi is connected. Use it to connect to external servers or init interfaces using wiFi. - userLoop() is called by the main loop() function.","title":"Basics"},{"location":"advanced/custom-features/#modify-wled-values","text":"If you know what you're doing, you may choose to change the value of any global variable declared in wled.h . However, for basic color and brightness changes, these are the most important: Variable Name Type Purpose bri byte (0-255) Master Brightness (0 is off, 255 is maximum) col[0] byte (0-255) Red color value col[1] byte (0-255) Green color value col[2] byte (0-255) Blue color value col[3] byte (0-255) White color value After updating the color, you must call the colorUpdated(int) method. If you want to send a notification with the new color to other ESPs, use colorUpdated(NOTIFIER_CALL_MODE_DIRECT_CHANGE) , otherwise colorUpdated(NOTIFIER_CALL_MODE_NO_NOTIFY) .","title":"Modify WLED values"},{"location":"advanced/custom-features/#timing","text":"If you'd just like a simple modification that requires timing (like sending a request every 2 seconds), please never use the delay() function in your userLoop() ! It will block everything else and WLED will become unresponsive and effects won't work! Instead, try this instead: long lastTime = 0 ; int delayMs = 2000 ; //we want to do something every 2 seconds void userLoop () { if ( millis () - lastTime > delayMs ) { lastTime = millis (); //do something you want to do every 2 seconds } }","title":"Timing"},{"location":"advanced/custom-features/#internal-segments-api","text":"You can use Segments from your code to set different parts of the strip to different colors or effects. This can be very useful for highly customized installations, clocks, ... To set a segment, use strip.setSegment(id, start, stop); , where id is the segment ID, start is the first LED of the segment and stop is the LED after the last one in the segment. To edit the configuration of a segment, use: WS2812FX :: Segment & seg = strip . getSegment ( id ); //set color (i=0 is primary, i=1 secondary i=2 tertiary) seg . colors [ i ] = (( myWhite << 24 ) | (( myRed & 0xFF ) << 16 ) | (( myGreen & 0xFF ) << 8 ) | (( myBlue & 0xFF ))); //set effect config seg . mode = myFxI ; seg . speed = mySpeed ; seg . intensity = myIntensity ; seg . palette = myPaletteId ; Keep in mind that this will not cause interface updates as of 0.8.6. For that, you still need to use colorUpdated(NOTIFIER_CALL_MODE_DIRECT_CHANGE)","title":"Internal Segments API"},{"location":"advanced/custom-features/#create-custom-effects","text":"It is possible to create your own effects and add them to the FX library. The relevant files for that are FX.cpp and FX.h . Here is a step-by-step guide on how to make your effect: Take a look at some of the effects in FX.cpp to see how they are implemented! Add your own routine in FX.cpp starting with: uint16_t WS2812FX::mode_custom Add to total number of effects in FX.h line 110: #define MODE_COUNT Add your mode number (ie #define FX_MODE_CUSTOM 110 ) in FX.h around line 200. Add your mode around line 400 of FX.h, like so: _mode[FX_MODE_CUSTOM] = &WS2812FX::mode_custom; Add it to the functions in FX.h around line 600: mode_custom(void), Give it a name at the bottom (10 modes per line) in JSON_mode_names[] . Wrap your name in quotes just like the others. Compile, upload and enjoy! Your new effect will automatically be added to the list in the web ui. If you programmed a nice effect you want to share, submit a pull request!","title":"Create custom effects"},{"location":"advanced/custom-features/#changing-web-ui","text":"In order to conserve space, the Web UI interface is represented as a series of wled00/html_ui.h, wled00/html_settings.h and wled00/html_other.h files which contain C/C++ strings with specific parts of the Web UI. These files are automatically created from source files available in wled00/data folder. To generate files, install NodeJS 11.0+ globally. After that, recreate html_*.h files by running in the repo directory: > npm install > npm run build If you want to test changes to the UI, it is easiest to work with the local wled00/data/index.htm file. You just need to enter the IP address of a WLED 0.10.0 or newer instance into the popup. If you accidentally input an incorrect IP or want to test with a different instance, clear the local storage (in Chrome: Developer Tools -> Application -> Local Storage) If you continuously modify files in the wled00/data directory, you want to monitor these changes to make local html_*.h files being updated automatically. To do this, run this in repo directory: > npm run dev This will start monitoring wled00/data folder for changes. WARNING!! Be careful with changing the javascript in HTML files! For example function GetV() {} must be the last javascript function in the <script> element as it will be replaced by automatically generated code to fetch relevant settings from EEPROM. See tools/cdata.js for the replacement rules which run for every *.htm file in wled00/data . Recompile and flash WLED!","title":"Changing Web UI"},{"location":"advanced/ddp/","text":"Overview Docs in process... Virtual LEDs allow you to \"attach\" LEDs from multiple ESPs to a main, controlling ESP. These LEDs can be added to an ESP just like physical pins in Config, LED Preferences. Choose one ESP to be the main then add the others to it by adding a pin, selecting DDP RGB (Network), entering the Length (number of LEDs on that remote ESP), then enter the ESPs IP address. Note: The controlling ESP must be running at least 0.13 firmware while the remotes can be older. As usual, best perfomance is obtained by using an ESP32 for the controlling device. You can use an ESP8266, but only with a small number of LEDs (<300).","title":"Virtual LEDs"},{"location":"advanced/ddp/#overview","text":"Docs in process... Virtual LEDs allow you to \"attach\" LEDs from multiple ESPs to a main, controlling ESP. These LEDs can be added to an ESP just like physical pins in Config, LED Preferences. Choose one ESP to be the main then add the others to it by adding a pin, selecting DDP RGB (Network), entering the Length (number of LEDs on that remote ESP), then enter the ESPs IP address. Note: The controlling ESP must be running at least 0.13 firmware while the remotes can be older. As usual, best perfomance is obtained by using an ESP32 for the controlling device. You can use an ESP8266, but only with a small number of LEDs (<300).","title":"Overview"},{"location":"advanced/esp32-recovery/","text":"In Platformio IDE open a new terminal and type: pio run -v -t upload When you see the \" Connecting........ \" abort the upload. Below you can see Esptool commands, that was used by Platformio. Now you able to find all files that we need to build the binary (screenshot for visualization): Download the official ESP Flash Download Tool : https://www.espressif.com/en/support/download/other-tools Start it and select Developer Mode > ESP32 Download Tool . Prepare files and memory addresses according picture below: Click button \u201c CombineBin \u201d. Now you have your binary file with Bootloader .","title":"ESP32 Recovery"},{"location":"advanced/home-automation/","text":"It is possible to interface WLED with home automation systems and other 3rd party software. You can use any API WLED provides (JSON, HTTP, UDP, MQTT), JSON is preferred. This page is intended for sample code and configs others use to control WLED from various 3rd party software: HomeAssistant and NodeRED flows Domoticz: Please see here ! Home Assistant Using the native integration Compatibility notice WLED devices are not supported by Home Assistant 2022.2 or later if a CCT bus is configured or White Balance Correction is enabled. We hope to resolve this issue as soon as possible. As a temporary workaround you can enable the option Calculate CCT from RGB in LED settings. WLED can be configured using the integrations in the Home Assistant frontend. Menu: Configuration -> Integrations . In most cases, the WLED devices will be automatically discovered by Home Assistant. Those automatically discovered WLED devices are listed on the integrations page. If for some reason (e.g., due to lack of mDNS support on your network), the WLED device isn't discovered, it can be added manually. Click on the + sign to add an integration and click on WLED . After completing the configuration flow, the WLED integration will be available. WLED integration documentation Using MQTT Alternatively, MQTT can be used (not recommended). Auto discovery is no longer supported since version 0.9 of WLED. In case you want to configure the device manually: Expand to show MQTT configuration light: - platform: mqtt name: \"Kitchen Floor Lights\" command_topic: \"wled/all\" brightness_command_topic: \"wled/all\" rgb_command_topic: \"wled/all/col\" rgb_command_template: \"{{ '#%02x%02x%02x' | format(red, green, blue)}}\" effect_command_topic : \"wled/all/api\" effect_list: - \"FX=0\" - \"FX=1\" - \"FX=2\" - \"FX=3\" - \"FX=4\" - \"FX=5\" - \"FX=6\" - \"FX=7\" - \"FX=8\" - \"FX=9\" - \"FX=10\" - \"FX=11\" - \"FX=12\" - \"FX=13\" - \"FX=14\" - \"FX=15\" - \"FX=16\" - \"FX=17\" - \"FX=18\" - \"FX=19\" - \"FX=20\" - \"FX=21\" - \"FX=22\" - \"FX=23\" - \"FX=24\" - \"FX=25\" - \"FX=26\" - \"FX=27\" - \"FX=28\" - \"FX=29\" - \"FX=30\" - \"FX=31\" - \"FX=32\" - \"FX=33\" - \"FX=34\" - \"FX=35\" - \"FX=36\" - \"FX=37\" - \"FX=38\" - \"FX=39\" - \"FX=40\" by @acid2000 Config json which is sent via autodiscovery: { \"name\" : \"WLED Light\" , \"stat_t\" : \"wled/840d8e989815/c\" , \"cmd_t\" : \"wled/840d8e989815\" , \"rgb_stat_t\" : \"wled/840d8e989815/c\" , \"rgb_cmd_t\" : \"wled/840d8e989815/col\" , \"bri_cmd_t\" : \"wled/840d8e989815\" , \"bri_stat_t\" : \"wled/840d8e989815/g\" , \"fx_cmd_t\" : \"wled/840d8e989815/api\" , \"fx_stat_t\" : \"wled/840d8e989815/api\" , \"bri_val_tpl\" : \"{{value}}\" , \"rgb_cmd_tpl\" : \"{{'#%02x%02x%02x' | format(red, green, blue)}}\" , \"rgb_val_tpl\" : \"{{value[1:3]|int(base=16)}},{{value[3:5]|int(base=16)}},{{value[5:7]|int(base=16)}}\" , \"qos\" : 0 , \"opt\" : true , \"pl_on\" : \"ON\" , \"pl_off\" : \"OFF\" , \"fx_val_tpl\" : \"{{value}}\" , \"fx_list\" : [ \"[FX=00] Solid\" , \"[FX=01] Blink\" , \"[FX=02] Breathe\" , \"[FX=03] Wipe\" , \"[FX=04] Wipe Random\" , \"[FX=05] Random Colors\" , \"[FX=06] Sweep\" , \"[FX=07] Dynamic\" , \"[FX=08] Colorloop\" , \"[FX=09] Rainbow\" , \"[FX=10] Scan\" , \"[FX=11] Dual Scan\" , \"[FX=12] Fade\" , \"[FX=13] Chase\" , \"[FX=14] Chase Rainbow\" , \"[FX=15] Running\" , \"[FX=16] Saw\" , \"[FX=17] Twinkle\" , \"[FX=18] Dissolve\" , \"[FX=19] Dissolve Rnd\" , \"[FX=20] Sparkle\" , \"[FX=21] Dark Sparkle\" , \"[FX=22] Sparkle+\" , \"[FX=23] Strobe\" , \"[FX=24] Strobe Rainbow\" , \"[FX=25] Mega Strobe\" , \"[FX=26] Blink Rainbow\" , \"[FX=27] Android\" , \"[FX=28] Chase\" , \"[FX=29] Chase Random\" , \"[FX=30] Chase Rainbow\" , \"[FX=31] Chase Flash\" , \"[FX=32] Chase Flash Rnd\" , \"[FX=33] Rainbow Runner\" , \"[FX=34] Colorful\" , \"[FX=35] Traffic Light\" , \"[FX=36] Sweep Random\" , \"[FX=37] Running 2\" , \"[FX=38] Red & Blue\" , \"[FX=39] Stream\" , \"[FX=40] Scanner\" , \"[FX=41] Lighthouse\" , \"[FX=42] Fireworks\" , \"[FX=43] Rain\" , \"[FX=44] Merry Christmas\" , \"[FX=45] Fire Flicker\" , \"[FX=46] Gradient\" , \"[FX=47] Loading\" , \"[FX=48] In Out\" , \"[FX=49] In In\" , \"[FX=50] Out Out\" , \"[FX=51] Out In\" , \"[FX=52] Circus\" , \"[FX=53] Halloween\" , \"[FX=54] Tri Chase\" , \"[FX=55] Tri Wipe\" , \"[FX=56] Tri Fade\" , \"[FX=57] Lightning\" , \"[FX=58] ICU\" , \"[FX=59] Multi Comet\" , \"[FX=60] Dual Scanner\" , \"[FX=61] Stream 2\" , \"[FX=62] Oscillate\" , \"[FX=63] Pride 2015\" , \"[FX=64] Juggle\" , \"[FX=65] Palette\" , \"[FX=66] Fire 2012\" , \"[FX=67] Colorwaves\" , \"[FX=68] BPM\" , \"[FX=69] Fill Noise\" , \"[FX=70] Noise 1\" , \"[FX=71] Noise 2\" , \"[FX=72] Noise 3\" , \"[FX=73] Noise 4\" , \"[FX=74] Colortwinkle\" , \"[FX=75] Lake\" , \"[FX=76] Meteor\" , \"[FX=77] Smooth Meteor\" , \"[FX=78] Railway\" , \"[FX=79] Ripple\" ] } Indigo Domotics: Please see here ! openHAB: In openHAB 3 based environments you are able to use the native openHAB WLED Binding , which also supports discovery of your WLED devices. For older openHAB (2.5.x) environmantes the connection can be configured via MQTT broker & Openhab MQTT Binding (2.5x) with configuration files Please find the details here","title":"Home Automation"},{"location":"advanced/home-automation/#domoticz","text":"Please see here !","title":"Domoticz:"},{"location":"advanced/home-automation/#home-assistant","text":"","title":"Home Assistant"},{"location":"advanced/home-automation/#using-the-native-integration","text":"Compatibility notice WLED devices are not supported by Home Assistant 2022.2 or later if a CCT bus is configured or White Balance Correction is enabled. We hope to resolve this issue as soon as possible. As a temporary workaround you can enable the option Calculate CCT from RGB in LED settings. WLED can be configured using the integrations in the Home Assistant frontend. Menu: Configuration -> Integrations . In most cases, the WLED devices will be automatically discovered by Home Assistant. Those automatically discovered WLED devices are listed on the integrations page. If for some reason (e.g., due to lack of mDNS support on your network), the WLED device isn't discovered, it can be added manually. Click on the + sign to add an integration and click on WLED . After completing the configuration flow, the WLED integration will be available. WLED integration documentation","title":"Using the native integration"},{"location":"advanced/home-automation/#using-mqtt","text":"Alternatively, MQTT can be used (not recommended). Auto discovery is no longer supported since version 0.9 of WLED. In case you want to configure the device manually: Expand to show MQTT configuration light: - platform: mqtt name: \"Kitchen Floor Lights\" command_topic: \"wled/all\" brightness_command_topic: \"wled/all\" rgb_command_topic: \"wled/all/col\" rgb_command_template: \"{{ '#%02x%02x%02x' | format(red, green, blue)}}\" effect_command_topic : \"wled/all/api\" effect_list: - \"FX=0\" - \"FX=1\" - \"FX=2\" - \"FX=3\" - \"FX=4\" - \"FX=5\" - \"FX=6\" - \"FX=7\" - \"FX=8\" - \"FX=9\" - \"FX=10\" - \"FX=11\" - \"FX=12\" - \"FX=13\" - \"FX=14\" - \"FX=15\" - \"FX=16\" - \"FX=17\" - \"FX=18\" - \"FX=19\" - \"FX=20\" - \"FX=21\" - \"FX=22\" - \"FX=23\" - \"FX=24\" - \"FX=25\" - \"FX=26\" - \"FX=27\" - \"FX=28\" - \"FX=29\" - \"FX=30\" - \"FX=31\" - \"FX=32\" - \"FX=33\" - \"FX=34\" - \"FX=35\" - \"FX=36\" - \"FX=37\" - \"FX=38\" - \"FX=39\" - \"FX=40\" by @acid2000 Config json which is sent via autodiscovery: { \"name\" : \"WLED Light\" , \"stat_t\" : \"wled/840d8e989815/c\" , \"cmd_t\" : \"wled/840d8e989815\" , \"rgb_stat_t\" : \"wled/840d8e989815/c\" , \"rgb_cmd_t\" : \"wled/840d8e989815/col\" , \"bri_cmd_t\" : \"wled/840d8e989815\" , \"bri_stat_t\" : \"wled/840d8e989815/g\" , \"fx_cmd_t\" : \"wled/840d8e989815/api\" , \"fx_stat_t\" : \"wled/840d8e989815/api\" , \"bri_val_tpl\" : \"{{value}}\" , \"rgb_cmd_tpl\" : \"{{'#%02x%02x%02x' | format(red, green, blue)}}\" , \"rgb_val_tpl\" : \"{{value[1:3]|int(base=16)}},{{value[3:5]|int(base=16)}},{{value[5:7]|int(base=16)}}\" , \"qos\" : 0 , \"opt\" : true , \"pl_on\" : \"ON\" , \"pl_off\" : \"OFF\" , \"fx_val_tpl\" : \"{{value}}\" , \"fx_list\" : [ \"[FX=00] Solid\" , \"[FX=01] Blink\" , \"[FX=02] Breathe\" , \"[FX=03] Wipe\" , \"[FX=04] Wipe Random\" , \"[FX=05] Random Colors\" , \"[FX=06] Sweep\" , \"[FX=07] Dynamic\" , \"[FX=08] Colorloop\" , \"[FX=09] Rainbow\" , \"[FX=10] Scan\" , \"[FX=11] Dual Scan\" , \"[FX=12] Fade\" , \"[FX=13] Chase\" , \"[FX=14] Chase Rainbow\" , \"[FX=15] Running\" , \"[FX=16] Saw\" , \"[FX=17] Twinkle\" , \"[FX=18] Dissolve\" , \"[FX=19] Dissolve Rnd\" , \"[FX=20] Sparkle\" , \"[FX=21] Dark Sparkle\" , \"[FX=22] Sparkle+\" , \"[FX=23] Strobe\" , \"[FX=24] Strobe Rainbow\" , \"[FX=25] Mega Strobe\" , \"[FX=26] Blink Rainbow\" , \"[FX=27] Android\" , \"[FX=28] Chase\" , \"[FX=29] Chase Random\" , \"[FX=30] Chase Rainbow\" , \"[FX=31] Chase Flash\" , \"[FX=32] Chase Flash Rnd\" , \"[FX=33] Rainbow Runner\" , \"[FX=34] Colorful\" , \"[FX=35] Traffic Light\" , \"[FX=36] Sweep Random\" , \"[FX=37] Running 2\" , \"[FX=38] Red & Blue\" , \"[FX=39] Stream\" , \"[FX=40] Scanner\" , \"[FX=41] Lighthouse\" , \"[FX=42] Fireworks\" , \"[FX=43] Rain\" , \"[FX=44] Merry Christmas\" , \"[FX=45] Fire Flicker\" , \"[FX=46] Gradient\" , \"[FX=47] Loading\" , \"[FX=48] In Out\" , \"[FX=49] In In\" , \"[FX=50] Out Out\" , \"[FX=51] Out In\" , \"[FX=52] Circus\" , \"[FX=53] Halloween\" , \"[FX=54] Tri Chase\" , \"[FX=55] Tri Wipe\" , \"[FX=56] Tri Fade\" , \"[FX=57] Lightning\" , \"[FX=58] ICU\" , \"[FX=59] Multi Comet\" , \"[FX=60] Dual Scanner\" , \"[FX=61] Stream 2\" , \"[FX=62] Oscillate\" , \"[FX=63] Pride 2015\" , \"[FX=64] Juggle\" , \"[FX=65] Palette\" , \"[FX=66] Fire 2012\" , \"[FX=67] Colorwaves\" , \"[FX=68] BPM\" , \"[FX=69] Fill Noise\" , \"[FX=70] Noise 1\" , \"[FX=71] Noise 2\" , \"[FX=72] Noise 3\" , \"[FX=73] Noise 4\" , \"[FX=74] Colortwinkle\" , \"[FX=75] Lake\" , \"[FX=76] Meteor\" , \"[FX=77] Smooth Meteor\" , \"[FX=78] Railway\" , \"[FX=79] Ripple\" ] }","title":"Using MQTT"},{"location":"advanced/home-automation/#indigo-domotics","text":"Please see here !","title":"Indigo Domotics:"},{"location":"advanced/home-automation/#openhab","text":"In openHAB 3 based environments you are able to use the native openHAB WLED Binding , which also supports discovery of your WLED devices. For older openHAB (2.5.x) environmantes the connection can be configured via MQTT broker & Openhab MQTT Binding (2.5x) with configuration files Please find the details here","title":"openHAB:"},{"location":"advanced/longdata/","text":"Long Data Line configurations Addressable LEDs are controlled over a data line(s) based on 5V TTL (Transistor-Transistor-Logic) signals. Over long distances (> 5m) keeping those signals \"clean\" and well defined for the LED they're meant to drive can be difficult. While there are many methods used to get good results over 10m and longer runs (in-line resistors, voltage boosters, sacrificial pixels, etc.) they are often problematic and unreliable. There is a method specifically designed to send high speed (~1Mhz) TTL data over long (10's to 100's of meter) distances: using a differential pair. Commonly known as RS485, differential pair transmission for LED's takes the single data line from your MCU (ESP32, ESP8266, etc) and translates that into a differential signal that is sent across two wires instead of one. A transmitter unit (Tx) at the MCU takes in the single data signal and outputs 2 lines usually called A+ and B-. At the LED strip a matching receiver unit (Rx) takes the A+, B- signals as inputs and outputs clean and accurate 5V LED data that can directly feed the strip. The only thing that needs to connect the TxRx pair is a pair of wires and a common ground. The wires don't carry much current at all (~50mA) and can often be a light wire pair from a length of Cat5e or 22/4 alarm wire. The distance between the Tx and Rx devices can easily be 30m. With Cat5e UTP wire you can reliably reach 150m or more. Note, there is no need for a level shifter with the Tx module. Typical transmitters are spec'd for a minimum 2.4V High level input which is well within the output range of a 3.3V MCU. The only other thing to note about the TxRx pair is that they usually require 5V to operate and often have a 120 ohm termination resistor across the A+,B- connections. Those resistors are important to maintain the integrity of the transmitted data. A TxRx pair can also be used in the middle of a run of LED's when the distance to the next strip is long. Just put a Tx unit at the end of the first strip and the Rx unit at the start of the next strip. The individual Tx and Rx units are fairly inexpensive and can found on Amazon or via Aliexpress usually for less than $2 USD each (try \"RS485 TTL interface\").","title":"Long Data Lines"},{"location":"advanced/longdata/#long-data-line-configurations","text":"Addressable LEDs are controlled over a data line(s) based on 5V TTL (Transistor-Transistor-Logic) signals. Over long distances (> 5m) keeping those signals \"clean\" and well defined for the LED they're meant to drive can be difficult. While there are many methods used to get good results over 10m and longer runs (in-line resistors, voltage boosters, sacrificial pixels, etc.) they are often problematic and unreliable. There is a method specifically designed to send high speed (~1Mhz) TTL data over long (10's to 100's of meter) distances: using a differential pair. Commonly known as RS485, differential pair transmission for LED's takes the single data line from your MCU (ESP32, ESP8266, etc) and translates that into a differential signal that is sent across two wires instead of one. A transmitter unit (Tx) at the MCU takes in the single data signal and outputs 2 lines usually called A+ and B-. At the LED strip a matching receiver unit (Rx) takes the A+, B- signals as inputs and outputs clean and accurate 5V LED data that can directly feed the strip. The only thing that needs to connect the TxRx pair is a pair of wires and a common ground. The wires don't carry much current at all (~50mA) and can often be a light wire pair from a length of Cat5e or 22/4 alarm wire. The distance between the Tx and Rx devices can easily be 30m. With Cat5e UTP wire you can reliably reach 150m or more. Note, there is no need for a level shifter with the Tx module. Typical transmitters are spec'd for a minimum 2.4V High level input which is well within the output range of a 3.3V MCU. The only other thing to note about the TxRx pair is that they usually require 5V to operate and often have a 120 ohm termination resistor across the A+,B- connections. Those resistors are important to maintain the integrity of the transmitted data. A TxRx pair can also be used in the middle of a run of LED's when the distance to the next strip is long. Just put a Tx unit at the end of the first strip and the Rx unit at the start of the next strip. The individual Tx and Rx units are fairly inexpensive and can found on Amazon or via Aliexpress usually for less than $2 USD each (try \"RS485 TTL interface\").","title":"Long Data Line configurations"},{"location":"advanced/mapping/","text":"WLED now has the ability to remap your LED strip programmatically. What is it? This allows us to treat the WLED strip as if it is wired in any way - we can then use the mapping feature to address the strip in any order. This allows for matrix support, serpentine runs and such. How do we do it? Navigate to the edit page for your WLED device by adding /edit to its' address - for example, https://my-led-device.local/edit Use this edit page to create a file called ledmap.json . ledmap.json file needs to be a JSON formatted file with the the key being \"map\" and the value being an array of numbers representing the new order of pixels. The position of values in the array is the \"natural\" order of LEDs and the value entered is the new position. The ArduinoJSON library is * extremely *** white-space sensitive. If your ledmap.json file is not working, check for white-spaces where they should not be. The LED positions are zero-indexed. Multiple maps are supported in the latest versions by using ledmapx.json where x is a number. Maps can be selected in a preset using {\"ledmap\":x,... . Examples In the below example (formatted multiple ways), we remap a strip of four LEDs from a physical order of 0 1 2 3 into a new order of 0 2 1 3. {\"map\":[0,2,1,3]} {\"map\":[ 0,2,1,3 ]} {\"map\":[ 0,2, 1,3 ]} This is another example that switches direction every 5 LEDs. It could be formatted any of the three ways demonstrated above. { \"map\" :[ 0 , 1 , 2 , 3 , 4 , 9 , 8 , 7 , 6 , 5 , 10 , 11 , 12 , 13 , 14 , 19 , 18 , 17 , 16 , 15 , 20 , 21 , 22 , 23 , 24 , 29 , 28 , 27 , 26 , 25 ]}","title":"Mapping"},{"location":"advanced/mapping/#what-is-it","text":"This allows us to treat the WLED strip as if it is wired in any way - we can then use the mapping feature to address the strip in any order. This allows for matrix support, serpentine runs and such.","title":"What is it?"},{"location":"advanced/mapping/#how-do-we-do-it","text":"Navigate to the edit page for your WLED device by adding /edit to its' address - for example, https://my-led-device.local/edit Use this edit page to create a file called ledmap.json . ledmap.json file needs to be a JSON formatted file with the the key being \"map\" and the value being an array of numbers representing the new order of pixels. The position of values in the array is the \"natural\" order of LEDs and the value entered is the new position. The ArduinoJSON library is * extremely *** white-space sensitive. If your ledmap.json file is not working, check for white-spaces where they should not be. The LED positions are zero-indexed. Multiple maps are supported in the latest versions by using ledmapx.json where x is a number. Maps can be selected in a preset using {\"ledmap\":x,... .","title":"How do we do it?"},{"location":"advanced/mapping/#examples","text":"In the below example (formatted multiple ways), we remap a strip of four LEDs from a physical order of 0 1 2 3 into a new order of 0 2 1 3. {\"map\":[0,2,1,3]} {\"map\":[ 0,2,1,3 ]} {\"map\":[ 0,2, 1,3 ]} This is another example that switches direction every 5 LEDs. It could be formatted any of the three ways demonstrated above. { \"map\" :[ 0 , 1 , 2 , 3 , 4 , 9 , 8 , 7 , 6 , 5 , 10 , 11 , 12 , 13 , 14 , 19 , 18 , 17 , 16 , 15 , 20 , 21 , 22 , 23 , 24 , 29 , 28 , 27 , 26 , 25 ]}","title":"Examples"},{"location":"advanced/remote-access-ifttt/","text":"WLED is an open-source, DIY software. This means all services are hosted locally on your ESP8266. Because of this, you can only control your lights from within your local (home) network. If you need to control WLED from anywhere (the public internet) you can do so in multiple ways, some requiring additional hardware: 1. Use Blynk From version 0.7.1, WLED supports the free IoT cloud Blynk! See this for details! It has a nice app for you to control the lights from anywhere! 2. Use an Amazon Echo device If you have set up your Alexa device to control WLED, you can just use the Alexa App or another Echo device linked to your account to control your lights (on/off and brightness only) 3. Create a Port Forwarding Warning: An insecure HTTP connection is used, please do NOT edit sensitive info like the WiFi settings when connected via the port forwarding! This method offers more flexibility, but is also more involved. Keep in mind this causes anyone with your IP address to have access to your ESP8266! Setting up an OTA lock password is a must to prevent attackers from acquiring your WiFi credentials! To expose WLED to the internet, create a port forwarding for your ESP's IP in your router configuration. If your public IP changes a lot, make sure to also use a dynamic DNS service so your lights are always accessible. Unsure what any of this means or how to do it? Google for \"[your router model] port forwarding\"! Additionally, this opens up many new possibilities for automation! You can use a service like IFTTT Webhooks to send automated WLED API calls that can do anything from turning on the lights at a set time to changing their color if you get a new email! 4. Use hue sync If you have a Philips hue setup and sync WLED to it, you can control your WLED lights in any way it's possible to control your hue lights (hue App, Alexa (including colors), any other service that uses Philips hue API)","title":"Remote Access / IFTTT"},{"location":"advanced/remote-access-ifttt/#1-use-blynk","text":"From version 0.7.1, WLED supports the free IoT cloud Blynk! See this for details! It has a nice app for you to control the lights from anywhere!","title":"1. Use Blynk"},{"location":"advanced/remote-access-ifttt/#2-use-an-amazon-echo-device","text":"If you have set up your Alexa device to control WLED, you can just use the Alexa App or another Echo device linked to your account to control your lights (on/off and brightness only)","title":"2. Use an Amazon Echo device"},{"location":"advanced/remote-access-ifttt/#3-create-a-port-forwarding","text":"Warning: An insecure HTTP connection is used, please do NOT edit sensitive info like the WiFi settings when connected via the port forwarding! This method offers more flexibility, but is also more involved. Keep in mind this causes anyone with your IP address to have access to your ESP8266! Setting up an OTA lock password is a must to prevent attackers from acquiring your WiFi credentials! To expose WLED to the internet, create a port forwarding for your ESP's IP in your router configuration. If your public IP changes a lot, make sure to also use a dynamic DNS service so your lights are always accessible. Unsure what any of this means or how to do it? Google for \"[your router model] port forwarding\"! Additionally, this opens up many new possibilities for automation! You can use a service like IFTTT Webhooks to send automated WLED API calls that can do anything from turning on the lights at a set time to changing their color if you get a new email!","title":"3. Create a Port Forwarding"},{"location":"advanced/remote-access-ifttt/#4-use-hue-sync","text":"If you have a Philips hue setup and sync WLED to it, you can control your WLED lights in any way it's possible to control your hue lights (hue App, Alexa (including colors), any other service that uses Philips hue API)","title":"4. Use hue sync"},{"location":"advanced/security/","text":"WLED was designed in a way that you should be safe to have a router port forwarding to control the system from the public internet. This page will tell you what you can expect by WLEDs security. TLDR - what to do? A: If you just operate WLED within a local network and/or with a secured Access Point (change the default password \"wled1234\"!!) you are fine. If you have configured a port forwarding to control WLED from outside your local subnet, please make sure the setting \"OTA Lock\" is enabled and you have changed the default OTA password \"wledota\"! Also, NEVER edit sensitive data (like WiFi credentials) while connected via the port forwarding! 1: Is the connection itself safe? A: Technically not. The ESP8266 uses unencrypted HTTP traffic. Implementing HTTPS would take too much processing power and memory on this little device. This means an attacker could read your passwords during transmit. Therefore, to be safe, please do NOT change the AP/Client WiFi/OTA password from outside of your LAN via a forwarded port. If you are at home, you should be safe if your WiFi is secured. You can change any other setting while you're away, though. WLED doesn't send your actual password to the settings page, just its length. 2: What do you mean by secure then? A: WLED comes with the ability to carry out a software update via WiFi (OTA). However, no one must be able to flash a malicious new binary firmware to steal your WiFi credentials or make your ESP part of a botnet. Therefore, you should enable the \"OTA Lock\" setting and change its default passphrase \"wledota\". 3: Can I protect the light configuration or the settings page? A: Currently not. This is not sensitive information like your WiFi password. Anyone with your IP and port can control the lights. Open an issue if it should ever happen that somebody plays with your lights. I might consider adding an optional password lock then. For now, it is way too cumbersome for what it does. 4: I want to do a software update, but it says \"OTA lock active\"? A: You need to go to the settings page. Untick the \"OTA Lock\" setting and input your passphrase in the field below it. Now apply the settings and reboot. After that you can carry out the software update. Don't forget to re-enable OTA Lock afterwards! To enable, you don't have to enter the passphrase, unless you want to change it. For the lock to work you need to apply and reboot again. 5: Why is this OTA lock stuff that important? A: Your unencrypted WiFi password is stored in the module's EEPROM. It would be easy to \"update\" the software to a malicious version which sends your password to the attacker. OTA Lock makes sure only those with the passphrase may carry out a software update. And yes, while you can disable OTA lock by doing a factory reset, this would also kill the WiFi connection to the attacker. 6: Anything else? A: A personal tip from me is not to give anyone your IP to control the software who you do not wish to do so on a regular basis. It is not critical from a security standpoint, but it can be very annoying if someone plays with your lights, or even worse, change your AP credentials to the point where you can no longer access the module except via USB.","title":"Security"},{"location":"advanced/security/#tldr-what-to-do","text":"A: If you just operate WLED within a local network and/or with a secured Access Point (change the default password \"wled1234\"!!) you are fine. If you have configured a port forwarding to control WLED from outside your local subnet, please make sure the setting \"OTA Lock\" is enabled and you have changed the default OTA password \"wledota\"! Also, NEVER edit sensitive data (like WiFi credentials) while connected via the port forwarding!","title":"TLDR - what to do?"},{"location":"advanced/security/#1-is-the-connection-itself-safe","text":"A: Technically not. The ESP8266 uses unencrypted HTTP traffic. Implementing HTTPS would take too much processing power and memory on this little device. This means an attacker could read your passwords during transmit. Therefore, to be safe, please do NOT change the AP/Client WiFi/OTA password from outside of your LAN via a forwarded port. If you are at home, you should be safe if your WiFi is secured. You can change any other setting while you're away, though. WLED doesn't send your actual password to the settings page, just its length.","title":"1: Is the connection itself safe?"},{"location":"advanced/security/#2-what-do-you-mean-by-secure-then","text":"A: WLED comes with the ability to carry out a software update via WiFi (OTA). However, no one must be able to flash a malicious new binary firmware to steal your WiFi credentials or make your ESP part of a botnet. Therefore, you should enable the \"OTA Lock\" setting and change its default passphrase \"wledota\".","title":"2: What do you mean by secure then?"},{"location":"advanced/security/#3-can-i-protect-the-light-configuration-or-the-settings-page","text":"A: Currently not. This is not sensitive information like your WiFi password. Anyone with your IP and port can control the lights. Open an issue if it should ever happen that somebody plays with your lights. I might consider adding an optional password lock then. For now, it is way too cumbersome for what it does.","title":"3: Can I protect the light configuration or the settings page?"},{"location":"advanced/security/#4-i-want-to-do-a-software-update-but-it-says-ota-lock-active","text":"A: You need to go to the settings page. Untick the \"OTA Lock\" setting and input your passphrase in the field below it. Now apply the settings and reboot. After that you can carry out the software update. Don't forget to re-enable OTA Lock afterwards! To enable, you don't have to enter the passphrase, unless you want to change it. For the lock to work you need to apply and reboot again.","title":"4: I want to do a software update, but it says \"OTA lock active\"?"},{"location":"advanced/security/#5-why-is-this-ota-lock-stuff-that-important","text":"A: Your unencrypted WiFi password is stored in the module's EEPROM. It would be easy to \"update\" the software to a malicious version which sends your password to the attacker. OTA Lock makes sure only those with the passphrase may carry out a software update. And yes, while you can disable OTA lock by doing a factory reset, this would also kill the WiFi connection to the attacker.","title":"5: Why is this OTA lock stuff that important?"},{"location":"advanced/security/#6-anything-else","text":"A: A personal tip from me is not to give anyone your IP to control the software who you do not wish to do so on a regular basis. It is not critical from a security standpoint, but it can be very annoying if someone plays with your lights, or even worse, change your AP credentials to the point where you can no longer access the module except via USB.","title":"6: Anything else?"},{"location":"advanced/wiring/","text":"Overview RGB LEDs can draw a lot of current (amps). While most people usually worry about the dangers from high voltage, low voltage + high amperage can be dangerous too, as it can easily become a fire hazard in certain circumstances . Depending on your setup size (the number of LEDs you want to drive), use these tips to help guide your wiring. There are plenty of guides out there to help with power supply selection , which is out of scope of this page. Size your power supply to your installation both up and down, so you both provide them with enough current and don't introduce unnecessary risk. It's better to power 30 LEDs from a 10W (2A @5V) power supply than a 100W power supply, as you don't need to worry about the potential for as much energy flowing through small wires. As you increase the number of LEDs, you increase the amps your power supply will need to be able to provide. The more amps you're working with, the more you need to be cautious about your wiring and fusing . For example, if you want to power your LEDs off a sealed lead acid battery (e.g. a car battery), you need to be very careful about current. These kinds of batteries can supply hundreds of amps, so you need to ensure that you use fuses along the way to protect against shorts. If you're using USB pocket chargers on the other hand, they tend to be current limited (most provide only 1-2A max) so you can worry less about fusing there. Make sure to also check out this great list of resources to help you learn ! Small Setups (< 30 RGB LEDs) WLED has a great built-in automatic current-limiting feature, set to 850mA by default. If you have a very small setup (< 30 LEDs), you can use this feature to help simplify your wiring and keep things safe. In most circumstances, it's best to power your LED strip directly from the power supply and wire power to your WLED control board in parallel. {insert diagram here} With the current limiting feature turned on and for very small setups (on the smaller side of 1-30 LEDs), you can power the LED strip directly through the USB port of D1 mini or similar board. That is, power comes in to the control board through the USB port and out to a 5V pin. Each board will be a little different, so it would be wise to verify that you can do this for your specific board. You want to ensure that there are no voltage regulators, diodes, or other components between the 5V pin and the USB port input that are going to be damaged by the high-current draw of the LEDs. You also want to ensure that any PCB traces are big enough that they don't heat up with increased current. Never try to draw more than 1A through a board's USB port like this; the boards really aren't designed for large amounts of current to flow through them. When using this technique, make sure to add strain relief to your wires so that they don't flex and break. The easiest way to do this is to use hot glue. While you want to use plenty of hot glue, just be careful to not cover any components that are going to get hot with hot glue. Medium Setups (30-300 RGB LEDs) For a medium-sized setup of 30-300 LEDs, you should find a power supply that can provide enough current (see the link above) and make sure to power the strip directly. For setups with more than 150 LEDs, you should consider power injection. Power injection Power injection is where you connect multiple wires from your power supply to the strip in multiple places, usually once at the beginning and once at the end. This is needed because the LED strips can only pass a small amount of current through them and you need to ensure that all your power-hungry LEDs get fed enough power. If your LEDs are dim or discolored at one end of the strip, you should add power injection. When doing power injection, make sure your wires are rated for the amperage you wish to send over them. You should also check the voltage drop if you're doing a particularly long run. As a rough guide, you should never use anything thinner than 22AWG wire for power injection. For medium-sized setups, you should add fuses if your power supply is over 100W. Considering an inline fuse on each power injection line. Inline Fuses You should place the fuse as close to the power supply as possible, on the positive lead, so that as much of the current flows through it as possible. That will cause the fuse to blow if the power injection line shorts or if the strip shorts, instead of causing your power injection wire or strip to heat up. Buy a fuse that's rated just over what you expect your LED strip to draw. For example, if you calculate that your LEDs will draw at most 4.5A, buy a 5A fuse. First match your power injection wire size with the inline fuse's wire. If the inline fuse comes with 16AWG wire (it's usually printed on the wire itself in small type), you should use 16AWG or thicker wire for your power injection wire. If you use thinner wire, you weaken the utility of the inline fuse and risk your power injection wire heating up in the case of a failure. To wire in an inline fuse, trim back the positive wire (not ground) of your power injection line enough to allow the inline fuse to be spliced in. Place a cut of heat-shrink tubing over the wire so that the cable can be insulated once your solder joint is complete. Strip and bend both wires of your splice so that they create hooks to mechanically reinforce the joint, then solder. Cover with the heat-shrink tubing and you're done! Now you have a beautiful, professional-looking fused power injection line. Larger Setups (300+ RGB LEDs) The more power you're working with, the more you need to be careful about your wiring. If you're using a 150W or higher power supply or multiple power supplies, check out these tips: Wire ferrules If you're using stranded wire and lever-lock or screw terminals, all your wire \u2192 terminal connections should be terminated with a wire ferrule of the appropriate wire gauge. This is because stranded wires can splay and lose tension over time, creating a weaker connection that could lead to sparking. Loose strands can also cause shorts or break off. The same is true for tinned stranded wires: the solder can deform (especially if it's heated), loosening the screw terminal, and cause a weaker electrical connection or complete failure. That said, untinned stranded wire in a screw terminal actually creates a better connection than tinned stranded wire, so for high current applications where they could possibly heat up, don't tin them if you don't have ferrules. Shrouded wire ferrules also act as strain relief, minimizing mechanical damage if the wire moves at all. This is especially important for any installations that are mobile, could experience vibrations, or are installed/removed seasonally. Multiple power supplies When doing power injection with multiple power supplies never mix two power supplies on the same LED strip. You can connect grounds together, just never the positive rails. This means you need to segment your LEDs based on power supplies, including your power injection. For the same reasons listed below, never connect multiple power supplies to the same strip for power injection purposes, always fork one power supply and route it to the start/mid/end of the same strip. Because multiple power supplies could have subtle variations in their positive voltages (e.g. 12.1V and 12.3V), this could lead to power flowing in ways that aren't expected or which could be damaging to your equipment. In general, wired power supplies don't like to be directly connected to other power supplies unless they are explicitly designed for that purpose. This is not true for cell batteries, which are usually fine with being connected in parallel provided all the battery voltage + chemistry are the same. Even more tips Always check wire gauge + amp ratings and make sure to overcompensate by 2-3\u00d7 more, lower-current wires are better than fewer, higher-current wires Ensure that all strips are fused just above their max current. Fuses should be located as close to the power supply as possible. Make sure all distribution wires are neat, tidy, and mounted to a structure. If it needs to be loose to bridge an air gap, minimize the amount of dangling wire as much as possible. This ensures that if you were to have a wire become disconnected, it'll be easy to see where it is. Did you add fuses? Add fuses. Seriously.","title":"Wiring Protips"},{"location":"advanced/wiring/#overview","text":"RGB LEDs can draw a lot of current (amps). While most people usually worry about the dangers from high voltage, low voltage + high amperage can be dangerous too, as it can easily become a fire hazard in certain circumstances . Depending on your setup size (the number of LEDs you want to drive), use these tips to help guide your wiring. There are plenty of guides out there to help with power supply selection , which is out of scope of this page. Size your power supply to your installation both up and down, so you both provide them with enough current and don't introduce unnecessary risk. It's better to power 30 LEDs from a 10W (2A @5V) power supply than a 100W power supply, as you don't need to worry about the potential for as much energy flowing through small wires. As you increase the number of LEDs, you increase the amps your power supply will need to be able to provide. The more amps you're working with, the more you need to be cautious about your wiring and fusing . For example, if you want to power your LEDs off a sealed lead acid battery (e.g. a car battery), you need to be very careful about current. These kinds of batteries can supply hundreds of amps, so you need to ensure that you use fuses along the way to protect against shorts. If you're using USB pocket chargers on the other hand, they tend to be current limited (most provide only 1-2A max) so you can worry less about fusing there. Make sure to also check out this great list of resources to help you learn !","title":"Overview"},{"location":"advanced/wiring/#small-setups-30-rgb-leds","text":"WLED has a great built-in automatic current-limiting feature, set to 850mA by default. If you have a very small setup (< 30 LEDs), you can use this feature to help simplify your wiring and keep things safe. In most circumstances, it's best to power your LED strip directly from the power supply and wire power to your WLED control board in parallel. {insert diagram here} With the current limiting feature turned on and for very small setups (on the smaller side of 1-30 LEDs), you can power the LED strip directly through the USB port of D1 mini or similar board. That is, power comes in to the control board through the USB port and out to a 5V pin. Each board will be a little different, so it would be wise to verify that you can do this for your specific board. You want to ensure that there are no voltage regulators, diodes, or other components between the 5V pin and the USB port input that are going to be damaged by the high-current draw of the LEDs. You also want to ensure that any PCB traces are big enough that they don't heat up with increased current. Never try to draw more than 1A through a board's USB port like this; the boards really aren't designed for large amounts of current to flow through them. When using this technique, make sure to add strain relief to your wires so that they don't flex and break. The easiest way to do this is to use hot glue. While you want to use plenty of hot glue, just be careful to not cover any components that are going to get hot with hot glue.","title":"Small Setups (&lt; 30 RGB LEDs)"},{"location":"advanced/wiring/#medium-setups-30-300-rgb-leds","text":"For a medium-sized setup of 30-300 LEDs, you should find a power supply that can provide enough current (see the link above) and make sure to power the strip directly. For setups with more than 150 LEDs, you should consider power injection.","title":"Medium Setups (30-300 RGB LEDs)"},{"location":"advanced/wiring/#power-injection","text":"Power injection is where you connect multiple wires from your power supply to the strip in multiple places, usually once at the beginning and once at the end. This is needed because the LED strips can only pass a small amount of current through them and you need to ensure that all your power-hungry LEDs get fed enough power. If your LEDs are dim or discolored at one end of the strip, you should add power injection. When doing power injection, make sure your wires are rated for the amperage you wish to send over them. You should also check the voltage drop if you're doing a particularly long run. As a rough guide, you should never use anything thinner than 22AWG wire for power injection. For medium-sized setups, you should add fuses if your power supply is over 100W. Considering an inline fuse on each power injection line.","title":"Power injection"},{"location":"advanced/wiring/#inline-fuses","text":"You should place the fuse as close to the power supply as possible, on the positive lead, so that as much of the current flows through it as possible. That will cause the fuse to blow if the power injection line shorts or if the strip shorts, instead of causing your power injection wire or strip to heat up. Buy a fuse that's rated just over what you expect your LED strip to draw. For example, if you calculate that your LEDs will draw at most 4.5A, buy a 5A fuse. First match your power injection wire size with the inline fuse's wire. If the inline fuse comes with 16AWG wire (it's usually printed on the wire itself in small type), you should use 16AWG or thicker wire for your power injection wire. If you use thinner wire, you weaken the utility of the inline fuse and risk your power injection wire heating up in the case of a failure. To wire in an inline fuse, trim back the positive wire (not ground) of your power injection line enough to allow the inline fuse to be spliced in. Place a cut of heat-shrink tubing over the wire so that the cable can be insulated once your solder joint is complete. Strip and bend both wires of your splice so that they create hooks to mechanically reinforce the joint, then solder. Cover with the heat-shrink tubing and you're done! Now you have a beautiful, professional-looking fused power injection line.","title":"Inline Fuses"},{"location":"advanced/wiring/#larger-setups-300-rgb-leds","text":"The more power you're working with, the more you need to be careful about your wiring. If you're using a 150W or higher power supply or multiple power supplies, check out these tips:","title":"Larger Setups (300+ RGB LEDs)"},{"location":"advanced/wiring/#wire-ferrules","text":"If you're using stranded wire and lever-lock or screw terminals, all your wire \u2192 terminal connections should be terminated with a wire ferrule of the appropriate wire gauge. This is because stranded wires can splay and lose tension over time, creating a weaker connection that could lead to sparking. Loose strands can also cause shorts or break off. The same is true for tinned stranded wires: the solder can deform (especially if it's heated), loosening the screw terminal, and cause a weaker electrical connection or complete failure. That said, untinned stranded wire in a screw terminal actually creates a better connection than tinned stranded wire, so for high current applications where they could possibly heat up, don't tin them if you don't have ferrules. Shrouded wire ferrules also act as strain relief, minimizing mechanical damage if the wire moves at all. This is especially important for any installations that are mobile, could experience vibrations, or are installed/removed seasonally.","title":"Wire ferrules"},{"location":"advanced/wiring/#multiple-power-supplies","text":"When doing power injection with multiple power supplies never mix two power supplies on the same LED strip. You can connect grounds together, just never the positive rails. This means you need to segment your LEDs based on power supplies, including your power injection. For the same reasons listed below, never connect multiple power supplies to the same strip for power injection purposes, always fork one power supply and route it to the start/mid/end of the same strip. Because multiple power supplies could have subtle variations in their positive voltages (e.g. 12.1V and 12.3V), this could lead to power flowing in ways that aren't expected or which could be damaging to your equipment. In general, wired power supplies don't like to be directly connected to other power supplies unless they are explicitly designed for that purpose. This is not true for cell batteries, which are usually fine with being connected in parallel provided all the battery voltage + chemistry are the same.","title":"Multiple power supplies"},{"location":"advanced/wiring/#even-more-tips","text":"Always check wire gauge + amp ratings and make sure to overcompensate by 2-3\u00d7 more, lower-current wires are better than fewer, higher-current wires Ensure that all strips are fused just above their max current. Fuses should be located as close to the power supply as possible. Make sure all distribution wires are neat, tidy, and mounted to a structure. If it needs to be loose to bridge an air gap, minimize the amount of dangling wire as much as possible. This ensures that if you were to have a wire become disconnected, it'll be easy to see where it is. Did you add fuses? Add fuses. Seriously.","title":"Even more tips"},{"location":"basics/compatible-hardware/","text":"Still under construction, feel free to add to the list! This page lists some third-party hardware and/or tools that are working with WLED! Please use a decent and neutral description when adding things to this list. Tip Lists are in alphabetical order. The position of an item in the list does not indicate how good it is or if it will fit your use case. Please carefully compare all items in the category you are interested in, and you should find the one that suits your needs best in just a few minutes! Addressable LED Strips Sorting: 5v data only, 5v Data + Clock, 12v data only, non-addressable analog PWM Type Voltage Comments SK6812 5v RGBW WS2811 5v usually found in IP68 sealed 12mm pixel strings WS2812B 5v WS2813 5v has a backup data line APA102 5v using 2 data pins, Clock and Data LPD8806 5v using 2 data pins, Clock and Data WS2801 5v using 2 data pins, Clock and Data SK9822 5v using 2 data pins, Clock and Data GS8208 12v TM1814 12v RGBW WS2811 12v usually 3-LED segments, has data-line resistor WS2815 12v has a backup data line Analog PWM Usually 12v/24v Needs additional circuits (MOSFETs). Needs 3 or 4 pins for 1 LED strip Controllers with WLED pre-installed Info Unless otherwise noted, controllers feature everything you need for most WLED setups, except a power supply, wiring and fuses, and of course the LEDs themselves! Name Description ABC! WLED Controller / ESP8266 Commercial controller for 5V LED strips. Based on ESP8266 uC. Two outputs. Ready to use. Additional Relay&Fuse board available. (German shop & shipping only within Germany). A similar one is available at WLED.SHOP ABC! WLED Controller / ESP32 Commercial controller for 5V LED strips. Based on ESP32 uC. Two outputs. Option for digital microphone / sound reactive. Ready to use. Additional Relay&Fuse board available. (German shop & shipping only within Germany). A similar one is available at WLED.SHOP . ABC! WLED Shield, all-purpose, for ESP8266/ESP32 Commercial WLED Shield for 5V/12V LED strips. To be used with ESP8266 or ESP32 in D1 mini format. Two outputs. Option for digital microphone / sound reactive (with ESP32). Automatic 5V/12V recognition (no jumper/switch etc. required). Enclosure is available too. German shop & shipping currently only within Germany. Athom Light Strip Controller Simple controller with enclosure for reliably driving 3 pin 5V LEDs. Uses 2M ESP8266. Athom High Power Addressable LED Strip Controller Higher power options than the above system. Supports optional clock output. Athom RGBW Light Strip Controller Has outputs for individual color channels. Cadsbi Motion Smart Ready to use solution with 3 output ports, an external antenna, in a high quality metal enclosure ESP8266 Pixel Controller DIY board for 5V/12V LED strips with TTL or RS485 output using a Wemos D1 mini, integrated fuse, pluggable terminal block, 3D printed module case ESPthings.io ET-AL01 DIY board for 5 Analog channels and/or up to 5 Digital LED channels (or a combination of the latter as required), Integrated level shifter, 5v/12/24v compatibility, 4x pull-up/down GPIO, serial interface and power distribution terminals. Can be used with Wemos D1-style ESP8266 or ESP32 boards. ESP32 WLED pico board ESP32 WLED pico board,super small form factor, ready to buy on Tindie . Integrated level shifter, exposed pins for extending functionality , on board I2S microphone, Firmware is here . Project page is here IOT4WLED Ready to use hardware for WLED! Laterna Based on an ESP32 for digital LED and RBG/RGBW LED strips with support for 5V, 12V and 24V LED strips. (Up to 4 channels) Laterna Mini V3 Small ESP32 based controller with optional digital microphone integrated for digital 5V LED strips. Laterna Stick USB Stick like ESP32 based controller for digital 5V LED strips. LedBox V2 LedBox V2 by StanleyProjects is a fully contained, sound reactive, ESP32 based module for controlling 5-12V addressable LED strips (WS2812, SK6812, etc.), supporting both 3-(VDD,DAT,GND) and 4-(VDD,DAT,CLK,GND) pin configuration. It includes a digital MEMS microphone, button and IR control, and a safety resettable fuse, all in a compact 3D printable case. The board comes all setup, flashed with sound reactive WLED fork , and can be purchased here . Luminxa v2.2.2 ESP32 My Baby's Got LED Certified open hardware . Easy plug-and-play WLED board for those that don't want to figure out the hardware - you won't even need a screwdriver to get started. PC power supply ( ATX ) powers three 5V injection points on 8A fuses. For sale now on Tindie ! Full details on the github repo and maker's website . QuinLED Dig-Uno 2021 updated version! DIY/Pre-Assembled board for digital LED driving. Integrated level shifters, temperature sensor option, Auto 5v-24v compatibility, pull-up/down GPIO and safety features such as a onboard fuse. Recommended to use (and comes with) with custom QuinLED-ESP32 . Pre-assembled and pre-flashed with WLED available to buy! . Aircoookie's personal recommendation for medium-size WLED projects. QuinLED Dig-Quad 2021 updated version! DIY/Pre-Assembled board for 4 (5) channel digital LED driving. Integrated level shifters, temperature sensor option, Auto 5v-24v compatibility, pull-up/down GPIO and power distribution terminals with 5x onboard fuses for easy LED power injection. Recommended to use (and comes with) with custom QuinLED-ESP32 . Pre-assembled and pre-flashed with WLED available to buy! . Aircoookie's personal recommendation for large-size WLED projects with advanced power and output requirements. Simple WLED Board Very simple DIY board, minimum of required components, option for 5V/12V LEDs. Easy to solder (no SMT components). Simple to understand connection schematics and pictures. Can be used with ESP8266 or ESP32 in D1 mini Format. sjm autoprod rgbw, rgbw2+, rgbw4 Complete, fully-sealed, analog and digital controllers for vehicular use. rgbw has one RGBW channel, rgbw2+ has two analog, RGBW channels plus two/four addressable outputs (requires external 5V source for 5V LEDs). rgbw4 has four analog RGBW channels. 2+ and 4 support 12V or PWM/analog inputs and have internal PTC \"fuses\". WiFi Controlled Desk Lamp Open source PCB for WLED WLAN Pixel Controller Fully completed and control PCB with level shifter pre-flashed with WLED! WLED ESP32 universal controller ready to buy on Tindie , 100% compatible with WLED project. Integrated level shifter, 2 outputs for LEDs strips, 1 fused out for LED strip, relay for energy-saving, temperature sensor, PWM fan header, USB port for re-programing. Headers for shields to extend functionality. Available shields for controller is here , Firmware is here . ESP-01 WLED shield shield board for ESP-01 board, ready to buy on Tindie . Integrated level shifter, 3 outputs for various configurations, mosfet for 1 analog channel, Firmware is here . WLED Wemos mini shield shield board, ready to buy on Tindie . Integrated level shifter, 2 outputs for LEDs strips, 1 fused out for LED strip, resettable fuse for the development board, exposed I2C interface for display or sensors. Exposed pins Digital microphones. Works with Wemos D1 mini and D1-style ESP32 boards. Firmware is here . WLED Wemos shield shield board, ready to buy on Tindie or DIY 100% compatible with WLED project and WLED sound reactive fork . Integrated level shifter, 4 outputs for LEDs strips, 1 fused out for LED strip, resettable fuse for the development board, exposed I2C interface for display or sensors, relay for energy-saving and 1-wire temperature sensor. Exposed pins for Analog and Digital microphones. Works with Wemos D1 mini and D1-style ESP32 boards. Firmware is here . WLED waterproof controller with external antenna DIY board, designed for use outside permanently and for longer range Wi-Fi connection. No SMD components means it is easier to solder for DIYers. 100% compatible with WLED project. Level shifter, fuse for LED strip, resettable fuse for Wi-Fi module, exposed I2C interface for display or sensors, relay for energy-saving and 1-wire temperature sensor. Build around ESP-07S module. Firmware is here Yet Another WLED Controller Small and simple device for 5V addressable LED strips with minimum components and fully assembled by PCB manufacturing service in standard case. Firmware is here Controllers WLED can be installed to Warning If the controller does not have a USB port and no firmware supporting wireless updates pre-installed, installing WLED to it requires an FTDI flasher and in some cases, soldering. Name Chip Description ESPixelStick v3 ESP8266 The ESPixelStick V3 is a WiFi Pixel and DMX single output controller built around the ESP8266 platform. It utilizes industry standard E1.31 sACN and DDP protocols for control of up to 680 WS2811 pixels (4 Universes) or 63 GECE Pixels. The output passes through a built-in RS485 transceiver, allowing for driving DMX and differential Renard inputs (or using a differential receiver for long-distance between board and first pixel). The on board switching regulator allows you to power the ESPixelStick with 5V-24V -- Just match the voltage of the pixels you are using, no voltage configuration is required. Note: Does not come preconfigured with WLED, you must flash the ESP8266 yourself. SP108e v2 ESP8285 Hardware-Modification required and different versions exists! 8285-based 2M Controller that supports addressable RGBWW LED strips, also with CLK line (like ATA102). 5-24v DC input, 85mm x 45mm x 23mm. Vendors list spledapps 'Led Shop' as the supporting mobile application. Board is silk screened with 'SP108e'. No pads are exposed and a second processor is used to control the LEDs. Pin7 of that processor needs to be grounded to hold it in reset state. Then you can connect GPIO0 to GND and TX, RX, VCC, GND for flashing. Connect GPIO2 to R4 for DATA out and GPIO13 to R3 for CLK out. Flashed via PlatformIO, esptool. OTA updates work. Pics of pinout here: https://github.com/psxde/sp108e-led-controller/raw/main/sp108ev2_inside.png SP501e ESP8285 8285-based 1M Controller that supports both Addressable and PWM-based RGBWW LED strips. Note that recent versions have 2M. 5-24v DC input, 55mm x 26mm, sold under BTF lighting, RGBZone, etc. Vendors all list 'Fairynest' as the supporting mobile application. Board is silk screened with 'SP5XXe' but no other markings. Serial pads are exposed on the back-side of the board with GND and GPIO0 right next to each other and thus Flash access fairly straight forward. GPIO 0 must be pulled to GND at boot and throughout the flashing process. I/O configuration: LEDPIN is 'GPIO3' for addressable (note this pin is limited to approx. 250 LEDs), BTNPIN is GPIO 1. PWM pin out for RGBWW: CW: 14, WW: 12, B: 13, R: 15 and G: 4. Flashed via PlatformIO, ESPHome and Tasmotizer. Pics of board here: https://github.com/Operation760/SP501e-RGB-LED-Controller-/blob/master/SP501e_top_bottom_traced.jpg Flashing Connections: https://github.com/tonyn0/sp501e-flashing/blob/main/sp501e%20flash.png SP511e ESP8285 An ESP8285 2MB controller with 3 case buttons, built in mic, IR receiver, 38 key remote, and dual outputs. The dual outputs are connected to the same data pin. There is a step-by-step guide for Installing WLED on SP511E Controller . ESP LED Strip WIFI Control Board [ESP Version] ESP8266 Controller for addressable or analog LEDs (RGBW), 6-27VDC input, no level shifter, reset and boot buttons, enclosure. NOTE: Although this uses high-current transistors, they used jumpers on two of the connections so you are limited to their current rating (3A?). Other products WLED can be installed to Name Chip Description Merkury MI-BW210-999W ESP8285 Tuya Style WiFi Led light bulb, Warm White + RGB. There are two versions of this same bulb sold in the same packaging only way to check is to look at the bulb, EBEQPW92 uses PWM led control and is compatible with WLED however EBEQPW06 uses an SM16716 chip and is not currently compatible with WLED. Managed to flash using tuya-convert and a custom WLED build with the following analog pinout: B:4, G:5, R:13, W:14. Extras disabled to allow OTA, OTA only way to flash this, programming headers are not internally available. Shelly RGBW2 ESP8266 For \"analog\" LED use only! Runs on 12-24VDC. One button and one input. Pins: R=12, G=15, B=14, W=4. Finished, commercial product that can be flashed. More info and flashing docs Athom 15W bulb ESP8266 (2M flash) 15W bulb with RGB, warm white, and cold white LEDs. Compatible with all voltages, available form factors E27, B22 and GU10 Raw ESP8266/ESP32 boards Tip While these can work like the controllers above without extra hardware, you might get flickering without adding an external levelshifter. Using them without a controller board/shield is only recommended if you like tinkering with electronic projects. Name Chip Description Adafruit Feather Huzzah ESP8266 General-purpose ESP8266 Board with USB, battery connector, etc. D1 mini-style ESP32 ESP32 A nice compact ESP32 development board. D1 mini compatible layout. ESP32 DevKitC v4 ESP32 The original ESP32 Development Board made by Espressif Systems. H803 WiFi ESP8266 ESP8266EX based controller with level shifter inside. Data pin GPIO1 Clock pin GPIO14. Tested with WS2813 strip and Firmware fork is here . NodeMCU-32s ESP32 The most common ESP32 development board. Works well, depending on the board you might have to press the \"Boot\" button while USB flashing Heltec WiFi Kit 8 ESP8266 Another alternative of ESP8266 board. OLED display 128X32 pixel, battery charger on board. Almost the same functionality and price as the Wemos board. Plus it can be used in projects with external batteries. NodeMCU ESP8266 Another popular ESP8266 development board. A bit bigger than the D1 and has pins pre-soldered. There are multiple versions with slight differences, not all are tested. ESP-01 ESP8266 One of the first and cheapest ESP8266 boards available. Not recommended for general WLED installs (needs external USB/serial chip, voltage converter, only has 1mb of flash, so soon no wireless updates possible) Olimex ESP32 POE ESP32 Ethernet (PoE) and WiFi, though usage of the ethernet port requires a custom compile. The PoE should not be used to power LEDs due to a maximum throughput of 4W. For most installations, standard ethernet should be used, supplying power through the 5V pin. QuinLED-ESP32 Custom design D1 Mini32 formfactor ESP32 module Fed up with the bad quality of generic ESP32 modules on the market, designed my own \"beefed up\" version. Available in multiple versions: QuinLED-ESP32-AB (Antenna Board), QuinLED-ESP32-AE (Antenna External), QuinLED-ESP32-ABE (Antenna Board + Ethernet). Aircoookie's recommendation for running WLED. RE5V1C ESP8285 5v DC input - onboard 10A relay TwilightLord-ESP32 ESP32 ESP32 Dev Board with latest WROOM-32E module, USB Type-C, 800mA LDO, 8MB flash and PTC fused. D1 Mini32 form factor and compatible pin out. 16MB Flash version also available Wemos D1 mini ESP8266 An affordable ESP8266 development board. Aircoookie's recommendation for running WLED if you want an ESP8266 board. Current version: 3.1.0 Wemos D1 mini Pro ESP8266 A newer development board with an external antenna connector. Works very well with WLED. Recommended if your signal strength is too low with another board. Current version: 2.0.0. Version 1.0.0 has the same form factor as the D1 mini. WT32-ETH01 ESP32 Under development! Ethernet (non-PoE) and WiFi enabled alternative to the Olimex boards, for 1/4 the cost. Features no PoE, and requires initial flashing of a custom compiled image using a FTDI or similar USB to serial converter. Useful boards and addons Name Description TwilightLord-ESP32 Ethernet Shield Ethernet Shield (10/100Mbps) for ESP32 boards. Stackable with D1 Mini32 form factor boards. Wemos D1 mini Level Shifter Shield A level shifter shield (74HCT125) - by Evil Genius Labs LLC. Compatible PC RGB Fans and ARGB accessories Brand Model Comments Corsair HD120 Fan Uses WS2812B, data-in only PCCOOLER Moonlight 5-pack Fans Uses WS2812B, includes Data-out connector to keep each fan uniquely addressable if wired in series like traditional LED strips Any 5v 3-pin ARGB for PC Any PC RGB device that supports the 5v 3-pin ARGB motherboard header should work fine with WLED. All the major motherboard vendors support the Corsair HD120 and PCCOOLER fans listed, so we can safely assume any device that supports motherboard ARGB 5V 3-Pin standard will work with WLED. Levelshifters Name Description SN74AHCT125N Aircoookie's recommended levelshifter. Used on the QuinLed Dig-Uno and WLED Wemos shield . 74AHCT32 Same pinout as above can be used. This is just an OR gate, but any AHCT gate can be used if inputs are connected appropriately. ;) SN74HCT125N Slower, cheaper version. Works just as well for WS2812, but not recommended for APA102. SN74LVC2T45 Modern bus transceiver with voltage translation Yet Another WLED Controller TXS0102 A bidirectional levelshifter that works well with WLED. F-Amp Level shifter/data booster Warning I2C shifters are generally too slow for WLED, so don't use them. USB/TTL adapters Name Description CH340 CH340 module instead of CP2102, PL2303 or FTDI/FTDT. The CH340 can deliver more current which is needed while the flash process depending on the board type. The timing is also much more stable. For boards with an USB/TTL adapter onboard this is NOT needed ESP uploader CP2102N module. Same USB to UART converter as many recent Dev boards using. Featuring latest USB-C connector. For use with many ESP32, ESP8266, ESP8255 and Tuya based modules. 3.3V logic and 5V power pass through for custom boards. Miscellaneous Sorting: Sensors, Displays, Actuators Name Description HC-SR501 PIR sensor with adjustable sensitivity and on time delay (suitable as a button). HC-SR602 PIR sensor (not suitable as a button but can be used with PIR sensor usermod). TSOP38238 IR receiver compatible with most IR remotes. SSD1305 I2C display, can be used with 4 Line Display usermod . SSD1306 I2C & SPI display, can be used with 4 Line Display usermod. 5V relay Relay module. Some will require 5V to trigger so you will need level-shifted output (similar as for LEDs) for proper functionality or a circuit with transistor or MOSFET. DS18B20 Recommended temperature sensor for use with WLED. Compatible with the Temperature usermod Display shield Various configurations. Compatible with the ESP32 WLED dev board also can be used with ESP32 mini dev boards.","title":"Hardware"},{"location":"basics/compatible-hardware/#addressable-led-strips","text":"Sorting: 5v data only, 5v Data + Clock, 12v data only, non-addressable analog PWM Type Voltage Comments SK6812 5v RGBW WS2811 5v usually found in IP68 sealed 12mm pixel strings WS2812B 5v WS2813 5v has a backup data line APA102 5v using 2 data pins, Clock and Data LPD8806 5v using 2 data pins, Clock and Data WS2801 5v using 2 data pins, Clock and Data SK9822 5v using 2 data pins, Clock and Data GS8208 12v TM1814 12v RGBW WS2811 12v usually 3-LED segments, has data-line resistor WS2815 12v has a backup data line Analog PWM Usually 12v/24v Needs additional circuits (MOSFETs). Needs 3 or 4 pins for 1 LED strip","title":"Addressable LED Strips"},{"location":"basics/compatible-hardware/#controllers-with-wled-pre-installed","text":"Info Unless otherwise noted, controllers feature everything you need for most WLED setups, except a power supply, wiring and fuses, and of course the LEDs themselves! Name Description ABC! WLED Controller / ESP8266 Commercial controller for 5V LED strips. Based on ESP8266 uC. Two outputs. Ready to use. Additional Relay&Fuse board available. (German shop & shipping only within Germany). A similar one is available at WLED.SHOP ABC! WLED Controller / ESP32 Commercial controller for 5V LED strips. Based on ESP32 uC. Two outputs. Option for digital microphone / sound reactive. Ready to use. Additional Relay&Fuse board available. (German shop & shipping only within Germany). A similar one is available at WLED.SHOP . ABC! WLED Shield, all-purpose, for ESP8266/ESP32 Commercial WLED Shield for 5V/12V LED strips. To be used with ESP8266 or ESP32 in D1 mini format. Two outputs. Option for digital microphone / sound reactive (with ESP32). Automatic 5V/12V recognition (no jumper/switch etc. required). Enclosure is available too. German shop & shipping currently only within Germany. Athom Light Strip Controller Simple controller with enclosure for reliably driving 3 pin 5V LEDs. Uses 2M ESP8266. Athom High Power Addressable LED Strip Controller Higher power options than the above system. Supports optional clock output. Athom RGBW Light Strip Controller Has outputs for individual color channels. Cadsbi Motion Smart Ready to use solution with 3 output ports, an external antenna, in a high quality metal enclosure ESP8266 Pixel Controller DIY board for 5V/12V LED strips with TTL or RS485 output using a Wemos D1 mini, integrated fuse, pluggable terminal block, 3D printed module case ESPthings.io ET-AL01 DIY board for 5 Analog channels and/or up to 5 Digital LED channels (or a combination of the latter as required), Integrated level shifter, 5v/12/24v compatibility, 4x pull-up/down GPIO, serial interface and power distribution terminals. Can be used with Wemos D1-style ESP8266 or ESP32 boards. ESP32 WLED pico board ESP32 WLED pico board,super small form factor, ready to buy on Tindie . Integrated level shifter, exposed pins for extending functionality , on board I2S microphone, Firmware is here . Project page is here IOT4WLED Ready to use hardware for WLED! Laterna Based on an ESP32 for digital LED and RBG/RGBW LED strips with support for 5V, 12V and 24V LED strips. (Up to 4 channels) Laterna Mini V3 Small ESP32 based controller with optional digital microphone integrated for digital 5V LED strips. Laterna Stick USB Stick like ESP32 based controller for digital 5V LED strips. LedBox V2 LedBox V2 by StanleyProjects is a fully contained, sound reactive, ESP32 based module for controlling 5-12V addressable LED strips (WS2812, SK6812, etc.), supporting both 3-(VDD,DAT,GND) and 4-(VDD,DAT,CLK,GND) pin configuration. It includes a digital MEMS microphone, button and IR control, and a safety resettable fuse, all in a compact 3D printable case. The board comes all setup, flashed with sound reactive WLED fork , and can be purchased here . Luminxa v2.2.2 ESP32 My Baby's Got LED Certified open hardware . Easy plug-and-play WLED board for those that don't want to figure out the hardware - you won't even need a screwdriver to get started. PC power supply ( ATX ) powers three 5V injection points on 8A fuses. For sale now on Tindie ! Full details on the github repo and maker's website . QuinLED Dig-Uno 2021 updated version! DIY/Pre-Assembled board for digital LED driving. Integrated level shifters, temperature sensor option, Auto 5v-24v compatibility, pull-up/down GPIO and safety features such as a onboard fuse. Recommended to use (and comes with) with custom QuinLED-ESP32 . Pre-assembled and pre-flashed with WLED available to buy! . Aircoookie's personal recommendation for medium-size WLED projects. QuinLED Dig-Quad 2021 updated version! DIY/Pre-Assembled board for 4 (5) channel digital LED driving. Integrated level shifters, temperature sensor option, Auto 5v-24v compatibility, pull-up/down GPIO and power distribution terminals with 5x onboard fuses for easy LED power injection. Recommended to use (and comes with) with custom QuinLED-ESP32 . Pre-assembled and pre-flashed with WLED available to buy! . Aircoookie's personal recommendation for large-size WLED projects with advanced power and output requirements. Simple WLED Board Very simple DIY board, minimum of required components, option for 5V/12V LEDs. Easy to solder (no SMT components). Simple to understand connection schematics and pictures. Can be used with ESP8266 or ESP32 in D1 mini Format. sjm autoprod rgbw, rgbw2+, rgbw4 Complete, fully-sealed, analog and digital controllers for vehicular use. rgbw has one RGBW channel, rgbw2+ has two analog, RGBW channels plus two/four addressable outputs (requires external 5V source for 5V LEDs). rgbw4 has four analog RGBW channels. 2+ and 4 support 12V or PWM/analog inputs and have internal PTC \"fuses\". WiFi Controlled Desk Lamp Open source PCB for WLED WLAN Pixel Controller Fully completed and control PCB with level shifter pre-flashed with WLED! WLED ESP32 universal controller ready to buy on Tindie , 100% compatible with WLED project. Integrated level shifter, 2 outputs for LEDs strips, 1 fused out for LED strip, relay for energy-saving, temperature sensor, PWM fan header, USB port for re-programing. Headers for shields to extend functionality. Available shields for controller is here , Firmware is here . ESP-01 WLED shield shield board for ESP-01 board, ready to buy on Tindie . Integrated level shifter, 3 outputs for various configurations, mosfet for 1 analog channel, Firmware is here . WLED Wemos mini shield shield board, ready to buy on Tindie . Integrated level shifter, 2 outputs for LEDs strips, 1 fused out for LED strip, resettable fuse for the development board, exposed I2C interface for display or sensors. Exposed pins Digital microphones. Works with Wemos D1 mini and D1-style ESP32 boards. Firmware is here . WLED Wemos shield shield board, ready to buy on Tindie or DIY 100% compatible with WLED project and WLED sound reactive fork . Integrated level shifter, 4 outputs for LEDs strips, 1 fused out for LED strip, resettable fuse for the development board, exposed I2C interface for display or sensors, relay for energy-saving and 1-wire temperature sensor. Exposed pins for Analog and Digital microphones. Works with Wemos D1 mini and D1-style ESP32 boards. Firmware is here . WLED waterproof controller with external antenna DIY board, designed for use outside permanently and for longer range Wi-Fi connection. No SMD components means it is easier to solder for DIYers. 100% compatible with WLED project. Level shifter, fuse for LED strip, resettable fuse for Wi-Fi module, exposed I2C interface for display or sensors, relay for energy-saving and 1-wire temperature sensor. Build around ESP-07S module. Firmware is here Yet Another WLED Controller Small and simple device for 5V addressable LED strips with minimum components and fully assembled by PCB manufacturing service in standard case. Firmware is here","title":"Controllers with WLED pre-installed"},{"location":"basics/compatible-hardware/#controllers-wled-can-be-installed-to","text":"Warning If the controller does not have a USB port and no firmware supporting wireless updates pre-installed, installing WLED to it requires an FTDI flasher and in some cases, soldering. Name Chip Description ESPixelStick v3 ESP8266 The ESPixelStick V3 is a WiFi Pixel and DMX single output controller built around the ESP8266 platform. It utilizes industry standard E1.31 sACN and DDP protocols for control of up to 680 WS2811 pixels (4 Universes) or 63 GECE Pixels. The output passes through a built-in RS485 transceiver, allowing for driving DMX and differential Renard inputs (or using a differential receiver for long-distance between board and first pixel). The on board switching regulator allows you to power the ESPixelStick with 5V-24V -- Just match the voltage of the pixels you are using, no voltage configuration is required. Note: Does not come preconfigured with WLED, you must flash the ESP8266 yourself. SP108e v2 ESP8285 Hardware-Modification required and different versions exists! 8285-based 2M Controller that supports addressable RGBWW LED strips, also with CLK line (like ATA102). 5-24v DC input, 85mm x 45mm x 23mm. Vendors list spledapps 'Led Shop' as the supporting mobile application. Board is silk screened with 'SP108e'. No pads are exposed and a second processor is used to control the LEDs. Pin7 of that processor needs to be grounded to hold it in reset state. Then you can connect GPIO0 to GND and TX, RX, VCC, GND for flashing. Connect GPIO2 to R4 for DATA out and GPIO13 to R3 for CLK out. Flashed via PlatformIO, esptool. OTA updates work. Pics of pinout here: https://github.com/psxde/sp108e-led-controller/raw/main/sp108ev2_inside.png SP501e ESP8285 8285-based 1M Controller that supports both Addressable and PWM-based RGBWW LED strips. Note that recent versions have 2M. 5-24v DC input, 55mm x 26mm, sold under BTF lighting, RGBZone, etc. Vendors all list 'Fairynest' as the supporting mobile application. Board is silk screened with 'SP5XXe' but no other markings. Serial pads are exposed on the back-side of the board with GND and GPIO0 right next to each other and thus Flash access fairly straight forward. GPIO 0 must be pulled to GND at boot and throughout the flashing process. I/O configuration: LEDPIN is 'GPIO3' for addressable (note this pin is limited to approx. 250 LEDs), BTNPIN is GPIO 1. PWM pin out for RGBWW: CW: 14, WW: 12, B: 13, R: 15 and G: 4. Flashed via PlatformIO, ESPHome and Tasmotizer. Pics of board here: https://github.com/Operation760/SP501e-RGB-LED-Controller-/blob/master/SP501e_top_bottom_traced.jpg Flashing Connections: https://github.com/tonyn0/sp501e-flashing/blob/main/sp501e%20flash.png SP511e ESP8285 An ESP8285 2MB controller with 3 case buttons, built in mic, IR receiver, 38 key remote, and dual outputs. The dual outputs are connected to the same data pin. There is a step-by-step guide for Installing WLED on SP511E Controller . ESP LED Strip WIFI Control Board [ESP Version] ESP8266 Controller for addressable or analog LEDs (RGBW), 6-27VDC input, no level shifter, reset and boot buttons, enclosure. NOTE: Although this uses high-current transistors, they used jumpers on two of the connections so you are limited to their current rating (3A?).","title":"Controllers WLED can be installed to"},{"location":"basics/compatible-hardware/#other-products-wled-can-be-installed-to","text":"Name Chip Description Merkury MI-BW210-999W ESP8285 Tuya Style WiFi Led light bulb, Warm White + RGB. There are two versions of this same bulb sold in the same packaging only way to check is to look at the bulb, EBEQPW92 uses PWM led control and is compatible with WLED however EBEQPW06 uses an SM16716 chip and is not currently compatible with WLED. Managed to flash using tuya-convert and a custom WLED build with the following analog pinout: B:4, G:5, R:13, W:14. Extras disabled to allow OTA, OTA only way to flash this, programming headers are not internally available. Shelly RGBW2 ESP8266 For \"analog\" LED use only! Runs on 12-24VDC. One button and one input. Pins: R=12, G=15, B=14, W=4. Finished, commercial product that can be flashed. More info and flashing docs Athom 15W bulb ESP8266 (2M flash) 15W bulb with RGB, warm white, and cold white LEDs. Compatible with all voltages, available form factors E27, B22 and GU10","title":"Other products WLED can be installed to"},{"location":"basics/compatible-hardware/#raw-esp8266esp32-boards","text":"Tip While these can work like the controllers above without extra hardware, you might get flickering without adding an external levelshifter. Using them without a controller board/shield is only recommended if you like tinkering with electronic projects. Name Chip Description Adafruit Feather Huzzah ESP8266 General-purpose ESP8266 Board with USB, battery connector, etc. D1 mini-style ESP32 ESP32 A nice compact ESP32 development board. D1 mini compatible layout. ESP32 DevKitC v4 ESP32 The original ESP32 Development Board made by Espressif Systems. H803 WiFi ESP8266 ESP8266EX based controller with level shifter inside. Data pin GPIO1 Clock pin GPIO14. Tested with WS2813 strip and Firmware fork is here . NodeMCU-32s ESP32 The most common ESP32 development board. Works well, depending on the board you might have to press the \"Boot\" button while USB flashing Heltec WiFi Kit 8 ESP8266 Another alternative of ESP8266 board. OLED display 128X32 pixel, battery charger on board. Almost the same functionality and price as the Wemos board. Plus it can be used in projects with external batteries. NodeMCU ESP8266 Another popular ESP8266 development board. A bit bigger than the D1 and has pins pre-soldered. There are multiple versions with slight differences, not all are tested. ESP-01 ESP8266 One of the first and cheapest ESP8266 boards available. Not recommended for general WLED installs (needs external USB/serial chip, voltage converter, only has 1mb of flash, so soon no wireless updates possible) Olimex ESP32 POE ESP32 Ethernet (PoE) and WiFi, though usage of the ethernet port requires a custom compile. The PoE should not be used to power LEDs due to a maximum throughput of 4W. For most installations, standard ethernet should be used, supplying power through the 5V pin. QuinLED-ESP32 Custom design D1 Mini32 formfactor ESP32 module Fed up with the bad quality of generic ESP32 modules on the market, designed my own \"beefed up\" version. Available in multiple versions: QuinLED-ESP32-AB (Antenna Board), QuinLED-ESP32-AE (Antenna External), QuinLED-ESP32-ABE (Antenna Board + Ethernet). Aircoookie's recommendation for running WLED. RE5V1C ESP8285 5v DC input - onboard 10A relay TwilightLord-ESP32 ESP32 ESP32 Dev Board with latest WROOM-32E module, USB Type-C, 800mA LDO, 8MB flash and PTC fused. D1 Mini32 form factor and compatible pin out. 16MB Flash version also available Wemos D1 mini ESP8266 An affordable ESP8266 development board. Aircoookie's recommendation for running WLED if you want an ESP8266 board. Current version: 3.1.0 Wemos D1 mini Pro ESP8266 A newer development board with an external antenna connector. Works very well with WLED. Recommended if your signal strength is too low with another board. Current version: 2.0.0. Version 1.0.0 has the same form factor as the D1 mini. WT32-ETH01 ESP32 Under development! Ethernet (non-PoE) and WiFi enabled alternative to the Olimex boards, for 1/4 the cost. Features no PoE, and requires initial flashing of a custom compiled image using a FTDI or similar USB to serial converter.","title":"Raw ESP8266/ESP32 boards"},{"location":"basics/compatible-hardware/#useful-boards-and-addons","text":"Name Description TwilightLord-ESP32 Ethernet Shield Ethernet Shield (10/100Mbps) for ESP32 boards. Stackable with D1 Mini32 form factor boards. Wemos D1 mini Level Shifter Shield A level shifter shield (74HCT125) - by Evil Genius Labs LLC.","title":"Useful boards and addons"},{"location":"basics/compatible-hardware/#compatible-pc-rgb-fans-and-argb-accessories","text":"Brand Model Comments Corsair HD120 Fan Uses WS2812B, data-in only PCCOOLER Moonlight 5-pack Fans Uses WS2812B, includes Data-out connector to keep each fan uniquely addressable if wired in series like traditional LED strips Any 5v 3-pin ARGB for PC Any PC RGB device that supports the 5v 3-pin ARGB motherboard header should work fine with WLED. All the major motherboard vendors support the Corsair HD120 and PCCOOLER fans listed, so we can safely assume any device that supports motherboard ARGB 5V 3-Pin standard will work with WLED.","title":"Compatible PC RGB Fans and ARGB accessories"},{"location":"basics/compatible-hardware/#levelshifters","text":"Name Description SN74AHCT125N Aircoookie's recommended levelshifter. Used on the QuinLed Dig-Uno and WLED Wemos shield . 74AHCT32 Same pinout as above can be used. This is just an OR gate, but any AHCT gate can be used if inputs are connected appropriately. ;) SN74HCT125N Slower, cheaper version. Works just as well for WS2812, but not recommended for APA102. SN74LVC2T45 Modern bus transceiver with voltage translation Yet Another WLED Controller TXS0102 A bidirectional levelshifter that works well with WLED. F-Amp Level shifter/data booster Warning I2C shifters are generally too slow for WLED, so don't use them.","title":"Levelshifters"},{"location":"basics/compatible-hardware/#usbttl-adapters","text":"Name Description CH340 CH340 module instead of CP2102, PL2303 or FTDI/FTDT. The CH340 can deliver more current which is needed while the flash process depending on the board type. The timing is also much more stable. For boards with an USB/TTL adapter onboard this is NOT needed ESP uploader CP2102N module. Same USB to UART converter as many recent Dev boards using. Featuring latest USB-C connector. For use with many ESP32, ESP8266, ESP8255 and Tuya based modules. 3.3V logic and 5V power pass through for custom boards.","title":"USB/TTL adapters"},{"location":"basics/compatible-hardware/#miscellaneous","text":"Sorting: Sensors, Displays, Actuators Name Description HC-SR501 PIR sensor with adjustable sensitivity and on time delay (suitable as a button). HC-SR602 PIR sensor (not suitable as a button but can be used with PIR sensor usermod). TSOP38238 IR receiver compatible with most IR remotes. SSD1305 I2C display, can be used with 4 Line Display usermod . SSD1306 I2C & SPI display, can be used with 4 Line Display usermod. 5V relay Relay module. Some will require 5V to trigger so you will need level-shifted output (similar as for LEDs) for proper functionality or a circuit with transistor or MOSFET. DS18B20 Recommended temperature sensor for use with WLED. Compatible with the Temperature usermod Display shield Various configurations. Compatible with the ESP32 WLED dev board also can be used with ESP32 mini dev boards.","title":"Miscellaneous"},{"location":"basics/compatible-software/","text":"Still under construction, feel free to add to the list! This page lists some third-party software that can interface with WLED! Controllers Controllers use the WLED API to change the current light settings. Name Description Home Assistant Versatile and feature rich home automation system. Out-of-the-box WLED integration with automatic discovery. Homey pro with the D.A.L.O.R App Home automation system, WLED integration via the D.A.L.O.R. app with automatic discovery. ioBroker adapter Versatile and feature rich home automation system. Out-of-the-box WLED integration with automatic discovery. Lumia Stream Allows for control of your lights from streaming software node-red-contrib-wled Node-RED nodes for WLED OctoPrint-WLED Connect your OctoPrint install to your WLED install using this plugin to show things like printer status, progress and more! openHAB Another more professional feature rich home automation system. WLED integration made easy. Link 2 WLED-GUI This is a cross-platform desktop app for WLED. You can use it on Windows, Linux and Mac. wledQuickControl macOS 11.0+ Menu Bar app for controlling power and brightness. Sources Source programs generate light data and stream them to WLED in real time. Name Description LedFx A music visualization tool written in Python. Connects to WLED via E1.31 or UDP. Dr.Zzs tutorial video Prismatik WLED-WiFi (native) Ambilight via WiFi or serial - natively supports UDP (WARLS, DRGB, DNRGB protocols). Prismatik WLED-WiFi (plugin) Ambilight via WiFi - a Plugin alternative for Prismatik WLED support. xLights xLights is a Light Sequencer and Show scheduler which works with WLED. Dr.Zzs has made some videos to set it up. Intro Video Hyperion.ng Hyperion is an open-source Bias or Ambient Lighting implementation which you might know from TV manufacturers. It supports many LED devices and video grabbers. Support for WLED through UDPraw at port 19446 or E1.31. Tutorial video , Dr.Zzs video Hyperion (Classic) Hyperion is an open-source Bias or Ambient Lighting implementation which you might know from TV manufacturers. It supports many LED devices and video grabbers. Support for WLED through UDPraw at port 19446 or E1.31. Enigmalight Ambilight clone for broadcom based linux receivers. It supports many LED devices. Support for WLED through USB Adalight/Momo. Download to various forums use the WEB search function of your browser. Q Light Controller+ QLC+ is a free and cross-platform software to control DMX or analog lighting systems like moving heads, dimmers, scanners etc. QLC+ runs on Linux, Windows (XP+), macOS (10.7+) and the Raspberry Pi. WLED can be used with E1.31 (sACN). use major version 4, as 5 is in development. Various Name Description Logitech WLED Sync Windows tray application to sync Logitech gaming peripherals to WLED.","title":"Software"},{"location":"basics/compatible-software/#controllers","text":"Controllers use the WLED API to change the current light settings. Name Description Home Assistant Versatile and feature rich home automation system. Out-of-the-box WLED integration with automatic discovery. Homey pro with the D.A.L.O.R App Home automation system, WLED integration via the D.A.L.O.R. app with automatic discovery. ioBroker adapter Versatile and feature rich home automation system. Out-of-the-box WLED integration with automatic discovery. Lumia Stream Allows for control of your lights from streaming software node-red-contrib-wled Node-RED nodes for WLED OctoPrint-WLED Connect your OctoPrint install to your WLED install using this plugin to show things like printer status, progress and more! openHAB Another more professional feature rich home automation system. WLED integration made easy. Link 2 WLED-GUI This is a cross-platform desktop app for WLED. You can use it on Windows, Linux and Mac. wledQuickControl macOS 11.0+ Menu Bar app for controlling power and brightness.","title":"Controllers"},{"location":"basics/compatible-software/#sources","text":"Source programs generate light data and stream them to WLED in real time. Name Description LedFx A music visualization tool written in Python. Connects to WLED via E1.31 or UDP. Dr.Zzs tutorial video Prismatik WLED-WiFi (native) Ambilight via WiFi or serial - natively supports UDP (WARLS, DRGB, DNRGB protocols). Prismatik WLED-WiFi (plugin) Ambilight via WiFi - a Plugin alternative for Prismatik WLED support. xLights xLights is a Light Sequencer and Show scheduler which works with WLED. Dr.Zzs has made some videos to set it up. Intro Video Hyperion.ng Hyperion is an open-source Bias or Ambient Lighting implementation which you might know from TV manufacturers. It supports many LED devices and video grabbers. Support for WLED through UDPraw at port 19446 or E1.31. Tutorial video , Dr.Zzs video Hyperion (Classic) Hyperion is an open-source Bias or Ambient Lighting implementation which you might know from TV manufacturers. It supports many LED devices and video grabbers. Support for WLED through UDPraw at port 19446 or E1.31. Enigmalight Ambilight clone for broadcom based linux receivers. It supports many LED devices. Support for WLED through USB Adalight/Momo. Download to various forums use the WEB search function of your browser. Q Light Controller+ QLC+ is a free and cross-platform software to control DMX or analog lighting systems like moving heads, dimmers, scanners etc. QLC+ runs on Linux, Windows (XP+), macOS (10.7+) and the Raspberry Pi. WLED can be used with E1.31 (sACN). use major version 4, as 5 is in development.","title":"Sources"},{"location":"basics/compatible-software/#various","text":"Name Description Logitech WLED Sync Windows tray application to sync Logitech gaming peripherals to WLED.","title":"Various"},{"location":"basics/compiling-wled/","text":"Moved, see How to compile WLED","title":"Compiling WLED"},{"location":"basics/faq/","text":"This page will continually get updated with questions often asked. Contents Installation What binary should I use? I've flashed a bin, but i get no response at all Connection issues Once I attach LEDs, I can't connect to the ESP anymore! I have entered my WiFi credentials and rebooted, but I can not connect to the module now! The module once was connected, but I can no longer reach it. The wled-xxx.local address (mDNS) does not work. Is it safe to do a port forwarding to the public internet to control the lights from anywhere? My device is unresponsive or animations lag! I'm having a bootloop! (LEDs turn on every ~5seconds) I am running realtime (e.g. E1.31) and not all of my LEDs are driven fluently! Still having connection issues/connection dropping: what more can i check? Compilation issues When compiling WLED in VS Code using platformio, I get an error. LED issues My LEDs don't turn on at all. My LEDs don't get as bright as they should! My LEDs are unable to be set into an consistent solid color. When I select green, the LEDs turn red! My LEDs act funny and flicker randomly. Not all my LEDs turn on. How to turn off the bright blue onboard LED? Why is gpio2/D4 the default LED pin? Why can I only use 500 LEDs on the ESP8266 GPIO pin 3? What LED strip hardware is supported by WLED? General questions What does the name WLED mean? What do the WLED version names mean? What is the difference between the brightness sliders in the web UI? My Segments are gone after a reboot! May I sell a product running WLED? My question or solution is not on this page Check out the WLED forum! Look through the Issues If I report a new Issue, what do i need to share? Installation What binary should I use? Please see this page . I've flashed a bin, but i get no response at all Some users report first erasing the flash (yes, even on a new device) sometimes helps . Connection issues Once I attach LEDs, I can't connect to the ESP anymore! The gpio2/D4 pin needs to be high (pullup) at powerup time for the controller to boot successfully. If you accidentally connected the strip the wrong way (if it has arrows printed on, make sure they face away from the pin, otherwise pay attention to the DIN printing). Most strips have the 3-pin male JST connector with 3 holes on the input side. Some users have reported troubles booting even with the direction being correct. In that case, please try adding a 3.3 or 4.7kOhms resistor between the data pin and 3v3 pin! I have entered my WiFi credentials and rebooted, but I can not connect to the module now! If you did not enter a static IP, the module will automatically obtain a dynamic IP from the router. You can check it in the router configuration or in the settings page, if the Access Point is still enabled. An easier way is to use the WLED Android app which features automatic discovery! The module once was connected, but I can no longer reach it First, make sure you can reach the connected WiFi yourself (with another device). See if you can connect to the Access Point, then go to 4.3.2.1/reset . Else, power-cycle the module manually. The wled-xxx.local address (mDNS) does not work This only works with Apple devices out of the box. You can install Bonjour to make it work in Windows. For Android there is no convenient way to achieve it, though you can use apps like \"Bonjour search\" to find the IP. I highly recommend you install the WLED app, which makes automatic discovery easy! Is it safe to do a port forwarding to the public internet to control the lights from anywhere? See this page. My device is unresponsive or animations lag! You are probably using too many sync interfaces. Please only enable one of Hue sync, MQTT, or Blynk at a time. For optimal performance, use two devices and sync them via the UDP notifier. Maybe you are also using a very high amount of LEDs. 750 is the recommended maximum. If using E1.31 feature on an ESP32, try \"Disabling WiFi Sleep\" in the WiFi setup section to reduce lag/stuttering of visual effects. I'm having a bootloop! (LEDs turn on every ~5seconds) Please open an issue or message me on Discord to resolve your issue. Most of the time, wiping the flash (Arduino IDE compile setting: Erase flash -> All flash contents) resolves the issue. Unfortunately it will also reset all your settings and presets. You can also try if using a different ESP resolves the issue. If you compiled with lwip version 2, try version 1.4 Higher Bandwidth instead! Still having connection issues/connection dropping: what more can i check? Try disabling \"Emulate Alexa device\" in Sync settings before entering your home Wifi credentials. Check whether mDNS is on or off and toggle it: does it make a difference? Same for 'NTP'. Same for 'Sync Send'. Check your router: is your 2.4Ghz on band 1: if not, try it please. If you have the possibility to try another 8266, please try it. I am running realtime (e.g. E1.31) and not all of my LEDs are driven fluently! Realtime effect streaming uses a rather large bandwidth as data is transmitted uncompressed. For example, to drive 1000 LEDs at 30 fps, you will need a data rate of 720 kBit/s, which is difficult to achieve with most cheap ESP boards over WiFi. Even if you split the total amount of LEDs across multiple controllers, your WiFi network could become the limiting factor quickly. The best way to ensure a low-latency, reliable, fluid stream when using large quantities of LEDs is to invest in a wired Ethernet ESP32 board like QuinLED-Dig boards with ethernet or the Olimex ESP32-POE. There is a 9 DMX universe limit by default in WLED. You can raise it in line 240 of const.h (E131_MAX_UNIVERSE_COUNT 9) and compile your own binary, but the performance of 2000 LEDs over WiFi will likely not be good unless you use an Ethernet enabled board. If Ethernet is not an option, decrease your LED count as far as possible, lower the frame rate in the sending software and make sure the WiFi signal reception of the board is good. Even without Ethernet, a board with an external antenna is significantly better than a PCB antenna board. Furthermore I suggest using the DDP protocol if available in your sender software (available in xLights). DDP has a smaller packet header and because of the reduced overhead the fluidity of your animations will be a bit better. Compilation issues When compiling WLED in VS Code using platformio, I get an error Try building again. If the error says the wled00.ino.cpp or .sconsign27.db.dblite file could not be found, this often helps. You can also try this ! LED issues My LEDs don't turn on at all. Please make sure you have connected the strip to GPIO2 and it is sufficiently powered. My LEDs don't get as bright as they should! If the brightness slider in the UI is already at maximum, try checking the auto brightness limiter in the LED settings. Set the milliamp limit to slightly below the rating of your power supply. If the LEDs are still too dim or change color towards the end of the strip, there may be a significant voltage drop. Try injecting 5v power at the end or middle of the strip with some appropriate cabling. My LEDs are unable to be set into an consistent solid color If the LEDs should be individually addressable, like the SK6812, but instead they only behave as either RED,GREEN OR BlUE pixels (in a row). You might not have enabled (settings -> led preferences) \"LEDs are 4-channel type (RGBW)\" for an RGBW/RGBWW/RGBNW strip. This behaviour is accompanied by WLED being unable to address all LEDs, if you specify the exact amount of LEDs in the strip. When I select green, the LEDs turn red! Depending on the type of LEDs used, Red and Green or other colors might be reversed. You can change the order in LED settings. WS2812B and most related chips use GRB, WS2811 uses RGB in most cases. My LEDs act funny and flicker randomly Reason 1 If you use an external 5V power supply for your LEDs, please connect the GND of power supply, LEDs, and ESP. Otherwise, the LEDs can't read the data signal from the ESP. Reason 2 The ESP8266 is a 3.3V microcontroller while the WS2812B LED uses 5V. I have personally got away with this in most cases, but you should technically add a level shifter. A string of WS2811 did not work in one case (pure static white). A possible workaround is chaining a single WS2812B pixel in front and checking \"Skip first LED\" in the settings. My recommended levelshifter is the SN74AHCT125N, also used in the QuinLED Dig-Uno board. If you don't have a level shifter, you can use this creative workaround . Reason 3 Your data line can only be so long . Try out with less or thicker wire between your data pin on your controller and the LED strip, or add (see video) some voltage booster (which can make even 40m data wire length work ;-)). Reason 4 If they don't flicker, but display funny colors, try switching between RGB/RGBW modes in LED settings. Not all my LEDs turn on Reason 1 By default the LED count is set to 30. If you have more and can power them, go to LED settings and increase the LED count! Please also enter the milliamp rating of your 5v power supply for optimal brightness in the field below it. Do not increase the mA number if you power LEDs directly from the 5V pin of the ESP! See here for maximum recommended LED counts. Reason 2 An LED in your chain may be broken. Try another strip or removing the first LED that doesn't light up. Make sure you are in solid effect mode and the LED count is set high enough first! How to turn off the bright blue onboard LED? This LED can be very distracting. Unfortunately it can't easily be disabled as it shares the gpio2/D4 pin with the LED output. It is turned off together with your LEDs (unless they require Off Refresh to be active) Currently there are 3 workarounds: Cover the LED Remove the LED permanently (desolder or apply pressure with e.g. a flathead screwdriver) Use a different LEDPIN , although the default is recommended for stable operation Why is gpio2/D4 the default LED pin? Although pins D1 and D2 are usually regarded the best GPIO pins to use in an ESP8266 project, D4 is the default in WLED, despite having two major and one minor drawback. The major drawbacks are the permanently lit blue onboard LEDs and the fact that the pin level needs to be high (pullup) at powerup or the controller will not boot. A minor drawback is that the Serial1 bus can not be used, but this is irrelevant in most cases, as the USB/serial converter is connected to the other Serial interface. The reason for using this pin is that it uses UART hardware driving, which increases stability and decreases CPU overhead especially with larger amounts of pixels. Why can I only use 500 LEDs on the ESP8266 GPIO pin 3? The problem is the DMA hardware driving method used on (just) that pin. It works well, but uses 4x (!) as much RAM memory as the UART hardware driving on pin 2 and the bitbang driver on all other pins. What LED strip hardware is supported by WLED? The compatible chipsets for the color-coding are 1 pin: WS2812B (5V) WS2811 (12V power, with 5V signal) WS2813 (WS2812 with redundant data on 2 wires DI and BI, to resist LEDs failure) WS2815 (like WS2813 but 12V), send 5V signal on BI. BTF2815 (cheaper 12V) SK6813 (redundant like WS2813) SK6812 (can support up to 4 colors, commonly GRBW) SK6805 (3 colors) 2 pins (clock CI and data DI) chips: APA102 SK9822 WS2801 (uses gpio0 and 2) LPD8806 Beside the digital addressable LED strips the good old analog LED strips are supported, too: 4 pins: RGB 5 pins: RGBW / RGBWW / RGBCW / RGBNW (RGB + one white channel) 6 pins: RGBCT (RGB + 2 white channels) Note: Support is only for Alexa. General Questions What does the name WLED mean? WiFi Lighting Effects Driver. Also it has LED in the name and is similar to the official term for WiFi, WLAN! What do the WLED version names mean? WLED version names are Japanese! Here is a nice list of their meanings: Version Name Kanji Meaning 0.10 Namigai \u6d6a\u8c9d Geoduck (don't google it!) 0.11.0 Mirai \u672a\u6765 Future 0.11.1 Fumikiri \u8e0f\u5207 Railroad crossing 0.12 Hikari \u5149 Light 0.13 Toki \u6642 Time N/A Kuuhaku \u7a7a\u767d Blank What is the difference between the brightness sliders in the web UI? There are three brightness slider types in the web UI. The white one in the top bar is the master brightness - it scales down every single color and all effects, palettes and segments by the same factor. In contrast, the slider underneath the color wheel only applies to the currently selected color and will not affect the brightness of other colors or Palettes. It is recommended to use this slider only if you like a darker version of a color alongside other, brighter colors. It should not be used to control the overall brightness, so it is preferable to leave it on maximum and instead use the master brightness control. There is a third brightness slider in each Segment panel. This serves the same purpose as master brightness, but limited to that segment. Please note that this does not override the master brightness, but instead is an additional downscaling. (If you set both Master and Segment brightness sliders to 50%, the resulting brightness is 25%) My Segments are gone after a reboot! Segments are non-persistant by default. If you want to load your preset at every startup, just do the following: Set your segments up as desired Go into the Favorites tab in the web UI, click the save checkbox and save the config to preset slot number 16 In LED settings, set Boot Preset to 16 This will be improved in a future release, so that you will be able to save multiple segment configurations! May I sell a product running WLED? WLED is licensed under the MIT license, thus you are free to use it in any way you wish as long as you retain the copyright notice and accept that I am not to be held liable for anything regarding your use of the software. For product pages, a link to the WLED GitHub repository would be hugely appreciated ! My question or solution is not on this page Check out the WLED forum! You can check out and use the WLED Discourse forum . Look through the Issues Maybe someone already reported your issue, so everybody supplying support would be grateful if you take some time to search through the existing issues . If I report a new Issue, what do i need to share? When you create a ticket, please share: exact controller, maybe a link to the shop you bought it from LED-strip type and amount of LEDs Specifications of your power supply (max. current/voltage) how you wired up all components (a diagram and/or picture often helps) the BIN-file you tried to flash (version and file name) or your IDE version if compiling from source Have you followed the quick start and compile settings at https://docs.wled.me ? Has it worked before? Does it works without any LEDs connected? (for instance the controller just connected to your PC over USB) Are you using/trying to use DHCP or static IP? Did you try to use a mobile hotspot instead of your WLAN AP/home wifi?","title":"FAQ"},{"location":"basics/faq/#contents","text":"","title":"Contents"},{"location":"basics/faq/#installation","text":"What binary should I use? I've flashed a bin, but i get no response at all","title":"Installation"},{"location":"basics/faq/#connection-issues","text":"Once I attach LEDs, I can't connect to the ESP anymore! I have entered my WiFi credentials and rebooted, but I can not connect to the module now! The module once was connected, but I can no longer reach it. The wled-xxx.local address (mDNS) does not work. Is it safe to do a port forwarding to the public internet to control the lights from anywhere? My device is unresponsive or animations lag! I'm having a bootloop! (LEDs turn on every ~5seconds) I am running realtime (e.g. E1.31) and not all of my LEDs are driven fluently! Still having connection issues/connection dropping: what more can i check?","title":"Connection issues"},{"location":"basics/faq/#compilation-issues","text":"When compiling WLED in VS Code using platformio, I get an error.","title":"Compilation issues"},{"location":"basics/faq/#led-issues","text":"My LEDs don't turn on at all. My LEDs don't get as bright as they should! My LEDs are unable to be set into an consistent solid color. When I select green, the LEDs turn red! My LEDs act funny and flicker randomly. Not all my LEDs turn on. How to turn off the bright blue onboard LED? Why is gpio2/D4 the default LED pin? Why can I only use 500 LEDs on the ESP8266 GPIO pin 3? What LED strip hardware is supported by WLED?","title":"LED issues"},{"location":"basics/faq/#general-questions","text":"What does the name WLED mean? What do the WLED version names mean? What is the difference between the brightness sliders in the web UI? My Segments are gone after a reboot! May I sell a product running WLED?","title":"General questions"},{"location":"basics/faq/#my-question-or-solution-is-not-on-this-page","text":"Check out the WLED forum! Look through the Issues If I report a new Issue, what do i need to share?","title":"My question or solution is not on this page"},{"location":"basics/faq/#installation_1","text":"","title":"Installation"},{"location":"basics/faq/#what-binary-should-i-use","text":"Please see this page .","title":"What binary should I use?"},{"location":"basics/faq/#ive-flashed-a-bin-but-i-get-no-response-at-all","text":"Some users report first erasing the flash (yes, even on a new device) sometimes helps .","title":"I've flashed a bin, but i get no response at all"},{"location":"basics/faq/#connection-issues_1","text":"","title":"Connection issues"},{"location":"basics/faq/#once-i-attach-leds-i-cant-connect-to-the-esp-anymore","text":"The gpio2/D4 pin needs to be high (pullup) at powerup time for the controller to boot successfully. If you accidentally connected the strip the wrong way (if it has arrows printed on, make sure they face away from the pin, otherwise pay attention to the DIN printing). Most strips have the 3-pin male JST connector with 3 holes on the input side. Some users have reported troubles booting even with the direction being correct. In that case, please try adding a 3.3 or 4.7kOhms resistor between the data pin and 3v3 pin!","title":"Once I attach LEDs, I can't connect to the ESP anymore!"},{"location":"basics/faq/#i-have-entered-my-wifi-credentials-and-rebooted-but-i-can-not-connect-to-the-module-now","text":"If you did not enter a static IP, the module will automatically obtain a dynamic IP from the router. You can check it in the router configuration or in the settings page, if the Access Point is still enabled. An easier way is to use the WLED Android app which features automatic discovery!","title":"I have entered my WiFi credentials and rebooted, but I can not connect to the module now!"},{"location":"basics/faq/#the-module-once-was-connected-but-i-can-no-longer-reach-it","text":"First, make sure you can reach the connected WiFi yourself (with another device). See if you can connect to the Access Point, then go to 4.3.2.1/reset . Else, power-cycle the module manually.","title":"The module once was connected, but I can no longer reach it"},{"location":"basics/faq/#the-wled-xxxlocal-address-mdns-does-not-work","text":"This only works with Apple devices out of the box. You can install Bonjour to make it work in Windows. For Android there is no convenient way to achieve it, though you can use apps like \"Bonjour search\" to find the IP. I highly recommend you install the WLED app, which makes automatic discovery easy!","title":"The wled-xxx.local address (mDNS) does not work"},{"location":"basics/faq/#is-it-safe-to-do-a-port-forwarding-to-the-public-internet-to-control-the-lights-from-anywhere","text":"See this page.","title":"Is it safe to do a port forwarding to the public internet to control the lights from anywhere?"},{"location":"basics/faq/#my-device-is-unresponsive-or-animations-lag","text":"You are probably using too many sync interfaces. Please only enable one of Hue sync, MQTT, or Blynk at a time. For optimal performance, use two devices and sync them via the UDP notifier. Maybe you are also using a very high amount of LEDs. 750 is the recommended maximum. If using E1.31 feature on an ESP32, try \"Disabling WiFi Sleep\" in the WiFi setup section to reduce lag/stuttering of visual effects.","title":"My device is unresponsive or animations lag!"},{"location":"basics/faq/#im-having-a-bootloop-leds-turn-on-every-5seconds","text":"Please open an issue or message me on Discord to resolve your issue. Most of the time, wiping the flash (Arduino IDE compile setting: Erase flash -> All flash contents) resolves the issue. Unfortunately it will also reset all your settings and presets. You can also try if using a different ESP resolves the issue. If you compiled with lwip version 2, try version 1.4 Higher Bandwidth instead!","title":"I'm having a bootloop! (LEDs turn on every ~5seconds)"},{"location":"basics/faq/#still-having-connection-issuesconnection-dropping-what-more-can-i-check","text":"Try disabling \"Emulate Alexa device\" in Sync settings before entering your home Wifi credentials. Check whether mDNS is on or off and toggle it: does it make a difference? Same for 'NTP'. Same for 'Sync Send'. Check your router: is your 2.4Ghz on band 1: if not, try it please. If you have the possibility to try another 8266, please try it.","title":"Still having connection issues/connection dropping: what more can i check?"},{"location":"basics/faq/#i-am-running-realtime-eg-e131-and-not-all-of-my-leds-are-driven-fluently","text":"Realtime effect streaming uses a rather large bandwidth as data is transmitted uncompressed. For example, to drive 1000 LEDs at 30 fps, you will need a data rate of 720 kBit/s, which is difficult to achieve with most cheap ESP boards over WiFi. Even if you split the total amount of LEDs across multiple controllers, your WiFi network could become the limiting factor quickly. The best way to ensure a low-latency, reliable, fluid stream when using large quantities of LEDs is to invest in a wired Ethernet ESP32 board like QuinLED-Dig boards with ethernet or the Olimex ESP32-POE. There is a 9 DMX universe limit by default in WLED. You can raise it in line 240 of const.h (E131_MAX_UNIVERSE_COUNT 9) and compile your own binary, but the performance of 2000 LEDs over WiFi will likely not be good unless you use an Ethernet enabled board. If Ethernet is not an option, decrease your LED count as far as possible, lower the frame rate in the sending software and make sure the WiFi signal reception of the board is good. Even without Ethernet, a board with an external antenna is significantly better than a PCB antenna board. Furthermore I suggest using the DDP protocol if available in your sender software (available in xLights). DDP has a smaller packet header and because of the reduced overhead the fluidity of your animations will be a bit better.","title":"I am running realtime (e.g. E1.31) and not all of my LEDs are driven fluently!"},{"location":"basics/faq/#compilation-issues_1","text":"","title":"Compilation issues"},{"location":"basics/faq/#when-compiling-wled-in-vs-code-using-platformio-i-get-an-error","text":"Try building again. If the error says the wled00.ino.cpp or .sconsign27.db.dblite file could not be found, this often helps. You can also try this !","title":"When compiling WLED in VS Code using platformio, I get an error"},{"location":"basics/faq/#led-issues_1","text":"","title":"LED issues"},{"location":"basics/faq/#my-leds-dont-turn-on-at-all","text":"Please make sure you have connected the strip to GPIO2 and it is sufficiently powered.","title":"My LEDs don't turn on at all."},{"location":"basics/faq/#my-leds-dont-get-as-bright-as-they-should","text":"If the brightness slider in the UI is already at maximum, try checking the auto brightness limiter in the LED settings. Set the milliamp limit to slightly below the rating of your power supply. If the LEDs are still too dim or change color towards the end of the strip, there may be a significant voltage drop. Try injecting 5v power at the end or middle of the strip with some appropriate cabling.","title":"My LEDs don't get as bright as they should!"},{"location":"basics/faq/#my-leds-are-unable-to-be-set-into-an-consistent-solid-color","text":"If the LEDs should be individually addressable, like the SK6812, but instead they only behave as either RED,GREEN OR BlUE pixels (in a row). You might not have enabled (settings -> led preferences) \"LEDs are 4-channel type (RGBW)\" for an RGBW/RGBWW/RGBNW strip. This behaviour is accompanied by WLED being unable to address all LEDs, if you specify the exact amount of LEDs in the strip.","title":"My LEDs are unable to be set into an consistent solid color"},{"location":"basics/faq/#when-i-select-green-the-leds-turn-red","text":"Depending on the type of LEDs used, Red and Green or other colors might be reversed. You can change the order in LED settings. WS2812B and most related chips use GRB, WS2811 uses RGB in most cases.","title":"When I select green, the LEDs turn red!"},{"location":"basics/faq/#my-leds-act-funny-and-flicker-randomly","text":"","title":"My LEDs act funny and flicker randomly"},{"location":"basics/faq/#reason-1","text":"If you use an external 5V power supply for your LEDs, please connect the GND of power supply, LEDs, and ESP. Otherwise, the LEDs can't read the data signal from the ESP.","title":"Reason 1"},{"location":"basics/faq/#reason-2","text":"The ESP8266 is a 3.3V microcontroller while the WS2812B LED uses 5V. I have personally got away with this in most cases, but you should technically add a level shifter. A string of WS2811 did not work in one case (pure static white). A possible workaround is chaining a single WS2812B pixel in front and checking \"Skip first LED\" in the settings. My recommended levelshifter is the SN74AHCT125N, also used in the QuinLED Dig-Uno board. If you don't have a level shifter, you can use this creative workaround .","title":"Reason 2"},{"location":"basics/faq/#reason-3","text":"Your data line can only be so long . Try out with less or thicker wire between your data pin on your controller and the LED strip, or add (see video) some voltage booster (which can make even 40m data wire length work ;-)).","title":"Reason 3"},{"location":"basics/faq/#reason-4","text":"If they don't flicker, but display funny colors, try switching between RGB/RGBW modes in LED settings.","title":"Reason 4"},{"location":"basics/faq/#not-all-my-leds-turn-on","text":"","title":"Not all my LEDs turn on"},{"location":"basics/faq/#reason-1_1","text":"By default the LED count is set to 30. If you have more and can power them, go to LED settings and increase the LED count! Please also enter the milliamp rating of your 5v power supply for optimal brightness in the field below it. Do not increase the mA number if you power LEDs directly from the 5V pin of the ESP! See here for maximum recommended LED counts.","title":"Reason 1"},{"location":"basics/faq/#reason-2_1","text":"An LED in your chain may be broken. Try another strip or removing the first LED that doesn't light up. Make sure you are in solid effect mode and the LED count is set high enough first!","title":"Reason 2"},{"location":"basics/faq/#how-to-turn-off-the-bright-blue-onboard-led","text":"This LED can be very distracting. Unfortunately it can't easily be disabled as it shares the gpio2/D4 pin with the LED output. It is turned off together with your LEDs (unless they require Off Refresh to be active) Currently there are 3 workarounds: Cover the LED Remove the LED permanently (desolder or apply pressure with e.g. a flathead screwdriver) Use a different LEDPIN , although the default is recommended for stable operation","title":"How to turn off the bright blue onboard LED?"},{"location":"basics/faq/#why-is-gpio2d4-the-default-led-pin","text":"Although pins D1 and D2 are usually regarded the best GPIO pins to use in an ESP8266 project, D4 is the default in WLED, despite having two major and one minor drawback. The major drawbacks are the permanently lit blue onboard LEDs and the fact that the pin level needs to be high (pullup) at powerup or the controller will not boot. A minor drawback is that the Serial1 bus can not be used, but this is irrelevant in most cases, as the USB/serial converter is connected to the other Serial interface. The reason for using this pin is that it uses UART hardware driving, which increases stability and decreases CPU overhead especially with larger amounts of pixels.","title":"Why is gpio2/D4 the default LED pin?"},{"location":"basics/faq/#why-can-i-only-use-500-leds-on-the-esp8266-gpio-pin-3","text":"The problem is the DMA hardware driving method used on (just) that pin. It works well, but uses 4x (!) as much RAM memory as the UART hardware driving on pin 2 and the bitbang driver on all other pins.","title":"Why can I only use 500 LEDs on the ESP8266 GPIO pin 3?"},{"location":"basics/faq/#what-led-strip-hardware-is-supported-by-wled","text":"The compatible chipsets for the color-coding are 1 pin: WS2812B (5V) WS2811 (12V power, with 5V signal) WS2813 (WS2812 with redundant data on 2 wires DI and BI, to resist LEDs failure) WS2815 (like WS2813 but 12V), send 5V signal on BI. BTF2815 (cheaper 12V) SK6813 (redundant like WS2813) SK6812 (can support up to 4 colors, commonly GRBW) SK6805 (3 colors) 2 pins (clock CI and data DI) chips: APA102 SK9822 WS2801 (uses gpio0 and 2) LPD8806 Beside the digital addressable LED strips the good old analog LED strips are supported, too: 4 pins: RGB 5 pins: RGBW / RGBWW / RGBCW / RGBNW (RGB + one white channel) 6 pins: RGBCT (RGB + 2 white channels) Note: Support is only for Alexa.","title":"What LED strip hardware is supported by WLED?"},{"location":"basics/faq/#general-questions_1","text":"","title":"General Questions"},{"location":"basics/faq/#what-does-the-name-wled-mean","text":"WiFi Lighting Effects Driver. Also it has LED in the name and is similar to the official term for WiFi, WLAN!","title":"What does the name WLED mean?"},{"location":"basics/faq/#what-do-the-wled-version-names-mean","text":"WLED version names are Japanese! Here is a nice list of their meanings: Version Name Kanji Meaning 0.10 Namigai \u6d6a\u8c9d Geoduck (don't google it!) 0.11.0 Mirai \u672a\u6765 Future 0.11.1 Fumikiri \u8e0f\u5207 Railroad crossing 0.12 Hikari \u5149 Light 0.13 Toki \u6642 Time N/A Kuuhaku \u7a7a\u767d Blank","title":"What do the WLED version names mean?"},{"location":"basics/faq/#what-is-the-difference-between-the-brightness-sliders-in-the-web-ui","text":"There are three brightness slider types in the web UI. The white one in the top bar is the master brightness - it scales down every single color and all effects, palettes and segments by the same factor. In contrast, the slider underneath the color wheel only applies to the currently selected color and will not affect the brightness of other colors or Palettes. It is recommended to use this slider only if you like a darker version of a color alongside other, brighter colors. It should not be used to control the overall brightness, so it is preferable to leave it on maximum and instead use the master brightness control. There is a third brightness slider in each Segment panel. This serves the same purpose as master brightness, but limited to that segment. Please note that this does not override the master brightness, but instead is an additional downscaling. (If you set both Master and Segment brightness sliders to 50%, the resulting brightness is 25%)","title":"What is the difference between the brightness sliders in the web UI?"},{"location":"basics/faq/#my-segments-are-gone-after-a-reboot","text":"Segments are non-persistant by default. If you want to load your preset at every startup, just do the following: Set your segments up as desired Go into the Favorites tab in the web UI, click the save checkbox and save the config to preset slot number 16 In LED settings, set Boot Preset to 16 This will be improved in a future release, so that you will be able to save multiple segment configurations!","title":"My Segments are gone after a reboot!"},{"location":"basics/faq/#may-i-sell-a-product-running-wled","text":"WLED is licensed under the MIT license, thus you are free to use it in any way you wish as long as you retain the copyright notice and accept that I am not to be held liable for anything regarding your use of the software. For product pages, a link to the WLED GitHub repository would be hugely appreciated !","title":"May I sell a product running WLED?"},{"location":"basics/faq/#my-question-or-solution-is-not-on-this-page_1","text":"","title":"My question or solution is not on this page"},{"location":"basics/faq/#check-out-the-wled-forum","text":"You can check out and use the WLED Discourse forum .","title":"Check out the WLED forum!"},{"location":"basics/faq/#look-through-the-issues","text":"Maybe someone already reported your issue, so everybody supplying support would be grateful if you take some time to search through the existing issues .","title":"Look through the Issues"},{"location":"basics/faq/#if-i-report-a-new-issue-what-do-i-need-to-share","text":"When you create a ticket, please share: exact controller, maybe a link to the shop you bought it from LED-strip type and amount of LEDs Specifications of your power supply (max. current/voltage) how you wired up all components (a diagram and/or picture often helps) the BIN-file you tried to flash (version and file name) or your IDE version if compiling from source Have you followed the quick start and compile settings at https://docs.wled.me ? Has it worked before? Does it works without any LEDs connected? (for instance the controller just connected to your PC over USB) Are you using/trying to use DHCP or static IP? Did you try to use a mobile hotspot instead of your WLAN AP/home wifi?","title":"If I report a new Issue, what do i need to share?"},{"location":"basics/getting-started/","text":"Welcome to the WLED wiki! Version Info Unless noted otherwise, all information applies to the latest release (v0.13.3). Quick start guide 1. Connect a WS2812B-compatible RGB(W) led strip to GPIO2 . On most ESP8266 based development boards this pin is labeled D4 , on ESP32 based boards use IO16 or G16 or 16 . If the connecting wire cannot be kept short, use a level shifter/translator . Optionally connect a normally open pushbutton to GPIO0 (NodeMCU/Wemos pin D3 , on ESP32 use IO17 ) and ground for configurable actions . Note: Board pin naming varies depending on the manufacturer. Please use the board pinout from the specific board you purchased and use the GPIO PINS to reference this guide. Make sure to connect ESP and LED-strip grounds together! While using an ESP8266 and LEDs that have clock and data, you can either use hardware SPI (mostly faster) or software SPI. - hardware SPI: use GPIO14 (SCLK) for clock and GPIO13 (MOSI) for data. - software SPI: since all pins can be changed in the Hardware section of LED settings, you can use any pins. Recommend is to use GPIO1 (TxD) for clock and GPIO2 (D4) for data. For safe operation it is recommended to size your power wires correctly and to integrate fuses. For reference, you may use this LED power, wiring and fuse calculator . For analog LEDs, the MOSFETs IRLZ44N or STP55NF06L are good candidates. Partial, example circuit... 2. Flash the software to your ESP module! There are two options for this step: I just want to use WLED! (install release binary) I want to modify WLED (compile from source code) If everything worked the first thirty LEDs will light up in bright orange to stimulate courage, friendliness and success! 3. Use a WiFi device to connect to the access point WLED-AP using the default password wled1234 . You can also just scan this QR code: WLED-AP is not showing up! If you do not see the WLED-AP SSID, the default SSID may have been changed at compile time . Go to the IP 4.3.2.1 in your browser to control your lights! You should also be able to connect to wled.me if in access point mode (embedded DNS server). Wifi Setup To connect your WLED module to your home Wifi: 1. Click on the Config (gear) icon to edit your WLED module settings and choose 'Wifi Setup'. 2. For most home networks, simply enter your Wifi network's name and network password. You can also change the mDNS address for your WLED module here. 3. Click Save & Connect at the bottom of the page. 4. Reconnect your device to your home's Wifi network. 5. Check the device list in your router's user interface for the IP of the WLED device within your local network. For easy automatic discovery, use the WLED app! Have fun with the WLED software! Default GPIO Usage These are only defaults All pins can be changed in the Hardware section of LED settings. Please note that these are GPIO numbers, please consult a pinout for your board to find the labeled pin (e.g D4 = GPIO2 on most ESP8266 boards). When using an ESP8266 board, it's recommended to use pins GPIO1 , GPIO2 , or GPIO3 for LED Data; using other pins will require bit-banging and may cause slow performance and/or issues elsewhere (such as with IR decoding). Function GPIO Suggested pin LED Data 2 ESP8266: 1, 2 (3 if <= 100 LEDs), ESP32: 1, 2, 3, 4, 16 Button 0 IR Remote None 4 Relay None 12 Software update procedure Method 1: Reflashing the new update like a new install (see above). Method 2: The software has an integrated OTA software update capability. First you have to enable it by typing in the correct OTA passphrase (default: \"wledota\") in the settings menu. Remove the tick in the checkbox \"OTA locked\". Then save settings and reboot the ESP. Then you can select \"Manual OTA update\" in Security settings and upload a release binary . After you are done, it is recommended to lock the OTA function again. To do so, tick the checkbox again (you can change the passphrase by typing in a new one now). Reboot. If you try to access the update page now, you should see the message \"OTA lock active\". Method 3: ArduinoOTA is also supported. If you own multiple devices and want to update them Since v0.13 of WLED source code includes shell/command prompt scripts which is allow you to update multiple devices with a single command. Please check tools subfolder for multi-update scripts (.cmd or .sh). You will need to modify them to include IP addresses of your WLED devices and assign firmware binary file for each device. If you are using Windows, make sure you install curl utility somewhere in your PATH (curl is included with Windows 10 since build 17063). This will only work if \"OTA Lock\" is disabled.","title":"Getting Started"},{"location":"basics/getting-started/#welcome-to-the-wled-wiki","text":"Version Info Unless noted otherwise, all information applies to the latest release (v0.13.3).","title":"Welcome to the WLED wiki!"},{"location":"basics/getting-started/#quick-start-guide","text":"1. Connect a WS2812B-compatible RGB(W) led strip to GPIO2 . On most ESP8266 based development boards this pin is labeled D4 , on ESP32 based boards use IO16 or G16 or 16 . If the connecting wire cannot be kept short, use a level shifter/translator . Optionally connect a normally open pushbutton to GPIO0 (NodeMCU/Wemos pin D3 , on ESP32 use IO17 ) and ground for configurable actions . Note: Board pin naming varies depending on the manufacturer. Please use the board pinout from the specific board you purchased and use the GPIO PINS to reference this guide. Make sure to connect ESP and LED-strip grounds together! While using an ESP8266 and LEDs that have clock and data, you can either use hardware SPI (mostly faster) or software SPI. - hardware SPI: use GPIO14 (SCLK) for clock and GPIO13 (MOSI) for data. - software SPI: since all pins can be changed in the Hardware section of LED settings, you can use any pins. Recommend is to use GPIO1 (TxD) for clock and GPIO2 (D4) for data. For safe operation it is recommended to size your power wires correctly and to integrate fuses. For reference, you may use this LED power, wiring and fuse calculator . For analog LEDs, the MOSFETs IRLZ44N or STP55NF06L are good candidates. Partial, example circuit... 2. Flash the software to your ESP module! There are two options for this step: I just want to use WLED! (install release binary) I want to modify WLED (compile from source code) If everything worked the first thirty LEDs will light up in bright orange to stimulate courage, friendliness and success! 3. Use a WiFi device to connect to the access point WLED-AP using the default password wled1234 . You can also just scan this QR code: WLED-AP is not showing up! If you do not see the WLED-AP SSID, the default SSID may have been changed at compile time . Go to the IP 4.3.2.1 in your browser to control your lights! You should also be able to connect to wled.me if in access point mode (embedded DNS server).","title":"Quick start guide"},{"location":"basics/getting-started/#wifi-setup","text":"To connect your WLED module to your home Wifi: 1. Click on the Config (gear) icon to edit your WLED module settings and choose 'Wifi Setup'. 2. For most home networks, simply enter your Wifi network's name and network password. You can also change the mDNS address for your WLED module here. 3. Click Save & Connect at the bottom of the page. 4. Reconnect your device to your home's Wifi network. 5. Check the device list in your router's user interface for the IP of the WLED device within your local network. For easy automatic discovery, use the WLED app! Have fun with the WLED software!","title":"Wifi Setup"},{"location":"basics/getting-started/#default-gpio-usage","text":"These are only defaults All pins can be changed in the Hardware section of LED settings. Please note that these are GPIO numbers, please consult a pinout for your board to find the labeled pin (e.g D4 = GPIO2 on most ESP8266 boards). When using an ESP8266 board, it's recommended to use pins GPIO1 , GPIO2 , or GPIO3 for LED Data; using other pins will require bit-banging and may cause slow performance and/or issues elsewhere (such as with IR decoding). Function GPIO Suggested pin LED Data 2 ESP8266: 1, 2 (3 if <= 100 LEDs), ESP32: 1, 2, 3, 4, 16 Button 0 IR Remote None 4 Relay None 12","title":"Default GPIO Usage"},{"location":"basics/getting-started/#software-update-procedure","text":"Method 1: Reflashing the new update like a new install (see above). Method 2: The software has an integrated OTA software update capability. First you have to enable it by typing in the correct OTA passphrase (default: \"wledota\") in the settings menu. Remove the tick in the checkbox \"OTA locked\". Then save settings and reboot the ESP. Then you can select \"Manual OTA update\" in Security settings and upload a release binary . After you are done, it is recommended to lock the OTA function again. To do so, tick the checkbox again (you can change the passphrase by typing in a new one now). Reboot. If you try to access the update page now, you should see the message \"OTA lock active\". Method 3: ArduinoOTA is also supported. If you own multiple devices and want to update them Since v0.13 of WLED source code includes shell/command prompt scripts which is allow you to update multiple devices with a single command. Please check tools subfolder for multi-update scripts (.cmd or .sh). You will need to modify them to include IP addresses of your WLED devices and assign firmware binary file for each device. If you are using Windows, make sure you install curl utility somewhere in your PATH (curl is included with Windows 10 since build 17063). This will only work if \"OTA Lock\" is disabled.","title":"Software update procedure"},{"location":"basics/install-binary/","text":"Flashing method 1: WLED web installer Tip This is by far the easiest and fastest way to get WLED up and running! Make sure you are running a recent desktop Chrome or Edge browser and head over to the installer site ! If you are updating an existing version of WLED, make sure to uncheck \"Clean install\" so that your settings are kept. This installer is not yet available for ESPs with flash chips smaller than 4MB (e.g. ESP01) Flashing method 2: esptool First of all, please follow the steps to install esptool.py here . Download the latest release binary file! Make sure only one ESP device/microcontroller is connected to your computer! Otherwise you could accidentally overwrite the wrong one. If you know the serial port, you can also add the -port COM3 attribute after write_flash Execute this command: ESP8266 esptool.py write_flash 0x0 ./WLED_XXX.bin ESP32 Firstly, flash the version 4 bootloader file, which you can find here . This step only has to be done once, to update afterwards the bootloader does not have to be re-installed. esptool.py write_flash 0x0 ./esp32_bootloader_v4.bin Now you can flash the actual firmware binary. Keep in mind the bootloader needs to have a flash offset of 0, but the firmware 0x10000. esptool.py write_flash 0x10000 ./WLED_XXX.bin When esptool.py says Connecting... , some ESP32 boards require you to hold the boot button (to the right of the USB port) for a few seconds If you experience issues, run this command before trying write_flash again (Note: this will erase all settings stored on the ESP!) esptool.py erase_flash If you have a MagicHome controller, here is a good video tutorial on how to flash it. Flashing method 3: ESP Home Flasher tool Warning On ESP32, this will make the filesystem very small (61kB), which leads to issues making presets. Please consider using the web installer or esptool. This is a GUI-based tool recommended by some users as easier to use than esptool. For some ESP32 boards, you might have to press some buttons after uploading: Hold both buttons down, plug it in, start flashing, then when it tries to detect, let go of the button to the left of the USB as you look at it, then when it detects the board type, let go of the other button. If running Windows, you need a driver from here: https://www.wemos.cc/en/latest/ch340_driver.html before your computer will show the COM port in ESPhome Flasher. With a Wemos D1 mini you do not need to hold down the reset button while flashing. Flashing method 4: OTA update You can alternatively use my basic HTTP OTA updater sketch and upload the binary! This requires the Arduino IDE and ESP8266 core installed. If your device is already running a firmware with built-in OTA capability, you can probably use that as well. What binary should I use? I always recommend to use the latest release. Starting from WLED 0.12.0, pins can be configured in LED settings and specific binaries for different LED pins or types are no longer needed. Please use the following binary for these boards respectively: Binary Name For devices WLED_0.x.x_ESP8266.bin NodeMCU, Wemos D1 mini, ESP-12, all ESP8266 with 4MB flash. Recommended. WLED_0.x.x_ESP32.bin All ESP32 devices (try this if the WLED-AP doesn't appear after flashing) WLED_0.x.x_ESP32_Ethernet.bin ESP32 devices with an Ethernet interface. Also works with WiFi only. WLED_0.x.x_ESP01.bin ESP-01 (black PCB), most Sonoff devices, ESP8265, all ESP8266 with 1MB flash. This binary has the full feature set, but wireless updates will not work. WLED_0.x.x_ESP02.bin All ESP8266 with 2MB flash, Athom bulbs esp32_bootloader.bin Not a WLED release. To be flashed to a brand new ESP32 before flashing the WLED binary itself. Legacy binary format (up to 0.11.1) Binary Name For devices WLED_0.x.x_ESP8266_1M_ota.bin ESP-01 (black PCB), most Sonoff devices, ESP8265, all ESP8266 with 1MB flash. This binary has some interfaces disabled (Alexa, Blynk, Hue sync, Infrared) in order for wireless updates to continue working. WLED_0.x.x_ESP8266_1M_full.bin ESP-01 (black PCB), most Sonoff devices, ESP8265, all ESP8266 with 1MB flash. This binary has the full feature set, but wireless updates will not work. WLED_0.x.x_ESP8266_512k.bin ESP-01 (blue PCB), older Sonoff devices, all ESP8266 with 512kB flash. Interfaces (Alexa, Blynk, Hue sync, Infrared) disabled, no OTA. Support will not be possible in future versions. WLED_0.x.x_ESP8266_ledpinY.bin Custom build for 4MB flash ESP8266 and WS2812B. LED pin is changed (default is GPIO2). (This is GPIOY and not DY for the D to GPIO mapping, check your boards spec!) WLED_0.x.x_ESP8266_apa102.bin Custom build for 4MB flash ESP8266 and APA102 LEDs (clock pin GPIO0, data GPIO2). WLED_0.x.x_ESP8266_ws2801.bin Custom build for 4MB flash ESP8266 and WS2801 LEDs (clock pin GPIO0, data GPIO2). WLED_0.x.x_ESP32_ledpinY.bin Custom build for ESP32 and WS2812b. LED pin is changed (default is GPIO2). LED pin 16 is useful for the QuinLed-Dig-Uno board with ESP32.","title":"Install WLED Binary"},{"location":"basics/install-binary/#flashing-method-1-wled-web-installer","text":"Tip This is by far the easiest and fastest way to get WLED up and running! Make sure you are running a recent desktop Chrome or Edge browser and head over to the installer site ! If you are updating an existing version of WLED, make sure to uncheck \"Clean install\" so that your settings are kept. This installer is not yet available for ESPs with flash chips smaller than 4MB (e.g. ESP01)","title":"Flashing method 1: WLED web installer"},{"location":"basics/install-binary/#flashing-method-2-esptool","text":"First of all, please follow the steps to install esptool.py here . Download the latest release binary file! Make sure only one ESP device/microcontroller is connected to your computer! Otherwise you could accidentally overwrite the wrong one. If you know the serial port, you can also add the -port COM3 attribute after write_flash Execute this command:","title":"Flashing method 2: esptool"},{"location":"basics/install-binary/#esp8266","text":"esptool.py write_flash 0x0 ./WLED_XXX.bin","title":"ESP8266"},{"location":"basics/install-binary/#esp32","text":"Firstly, flash the version 4 bootloader file, which you can find here . This step only has to be done once, to update afterwards the bootloader does not have to be re-installed. esptool.py write_flash 0x0 ./esp32_bootloader_v4.bin Now you can flash the actual firmware binary. Keep in mind the bootloader needs to have a flash offset of 0, but the firmware 0x10000. esptool.py write_flash 0x10000 ./WLED_XXX.bin When esptool.py says Connecting... , some ESP32 boards require you to hold the boot button (to the right of the USB port) for a few seconds If you experience issues, run this command before trying write_flash again (Note: this will erase all settings stored on the ESP!) esptool.py erase_flash If you have a MagicHome controller, here is a good video tutorial on how to flash it.","title":"ESP32"},{"location":"basics/install-binary/#flashing-method-3-esp-home-flasher-tool","text":"Warning On ESP32, this will make the filesystem very small (61kB), which leads to issues making presets. Please consider using the web installer or esptool. This is a GUI-based tool recommended by some users as easier to use than esptool. For some ESP32 boards, you might have to press some buttons after uploading: Hold both buttons down, plug it in, start flashing, then when it tries to detect, let go of the button to the left of the USB as you look at it, then when it detects the board type, let go of the other button. If running Windows, you need a driver from here: https://www.wemos.cc/en/latest/ch340_driver.html before your computer will show the COM port in ESPhome Flasher. With a Wemos D1 mini you do not need to hold down the reset button while flashing.","title":"Flashing method 3: ESP Home Flasher tool"},{"location":"basics/install-binary/#flashing-method-4-ota-update","text":"You can alternatively use my basic HTTP OTA updater sketch and upload the binary! This requires the Arduino IDE and ESP8266 core installed. If your device is already running a firmware with built-in OTA capability, you can probably use that as well.","title":"Flashing method 4: OTA update"},{"location":"basics/install-binary/#what-binary-should-i-use","text":"I always recommend to use the latest release. Starting from WLED 0.12.0, pins can be configured in LED settings and specific binaries for different LED pins or types are no longer needed. Please use the following binary for these boards respectively: Binary Name For devices WLED_0.x.x_ESP8266.bin NodeMCU, Wemos D1 mini, ESP-12, all ESP8266 with 4MB flash. Recommended. WLED_0.x.x_ESP32.bin All ESP32 devices (try this if the WLED-AP doesn't appear after flashing) WLED_0.x.x_ESP32_Ethernet.bin ESP32 devices with an Ethernet interface. Also works with WiFi only. WLED_0.x.x_ESP01.bin ESP-01 (black PCB), most Sonoff devices, ESP8265, all ESP8266 with 1MB flash. This binary has the full feature set, but wireless updates will not work. WLED_0.x.x_ESP02.bin All ESP8266 with 2MB flash, Athom bulbs esp32_bootloader.bin Not a WLED release. To be flashed to a brand new ESP32 before flashing the WLED binary itself. Legacy binary format (up to 0.11.1) Binary Name For devices WLED_0.x.x_ESP8266_1M_ota.bin ESP-01 (black PCB), most Sonoff devices, ESP8265, all ESP8266 with 1MB flash. This binary has some interfaces disabled (Alexa, Blynk, Hue sync, Infrared) in order for wireless updates to continue working. WLED_0.x.x_ESP8266_1M_full.bin ESP-01 (black PCB), most Sonoff devices, ESP8265, all ESP8266 with 1MB flash. This binary has the full feature set, but wireless updates will not work. WLED_0.x.x_ESP8266_512k.bin ESP-01 (blue PCB), older Sonoff devices, all ESP8266 with 512kB flash. Interfaces (Alexa, Blynk, Hue sync, Infrared) disabled, no OTA. Support will not be possible in future versions. WLED_0.x.x_ESP8266_ledpinY.bin Custom build for 4MB flash ESP8266 and WS2812B. LED pin is changed (default is GPIO2). (This is GPIOY and not DY for the D to GPIO mapping, check your boards spec!) WLED_0.x.x_ESP8266_apa102.bin Custom build for 4MB flash ESP8266 and APA102 LEDs (clock pin GPIO0, data GPIO2). WLED_0.x.x_ESP8266_ws2801.bin Custom build for 4MB flash ESP8266 and WS2801 LEDs (clock pin GPIO0, data GPIO2). WLED_0.x.x_ESP32_ledpinY.bin Custom build for ESP32 and WS2812b. LED pin is changed (default is GPIO2). LED pin 16 is useful for the QuinLed-Dig-Uno board with ESP32.","title":"What binary should I use?"},{"location":"basics/install-gui/","text":"1. Downloading the firmware bin file You can find precompiled .bin files on the release page . Be sure to download the latest version. This file looks something like this: WLED_[...]_ESP[...].bin If you are not sure what binary you should use look at this page: What binary should I use? 2. Downloading the Flash Download Tools Espressif has an official GUI tool for Windows. It has a lot of options and can be used for the ESP8266 and ESP32. You can find it on Espressif's download page here ! (if the link changed, just search for esp flash download tool on Google) After downloading the file, unzip it and start flash_download_tools_v3.6.8.exe . 3. Flashing the firmware bin files After starting flash_download_tools_v[...].exe there should pop up two small windows. Now just click on the Developer Mode and ESP8266 DownloadTool button. Now a new window opens. Under the SPIDownload section select the WLED_[...]_ESP[...].bin file by clicking on the first ... button In the Textfield next to the \"@\" char put in this adress: 0x0 Than make sure that the file is checked (click on the checkbox) Click on the Default button Set SPI Speed to 80Mhz Set Flash Size to 32Mbit Select the COM Port of your ESP (usually it's not COM1 ) BAUD can be set to 921600 Verify that everything looks like the two picture below \u00b0 ESPTool settings (optionally) click on ERASE to erase the entire flash chip click on START Now the firmware will be flashed to the ESP. When the firmware flashing was successful you see this: . Finally restart your board. Next steps: Quick start guide","title":"Install using ESP GUI"},{"location":"basics/install-gui/#1-downloading-the-firmware-bin-file","text":"You can find precompiled .bin files on the release page . Be sure to download the latest version. This file looks something like this: WLED_[...]_ESP[...].bin If you are not sure what binary you should use look at this page: What binary should I use?","title":"1. Downloading the firmware bin file"},{"location":"basics/install-gui/#2-downloading-the-flash-download-tools","text":"Espressif has an official GUI tool for Windows. It has a lot of options and can be used for the ESP8266 and ESP32. You can find it on Espressif's download page here ! (if the link changed, just search for esp flash download tool on Google) After downloading the file, unzip it and start flash_download_tools_v3.6.8.exe .","title":"2. Downloading the Flash Download Tools"},{"location":"basics/install-gui/#3-flashing-the-firmware-bin-files","text":"After starting flash_download_tools_v[...].exe there should pop up two small windows. Now just click on the Developer Mode and ESP8266 DownloadTool button. Now a new window opens. Under the SPIDownload section select the WLED_[...]_ESP[...].bin file by clicking on the first ... button In the Textfield next to the \"@\" char put in this adress: 0x0 Than make sure that the file is checked (click on the checkbox) Click on the Default button Set SPI Speed to 80Mhz Set Flash Size to 32Mbit Select the COM Port of your ESP (usually it's not COM1 ) BAUD can be set to 921600 Verify that everything looks like the two picture below \u00b0 ESPTool settings (optionally) click on ERASE to erase the entire flash chip click on START Now the firmware will be flashed to the ESP. When the firmware flashing was successful you see this: . Finally restart your board. Next steps: Quick start guide","title":"3. Flashing the firmware bin files"},{"location":"basics/install-wled-flasher/","text":"1. Downloading WLED firmware bin file You can find precompiled .bin files on the official release page . Also available alternative with precompiled usermods If you are not sure what binary you should use look at this page: What binary should I use? 2. Downloading the ESP WLED Flasher You can find and download flasher here ! After downloading a file, unzip it and start 3. Flashing firmware bin files When flasher start, choose Serial port (it must be a port your board is connected to). Next , choose downloaded BIN file . Click on Flash ESP . Now WLED firmware will be flashed to the ESP. Wait until process is finished and you will see ADA message. Next steps: Quick start guide","title":"Installation using ESP GUI"},{"location":"basics/install-wled-flasher/#1-downloading-wled-firmware-bin-file","text":"You can find precompiled .bin files on the official release page . Also available alternative with precompiled usermods If you are not sure what binary you should use look at this page: What binary should I use?","title":"1. Downloading WLED firmware bin file"},{"location":"basics/install-wled-flasher/#2-downloading-the-esp-wled-flasher","text":"You can find and download flasher here ! After downloading a file, unzip it and start","title":"2. Downloading the ESP WLED Flasher"},{"location":"basics/install-wled-flasher/#3-flashing-firmware-bin-files","text":"When flasher start, choose Serial port (it must be a port your board is connected to). Next , choose downloaded BIN file . Click on Flash ESP . Now WLED firmware will be flashed to the ESP. Wait until process is finished and you will see ADA message. Next steps: Quick start guide","title":"3. Flashing firmware bin files"},{"location":"basics/tutorials/","text":"Don't know yet how to solder? Unsure how to connect your LEDs safely? How to find the perfect power supply? No worries, we have collected a few helpful links for you to learn more about these and more topics: WLED specific tutorials Resource Maker Type Info Beginner's guide to freak'n cool Holiday LEDs DrZzs Video (23:22) Excellent guide for getting started with WLED! How to Set Colors and Effects, Save Presets, Make Sync Groups, add a Button, & Macros for Scheduling DrZzs Video (23:39) Learn about some cool additional WLED features! Make your LEDs dance to music! DrZzs Video (11:30) How to install LedFx and connect it to WLED for quick sound reactive effects! Getting started with WLED tynick Article Complete and excellent guide on how to flash and get WLED up and running! How to Compile WLED (from scratch) Quindor Video (02:15:00) How to compile WLED yourself from scratch (most info in first 30 minutes) WLED with QuinLED-Dig-Uno Install Tutorial Quindor Video (11:13) Initial flash and setup of WLED on QuinLED-Dig-Uno board Integrating WLED into Home Assistant Quindor Video (8:22) How to use a WLED node in Home Assistant Holiday LEDs Step-by-step with WLED & Home Assistant KPeyanski Video (20:38) Complete and great wiring, installation and HA setup tutorial HOW-TO: Holiday LED Strip Lights, Home Assistant and WLED KPeyanski Article Same as the above video, but in text form! Smart Ping Pong LED Lamp - Quick&Simple DIY bitluni Video (18:19) Construction, wiring and flashing of a cool looking and easy to make lamp \u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c: \u041a\u0430\u043a \u043f\u0440\u043e\u0448\u0438\u0442\u044c WLED \u0438 LED FX \u0432 ESP01 \u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f WLED: \u0411\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0437\u0435\u0440\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u0443\u043d\u043d\u0435\u043b\u044c \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u0442\u043e\u043b\u0438\u043a\u0430 IKEA Lack Alchemist Video (9:16) / Video (13:09) \u041f\u0440\u043e\u0448\u0438\u0432\u043a\u0430, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043e\u0432 \u0438 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u0436\u0438\u043c\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u044b. \u041f\u0440\u0438\u043c\u0435\u0440 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0445\u0435\u043c\u044b. ESP8266 based LED controller for WS2812b strip. WLED Firmware + OpenHAB (in Russian) Room31 Video (17:04) How to use WLED on an ESP32 (german) Bitbastelei/Adlerweb Video (11:00) DIY Ambilight using WLED and a Relay jangrewe Article Wiki page with schematics and instructions for Hyperion, etc. Adding Smarts and Color to an IKEA Lamp apop880 Article Tutorial on upgrading a basic IKEA lamp with WLED Digital LED knowledge Resource Maker Type Info Adafruit NeoPixel \u00dcberguide Adafruit Article Everything that's important at a glance. Highly recommended for newcomers to digital LEDs Digital LED Power Usage Quindor Article/Spreadsheet/Video Helps you plan the power usage of your installation Power calculation and injection live stream Quindor Video (2:24:52) Tons of great questions and answers. Live calculations, drawings, 5v vs 12v, strip comparisons, etc. Difference between LED strip types The Hook Up Video (14:41) What is the best LED strip for your project? 7 Common LED Strip FAILS and How To Avoid Them The Hook Up Video (12:14) Make your project look much better! Power Injection demystified Spiker Lights Article What is power injection and how much do I need? Common(sharing) Ground / Multiple power supplies Article When using more than one power supply. Tools & Skills Resource Maker Type Info How to Solder Beauty and the Bolt Video (9:50) Soldering new leads to LED strip Quindor Video (8:24) Soldering Tutorial Part 2 EEVblog Video (34:05) Detailed tutorial on soldering, see parts 1 and 3 for even more info) Voltage Drop Calculator Tool Another Voltage Drop Calculator Tool Pixel/Bullet Voltage Drop Calc Tool 5 and 12V Combined Wire Gauge Calculator Tool Wire Size/Ampacity Tool Use chassis wiring Add more categories as needed :)","title":"Tutorials"},{"location":"basics/tutorials/#wled-specific-tutorials","text":"Resource Maker Type Info Beginner's guide to freak'n cool Holiday LEDs DrZzs Video (23:22) Excellent guide for getting started with WLED! How to Set Colors and Effects, Save Presets, Make Sync Groups, add a Button, & Macros for Scheduling DrZzs Video (23:39) Learn about some cool additional WLED features! Make your LEDs dance to music! DrZzs Video (11:30) How to install LedFx and connect it to WLED for quick sound reactive effects! Getting started with WLED tynick Article Complete and excellent guide on how to flash and get WLED up and running! How to Compile WLED (from scratch) Quindor Video (02:15:00) How to compile WLED yourself from scratch (most info in first 30 minutes) WLED with QuinLED-Dig-Uno Install Tutorial Quindor Video (11:13) Initial flash and setup of WLED on QuinLED-Dig-Uno board Integrating WLED into Home Assistant Quindor Video (8:22) How to use a WLED node in Home Assistant Holiday LEDs Step-by-step with WLED & Home Assistant KPeyanski Video (20:38) Complete and great wiring, installation and HA setup tutorial HOW-TO: Holiday LED Strip Lights, Home Assistant and WLED KPeyanski Article Same as the above video, but in text form! Smart Ping Pong LED Lamp - Quick&Simple DIY bitluni Video (18:19) Construction, wiring and flashing of a cool looking and easy to make lamp \u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c: \u041a\u0430\u043a \u043f\u0440\u043e\u0448\u0438\u0442\u044c WLED \u0438 LED FX \u0432 ESP01 \u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f WLED: \u0411\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0437\u0435\u0440\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u0443\u043d\u043d\u0435\u043b\u044c \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u0442\u043e\u043b\u0438\u043a\u0430 IKEA Lack Alchemist Video (9:16) / Video (13:09) \u041f\u0440\u043e\u0448\u0438\u0432\u043a\u0430, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043e\u0432 \u0438 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u0436\u0438\u043c\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u044b. \u041f\u0440\u0438\u043c\u0435\u0440 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0445\u0435\u043c\u044b. ESP8266 based LED controller for WS2812b strip. WLED Firmware + OpenHAB (in Russian) Room31 Video (17:04) How to use WLED on an ESP32 (german) Bitbastelei/Adlerweb Video (11:00) DIY Ambilight using WLED and a Relay jangrewe Article Wiki page with schematics and instructions for Hyperion, etc. Adding Smarts and Color to an IKEA Lamp apop880 Article Tutorial on upgrading a basic IKEA lamp with WLED","title":"WLED specific tutorials"},{"location":"basics/tutorials/#digital-led-knowledge","text":"Resource Maker Type Info Adafruit NeoPixel \u00dcberguide Adafruit Article Everything that's important at a glance. Highly recommended for newcomers to digital LEDs Digital LED Power Usage Quindor Article/Spreadsheet/Video Helps you plan the power usage of your installation Power calculation and injection live stream Quindor Video (2:24:52) Tons of great questions and answers. Live calculations, drawings, 5v vs 12v, strip comparisons, etc. Difference between LED strip types The Hook Up Video (14:41) What is the best LED strip for your project? 7 Common LED Strip FAILS and How To Avoid Them The Hook Up Video (12:14) Make your project look much better! Power Injection demystified Spiker Lights Article What is power injection and how much do I need? Common(sharing) Ground / Multiple power supplies Article When using more than one power supply.","title":"Digital LED knowledge"},{"location":"basics/tutorials/#tools-skills","text":"Resource Maker Type Info How to Solder Beauty and the Bolt Video (9:50) Soldering new leads to LED strip Quindor Video (8:24) Soldering Tutorial Part 2 EEVblog Video (34:05) Detailed tutorial on soldering, see parts 1 and 3 for even more info) Voltage Drop Calculator Tool Another Voltage Drop Calculator Tool Pixel/Bullet Voltage Drop Calc Tool 5 and 12V Combined Wire Gauge Calculator Tool Wire Size/Ampacity Tool Use chassis wiring Add more categories as needed :)","title":"Tools &amp; Skills"},{"location":"features/cct/","text":"White channel(s) handling Besides addressable RGB and RGBW bus types, WLED 0.13.0 also supports PWM CCT (correlated color temperature) lights. Auto white handling Many effects and realtime sources are based on an RGB color model, which necessitates a method to calculate a white channel value from the RGB value for lights that support more than RGB. WLED offers four auto white modes, one of which can be selected in LED settings using the option Auto-calculate white channel from RGB . This option is only shown if at least one bus with White channel support is present. Auto White mode Description Accurate This mode subtracts the calculated white value from the RGB channels. This gets rid of the \"RGB-white\" but means that the light is less bright with only the white channel and not the RGB channels being utilized for pure white. Brighter This does the exact opposite and not touch the RGB channels at all, just mix in the dedicated white. None No auto white calculation is performed. The white channel of colors can be manually set using the White channel slider in the user interface, RGB-only effects and most realtime sources will leave the white channel off. Dual The White channel slider is present in the UI and works the same as in None mode, however if the slider value is 0 (far left), the Brighter mode is used for auto white calculation. This is the default auto white mode. Accurate and Brighter methods are applied on a per-pixel basis, so they also work in color palettes and realtime effects! White Balance correction If enabled in LED settings, WB correction allows either making all pixels colder or warmer on a per-segment basis using a slider in the main user interface. This is applied to the RGB color only, after the auto white channel calculation. CCT handling WLED starting with version 0.13.0 also supports bus types with two white channels, one with a warm color temperature (e.g. 2700 Kelvin, reddish white) and one with a cold white color temperature (e.g. 8000 Kelvin, bluish white). Since as of the release of version 0.13.0 no adjustable CCT addressable LEDs are supported*, this only applies to PWM analog LED outputs. *SK6812 WWA (with 3 channels, warm white, cold white and amber) are supported, but treated as if RGB using the WS281x bus type. White spectrum support for this LED type will be added at a later point. The overall brightness of the white channels is determined from the auto-white calculation outlined above, and as such is identical in behavior to that of single white channel busses. The color temperature is set either on a per-segment basis via a dedicated slider in the UI, or if Calculate CCT from RGB is enabled in LED settings, is estimated on a per-pixel basis from the set RGB color (e.g. setting Red results in the warmest, setting Blue results in the coldest possible white). The former has the advantage of granular white spectrum control independent of the set RGB color, while the latter enables control of the color temperature from all effects and realtime sources. CCT additive blending Setting this to 0% results in a more even brightness output across the supported temperature range, as the fading between the warm and cold white channels is linear. Setting this to 100% results in the highest peak brightness output at the neutral white point (CCT value 127 ), as both white channels are active at 100%. Warning Make sure your setup can handle driving both white channels at maximum output simultaneously. This results in a higher heat output and might reduce the lifetime of your LEDs. For example, bulbs by Athom are designed for linear blending (0%) and may be damaged by attempting to use additive blending. You can limit the maximum allowed additive blending at build time using the WLED_MAX_CCT_BLEND macro. For example, add -D WLED_MAX_CCT_BLEND=0 to your build flags to force linear blending only. IC CCT By default, PWM CCT bus types set the value of the warm and cold white channels. If your hardware uses an IC that controls the color temperature based on one PWM signal and the overall brightness on the other, please use the build flag -D WLED_USE_IC_CCT in a custom compilation. (the 15W bulb by Athom uses this method) CCT in the JSON API Please see here for more info on how to handle WLED CCT from integrations.","title":"White handling"},{"location":"features/cct/#white-channels-handling","text":"Besides addressable RGB and RGBW bus types, WLED 0.13.0 also supports PWM CCT (correlated color temperature) lights.","title":"White channel(s) handling"},{"location":"features/cct/#auto-white-handling","text":"Many effects and realtime sources are based on an RGB color model, which necessitates a method to calculate a white channel value from the RGB value for lights that support more than RGB. WLED offers four auto white modes, one of which can be selected in LED settings using the option Auto-calculate white channel from RGB . This option is only shown if at least one bus with White channel support is present. Auto White mode Description Accurate This mode subtracts the calculated white value from the RGB channels. This gets rid of the \"RGB-white\" but means that the light is less bright with only the white channel and not the RGB channels being utilized for pure white. Brighter This does the exact opposite and not touch the RGB channels at all, just mix in the dedicated white. None No auto white calculation is performed. The white channel of colors can be manually set using the White channel slider in the user interface, RGB-only effects and most realtime sources will leave the white channel off. Dual The White channel slider is present in the UI and works the same as in None mode, however if the slider value is 0 (far left), the Brighter mode is used for auto white calculation. This is the default auto white mode. Accurate and Brighter methods are applied on a per-pixel basis, so they also work in color palettes and realtime effects!","title":"Auto white handling"},{"location":"features/cct/#white-balance-correction","text":"If enabled in LED settings, WB correction allows either making all pixels colder or warmer on a per-segment basis using a slider in the main user interface. This is applied to the RGB color only, after the auto white channel calculation.","title":"White Balance correction"},{"location":"features/cct/#cct-handling","text":"WLED starting with version 0.13.0 also supports bus types with two white channels, one with a warm color temperature (e.g. 2700 Kelvin, reddish white) and one with a cold white color temperature (e.g. 8000 Kelvin, bluish white). Since as of the release of version 0.13.0 no adjustable CCT addressable LEDs are supported*, this only applies to PWM analog LED outputs. *SK6812 WWA (with 3 channels, warm white, cold white and amber) are supported, but treated as if RGB using the WS281x bus type. White spectrum support for this LED type will be added at a later point. The overall brightness of the white channels is determined from the auto-white calculation outlined above, and as such is identical in behavior to that of single white channel busses. The color temperature is set either on a per-segment basis via a dedicated slider in the UI, or if Calculate CCT from RGB is enabled in LED settings, is estimated on a per-pixel basis from the set RGB color (e.g. setting Red results in the warmest, setting Blue results in the coldest possible white). The former has the advantage of granular white spectrum control independent of the set RGB color, while the latter enables control of the color temperature from all effects and realtime sources.","title":"CCT handling"},{"location":"features/cct/#cct-additive-blending","text":"Setting this to 0% results in a more even brightness output across the supported temperature range, as the fading between the warm and cold white channels is linear. Setting this to 100% results in the highest peak brightness output at the neutral white point (CCT value 127 ), as both white channels are active at 100%. Warning Make sure your setup can handle driving both white channels at maximum output simultaneously. This results in a higher heat output and might reduce the lifetime of your LEDs. For example, bulbs by Athom are designed for linear blending (0%) and may be damaged by attempting to use additive blending. You can limit the maximum allowed additive blending at build time using the WLED_MAX_CCT_BLEND macro. For example, add -D WLED_MAX_CCT_BLEND=0 to your build flags to force linear blending only.","title":"CCT additive blending"},{"location":"features/cct/#ic-cct","text":"By default, PWM CCT bus types set the value of the warm and cold white channels. If your hardware uses an IC that controls the color temperature based on one PWM signal and the overall brightness on the other, please use the build flag -D WLED_USE_IC_CCT in a custom compilation. (the 15W bulb by Athom uses this method)","title":"IC CCT"},{"location":"features/cct/#cct-in-the-json-api","text":"Please see here for more info on how to handle WLED CCT from integrations.","title":"CCT in the JSON API"},{"location":"features/effects-palettes/","text":"Effects To aid in showing where colors vs palettes are used, all effects are rendered with the Party palette and the colors primary secondary tertiary colors EffectID Name Description Intensity slider effect 0 Solid Solid primary color on all LEDs - 1 Blink Blinks between primary and secondary color Duty cycle of blinking 2 Breathe Fades between primary and secondary color - 3 Wipe Switches between primary and secondary, switching LEDs one by one, start to end Smoothness 4 Wipe Random Same as Wipe, but uses random colors Smoothness 5 Random Colors Applies a new random color to all LEDs Duration of fading between colors 6 Sweep Switches between primary and secondary, switching LEDs one by one, start to end to start Smoothness 7 Dynamic Sets each LED to a random color 0-127: Set single LED 128-255: Set all LEDs 8 Colorloop Cycle all LEDs through the rainbow colors 0-127: Pastel colors 128-255: Saturated colors 9 Rainbow Displays rainbow colors along the whole strip Number of rainbows 10 Scan A single primary colored light wanders between start and end Scan dot size 11 Scan Dual Same as Scan but uses two lights starting at both ends scan dot size 12 Fade Fades smoothly between primary and secondary color - 13 Theater Pattern of one lit and two unlit LEDs running Gap in lights 14 Theater Rainbow Same as Theater but uses colors of the rainbow - 15 Running Sine Waves scrolling Wavelength 16 Saw Sawtooth Waves scrolling Wavelength 17 Twinkle Random LEDs light up in the primary color with secondary as background, turns all off Amount of LEDs turning on 18 Dissolve Fills LEDs with primary in random order, then off again Dissolve rate 19 Dissolve Rnd Fills LEDs with random colors in random order, then off again Dissolve rate 20 Sparkle Single random LEDs light up in the primary color for a short time, secondary is background - 21 Sparkle Dark All LEDs are lit in the primary color, single random LEDs turn off for a short time - 22 Sparkle+ All LEDs are lit in the primary color, multiple random LEDs turn off for a short time - 23 Strobe All LEDs are lit in the secondary color, all LEDs flash in a single short burst in primary color - 24 Strobe Rainbow Same as strobe, cycles through the rainbow - 25 Strobe Mega All LEDs are lit in the secondary color, all LEDs flash in several short bursts in primary color - 26 Blink Rainbow Same as blink, cycles through the rainbow Blink Duty cycle 27 Android Section of varying length running Maximum section length 28 Chase 2 LEDs in primary color running on secondary Size of chaser 29 Chase Random Like Chase but leaves trail of random color Size of chaser 30 Chase Rainbow Like 28 but leaves trail of rainbow Size of chaser 31 Chase Flash 2 LEDs flash in secondary color while the rest is lit in primary. The flashing LEDs wander from start to end - 32 Chase Flash Rnd Like Chase Flash, but the 2 LEDs flash in random colors and leaves a random color behind - 33 Rainbow Runner Like Chase, but the 2 LEDs light up in rainbow colors and leave a primary color trail Size of chaser 34 Colorful Shifting Red-Amber-Green-Blue pattern 0-127: Pastel colors 128-255: Saturated colors 35 Traffic Light Emulates a traffic light Over 140 skips red / yellow transition 36 Sweep Random Like Sweep, but uses random colors Smoothness 37 Running 2 Pattern of n LEDs primary and n LEDs secondary moves along the strip Amount of LEDs lit/unlit 38 Aurora Simulation of the Aurora Borealis Number of waves 39 Stream Flush bands random hues along the string Width of each band (lower is wider) 40 Scanner Dot moves between ends, leaving behind a fading trail Fade rate 41 Lighthouse Dot moves from start to end, leaving behind a fading trail Fade rate 42 Fireworks Random color blobs light up, then fade again Amount of fireworks 43 Rain Like Fireworks, but the blobs move Amout of Rain 44 Tetrix Falling blocks stack - 45 Fire Flicker LEDs randomly flickering Flickering intensity 46 Gradient Moves a saturation gradient of the primary color along the strip Gradient width 47 Loading Moves a sawtooth pattern along the strip Width 48 Police A red and a blue dot running Size of dots 49 Police All Two areas, one red and one blue, sweeping - 50 Two Dots Like Police, but with custom colors Size of dots 51 Two Areas Like Police All, but with custom colors - 52 Running Dual Sine waves in both directions Number of waves 53 Halloween Running 2, but always uses orange and purple Amount of LEDs lit/unlit 54 Tri Chase Like Chase, but with 3 colors Width of pattern 55 Tri Wipe Like Wipe but turns LEDs off as \"third color\" - 56 Tri Fade Fades the whole strip from primary color to secondary color to off - 57 Lightning Short random white strobe similar to a lightning bolt Amount of strobes 58 ICU Two \"eyes\" running on opposite sides of the strip - 59 Multi Comet Like Scanner, but creates multiple trails Fade rate 60 Scanner Dual Like Scanner, but with two dots running on opposite sides Fade rate 61 Stream 2 Flush random hues along the string - 62 Oscillate Areas of primary and secondary colors move between opposite ends, combining colors where they touch - 63 Pride 2015 Rainbow cycling with brightness variation - 64 Juggle Eight colored dots running, leaving trails Fade rate 65 Palette Running color palette - 66 Fire 2012 Simulates flickering fire in red and yellow Sparkling of fire 67 Colorwaves Like Pride 2015, but uses palettes - 68 BPM Pulses moving back and forth on palette BPM setting 69 Fill Noise Noise pattern - 70 Noise 1 Fast Noise shift pattern - 71 Noise 2 Fast Noise shift pattern - 72 Noise 3 Noise shift pattern - 73 Noise 4 Noise sparkle pattern - 74 Colortwinkles LEDs light up randomly in random colors and fade off again Twinkle rate 75 Lake Calm palette waving - 76 Meteor The primary color creates a trail of randomly decaying color Fade rate 77 Meteor Smooth Smoothly animated meteor Fade rate 78 Railway Shows primary and secondary color on alternating LEDs. All LEDs fade to their opposite color and back again Duty cycle of fade transition 79 Ripple Effect resembling random water ripples Rate of new ripples 80 Twinklefox FastLED gentle twinkling with slow fade in/out Density 81 Twinklecat Twinkling with fast in / slow out Density 82 Halloween Eyes One Pair of blinking eyes at random intervals along strip Fading rade of eyes 83 Solid Pattern Speed sets number of LEDs on, intensity sets off Amount of LEDs turned off 84 Solid Pattern Tri Solid Pattern with three colors Amount of LEDs of each color 85 Spots Solid lights with even distance Size of each spot 86 Spots Fade Spots, getting bigger and smaller Fading of each spot 87 Glitter Rainbow with white sparkles Amount of glitter 88 Candle Flicker resembling a candle flame Intensity of flickering 89 Fireworks Starburst Exploding multicolor fireworks Fragment count 90 Fireworks 1D one dimension fireworks with flare Firing side 91 Bouncing Balls Bouncing ball effect Number of balls 92 Sinelon Fastled sinusoidal moving eye Fade rate 93 Sinelon Dual Sinelon from both directions Fade rate 94 Sinelon Rainbow Sinelon in rainbow colours Fade rate 95 Popcorn popping kernels Number of kernels 96 Drip Water dripping effect Intensity of dripping 97 Plasma Plasma lamp Max brightness 98 Percent Lights up a percentage of segment Percentage 99 Ripple Rainbow Like ripple, but with a dimly lit changing background Rate of new ripples 100 Heartbeat led strip pulsing rhythm similar to a heart beat - 101 Pacifica Gentle, blue-green ocean waves (one color palette currently) Intensity of waves 102 Candle Multi Like candle effect, but each LED has it's own flicker pattern Intensity of flicker 103 Solid Glitter Like Glitter, but with solid color background Amount of glitter 104 Sunrise Simulates a gradual sunrise or sunset. Speed sets: 0 - static sun, 1 - 60: sunrise time in minutes, 60 - 120: sunset time in minutes - 60, above: \"breathing\" rise and set Sun intensity 105 Phased Sine waves (in sourcecode) Wave brightness against background 106 TwinkleUp Twinkle effect with fade-in Amount of Twinkles 107 Noise Pal Peaceful noise that's slow and with gradually changing palettes Wave intensity 108 Sine Controllable sine waves Sinewave frequency 109 Phased Noise Noisy sine waves Wave brightness against background 110 Flow Blend of palette and spot effects waveform frequency 111 Chunchun Birds flying in a circle formation Number of birds 112 Dancing Shadows Moving spotlights Number of spotlights 113 Washing machine Alternating direction (in source) Size of lit sections 114 Candy Cane Running 2 in Red & White Amount of LEDs lit/unlit 115 Blends Blends random colors across palette Blend speed 116 TV Simulator TV light spill simulation - 117 Dynamic Smooth Like Dynamic, but with smooth palette blends 0-127: Set single LED 128-255: Set all LEDs Palettes PaletteID Name Description 0 Default The palette is automatically selected depending on the effect. For most effects, this is the primary color 1 Random Cycle The palette changes to a random one every few seconds. Subject to change 2 Color 1 A palette consisting only of the primary color 3 Colors 1 & 2 Consists of the primary and secondary color 4 Color Gradient A palette which is a mixture of all segment colors 5 Colors Only Contains primary, secondary and tertiary colors 6 Party Rainbow without green hues 7 Cloud Gray-blueish colors 8 Lava Dark red, yellow and bright white 9 Ocean Blue, teal and white colors 10 Forest Yellow and green hues 11 Rainbow Every hue 12 Rainbow bands Rainbow colors with black spots in-between 13 Sunset Dark blue with purple, red and yellow hues 14 Rivendell Desaturated greens 15 Breeze Teal colors with varying brightness 16 Red & Blue Red running on blue 17 Yellowout Yellow, fading out 18 Analoguous Red running on blue 19 Splash Vibrant pink and magenta 20 Pastel Different hues with very little saturation 21 Sunset 2 Yellow and white running on dim blue 22 Beech Different shades of light blue 23 Vintage Warm white running on very dim red 24 Departure Greens and white fading out 25 Landscape Blue, white and green gradient 26 Beach Teal and yellow gradient fading out 27 Sherbet Bright white, pink and mint colors 28 Hult White, magenta and teal 29 Hult 64 Teal and yellow hues 30 Drywet Blue and yellow gradient 31 Jul Pastel green and red 32 Grintage Yellow fading out 33 Rewhi Bright orange on desaturated purple 34 Tertiary Red, green and blue gradient 35 Fire White, yellow and fading red gradient 36 Icefire Same as Fire, but with blue colors 37 Cyane Desaturated pastel colors 38 Light Pink Desaturated purple hues 39 Autumn Three white fields surrounded by yellow and dim red 40 Magenta White with magenta and blue 41 Magred Magenta and red hues 42 Yelmag Magenta and red hues with a yellow 43 Yelblu Blue with a little yellow 44 Orange & Teal An Orange - Gray - Teal gradient 45 Tiamat A bright meteor with blue, teal and magenta hues 46 April Night Dark blue background with colorful snowflakes 47 Orangery Orange and yellow tones 48 C9 Christmas lights palette. Red - amber - green - blue 49 Sakura Pink and rose tones 50 Aurora Greens on dark blue 51 Atlantica Greens & Blues of the ocean 52 C9 2 C9 plus yellow 53 C9 New C9, but brighter and with a less purple blue 54 Temperature Temperature mapping 55 Aurora 2 Aurora with some pinks & blue 56 Retro Clown Yellow to purple gradient 57 Candy Vivid yellows, magenta, salmon and blues 58 Toxy Reaf Vivid aqua to purple gradient 59 Fairy Reaf Bright aqua to purple gradient 60 Semi Blue Dark blues with a bright blue burst 61 Pink Candy White, pinks and purple 62 Red Reaf Blue, aqua and red gradient 63 Aqua Flash Aqua gradient with a flash of yellow and white 64 Yelblu Hot Yellow, red, blue spectrum 65 Lite Light Faint white and purple 66 Red Flash Red gradient with burst of white in the center 67 Blink Red Dark blue to dark red gradient with burst of purple 68 Red Shift Vibrant yellow to blue gradient with magenta, purple and red 69 Red Tide Waves of yellow, orange and red 70 Candy2 Faded gradient of yellow, salmon and blue","title":"Effects & Palettes"},{"location":"features/effects-palettes/#effects","text":"To aid in showing where colors vs palettes are used, all effects are rendered with the Party palette and the colors primary secondary tertiary colors EffectID Name Description Intensity slider effect 0 Solid Solid primary color on all LEDs - 1 Blink Blinks between primary and secondary color Duty cycle of blinking 2 Breathe Fades between primary and secondary color - 3 Wipe Switches between primary and secondary, switching LEDs one by one, start to end Smoothness 4 Wipe Random Same as Wipe, but uses random colors Smoothness 5 Random Colors Applies a new random color to all LEDs Duration of fading between colors 6 Sweep Switches between primary and secondary, switching LEDs one by one, start to end to start Smoothness 7 Dynamic Sets each LED to a random color 0-127: Set single LED 128-255: Set all LEDs 8 Colorloop Cycle all LEDs through the rainbow colors 0-127: Pastel colors 128-255: Saturated colors 9 Rainbow Displays rainbow colors along the whole strip Number of rainbows 10 Scan A single primary colored light wanders between start and end Scan dot size 11 Scan Dual Same as Scan but uses two lights starting at both ends scan dot size 12 Fade Fades smoothly between primary and secondary color - 13 Theater Pattern of one lit and two unlit LEDs running Gap in lights 14 Theater Rainbow Same as Theater but uses colors of the rainbow - 15 Running Sine Waves scrolling Wavelength 16 Saw Sawtooth Waves scrolling Wavelength 17 Twinkle Random LEDs light up in the primary color with secondary as background, turns all off Amount of LEDs turning on 18 Dissolve Fills LEDs with primary in random order, then off again Dissolve rate 19 Dissolve Rnd Fills LEDs with random colors in random order, then off again Dissolve rate 20 Sparkle Single random LEDs light up in the primary color for a short time, secondary is background - 21 Sparkle Dark All LEDs are lit in the primary color, single random LEDs turn off for a short time - 22 Sparkle+ All LEDs are lit in the primary color, multiple random LEDs turn off for a short time - 23 Strobe All LEDs are lit in the secondary color, all LEDs flash in a single short burst in primary color - 24 Strobe Rainbow Same as strobe, cycles through the rainbow - 25 Strobe Mega All LEDs are lit in the secondary color, all LEDs flash in several short bursts in primary color - 26 Blink Rainbow Same as blink, cycles through the rainbow Blink Duty cycle 27 Android Section of varying length running Maximum section length 28 Chase 2 LEDs in primary color running on secondary Size of chaser 29 Chase Random Like Chase but leaves trail of random color Size of chaser 30 Chase Rainbow Like 28 but leaves trail of rainbow Size of chaser 31 Chase Flash 2 LEDs flash in secondary color while the rest is lit in primary. The flashing LEDs wander from start to end - 32 Chase Flash Rnd Like Chase Flash, but the 2 LEDs flash in random colors and leaves a random color behind - 33 Rainbow Runner Like Chase, but the 2 LEDs light up in rainbow colors and leave a primary color trail Size of chaser 34 Colorful Shifting Red-Amber-Green-Blue pattern 0-127: Pastel colors 128-255: Saturated colors 35 Traffic Light Emulates a traffic light Over 140 skips red / yellow transition 36 Sweep Random Like Sweep, but uses random colors Smoothness 37 Running 2 Pattern of n LEDs primary and n LEDs secondary moves along the strip Amount of LEDs lit/unlit 38 Aurora Simulation of the Aurora Borealis Number of waves 39 Stream Flush bands random hues along the string Width of each band (lower is wider) 40 Scanner Dot moves between ends, leaving behind a fading trail Fade rate 41 Lighthouse Dot moves from start to end, leaving behind a fading trail Fade rate 42 Fireworks Random color blobs light up, then fade again Amount of fireworks 43 Rain Like Fireworks, but the blobs move Amout of Rain 44 Tetrix Falling blocks stack - 45 Fire Flicker LEDs randomly flickering Flickering intensity 46 Gradient Moves a saturation gradient of the primary color along the strip Gradient width 47 Loading Moves a sawtooth pattern along the strip Width 48 Police A red and a blue dot running Size of dots 49 Police All Two areas, one red and one blue, sweeping - 50 Two Dots Like Police, but with custom colors Size of dots 51 Two Areas Like Police All, but with custom colors - 52 Running Dual Sine waves in both directions Number of waves 53 Halloween Running 2, but always uses orange and purple Amount of LEDs lit/unlit 54 Tri Chase Like Chase, but with 3 colors Width of pattern 55 Tri Wipe Like Wipe but turns LEDs off as \"third color\" - 56 Tri Fade Fades the whole strip from primary color to secondary color to off - 57 Lightning Short random white strobe similar to a lightning bolt Amount of strobes 58 ICU Two \"eyes\" running on opposite sides of the strip - 59 Multi Comet Like Scanner, but creates multiple trails Fade rate 60 Scanner Dual Like Scanner, but with two dots running on opposite sides Fade rate 61 Stream 2 Flush random hues along the string - 62 Oscillate Areas of primary and secondary colors move between opposite ends, combining colors where they touch - 63 Pride 2015 Rainbow cycling with brightness variation - 64 Juggle Eight colored dots running, leaving trails Fade rate 65 Palette Running color palette - 66 Fire 2012 Simulates flickering fire in red and yellow Sparkling of fire 67 Colorwaves Like Pride 2015, but uses palettes - 68 BPM Pulses moving back and forth on palette BPM setting 69 Fill Noise Noise pattern - 70 Noise 1 Fast Noise shift pattern - 71 Noise 2 Fast Noise shift pattern - 72 Noise 3 Noise shift pattern - 73 Noise 4 Noise sparkle pattern - 74 Colortwinkles LEDs light up randomly in random colors and fade off again Twinkle rate 75 Lake Calm palette waving - 76 Meteor The primary color creates a trail of randomly decaying color Fade rate 77 Meteor Smooth Smoothly animated meteor Fade rate 78 Railway Shows primary and secondary color on alternating LEDs. All LEDs fade to their opposite color and back again Duty cycle of fade transition 79 Ripple Effect resembling random water ripples Rate of new ripples 80 Twinklefox FastLED gentle twinkling with slow fade in/out Density 81 Twinklecat Twinkling with fast in / slow out Density 82 Halloween Eyes One Pair of blinking eyes at random intervals along strip Fading rade of eyes 83 Solid Pattern Speed sets number of LEDs on, intensity sets off Amount of LEDs turned off 84 Solid Pattern Tri Solid Pattern with three colors Amount of LEDs of each color 85 Spots Solid lights with even distance Size of each spot 86 Spots Fade Spots, getting bigger and smaller Fading of each spot 87 Glitter Rainbow with white sparkles Amount of glitter 88 Candle Flicker resembling a candle flame Intensity of flickering 89 Fireworks Starburst Exploding multicolor fireworks Fragment count 90 Fireworks 1D one dimension fireworks with flare Firing side 91 Bouncing Balls Bouncing ball effect Number of balls 92 Sinelon Fastled sinusoidal moving eye Fade rate 93 Sinelon Dual Sinelon from both directions Fade rate 94 Sinelon Rainbow Sinelon in rainbow colours Fade rate 95 Popcorn popping kernels Number of kernels 96 Drip Water dripping effect Intensity of dripping 97 Plasma Plasma lamp Max brightness 98 Percent Lights up a percentage of segment Percentage 99 Ripple Rainbow Like ripple, but with a dimly lit changing background Rate of new ripples 100 Heartbeat led strip pulsing rhythm similar to a heart beat - 101 Pacifica Gentle, blue-green ocean waves (one color palette currently) Intensity of waves 102 Candle Multi Like candle effect, but each LED has it's own flicker pattern Intensity of flicker 103 Solid Glitter Like Glitter, but with solid color background Amount of glitter 104 Sunrise Simulates a gradual sunrise or sunset. Speed sets: 0 - static sun, 1 - 60: sunrise time in minutes, 60 - 120: sunset time in minutes - 60, above: \"breathing\" rise and set Sun intensity 105 Phased Sine waves (in sourcecode) Wave brightness against background 106 TwinkleUp Twinkle effect with fade-in Amount of Twinkles 107 Noise Pal Peaceful noise that's slow and with gradually changing palettes Wave intensity 108 Sine Controllable sine waves Sinewave frequency 109 Phased Noise Noisy sine waves Wave brightness against background 110 Flow Blend of palette and spot effects waveform frequency 111 Chunchun Birds flying in a circle formation Number of birds 112 Dancing Shadows Moving spotlights Number of spotlights 113 Washing machine Alternating direction (in source) Size of lit sections 114 Candy Cane Running 2 in Red & White Amount of LEDs lit/unlit 115 Blends Blends random colors across palette Blend speed 116 TV Simulator TV light spill simulation - 117 Dynamic Smooth Like Dynamic, but with smooth palette blends 0-127: Set single LED 128-255: Set all LEDs","title":"Effects"},{"location":"features/effects-palettes/#palettes","text":"PaletteID Name Description 0 Default The palette is automatically selected depending on the effect. For most effects, this is the primary color 1 Random Cycle The palette changes to a random one every few seconds. Subject to change 2 Color 1 A palette consisting only of the primary color 3 Colors 1 & 2 Consists of the primary and secondary color 4 Color Gradient A palette which is a mixture of all segment colors 5 Colors Only Contains primary, secondary and tertiary colors 6 Party Rainbow without green hues 7 Cloud Gray-blueish colors 8 Lava Dark red, yellow and bright white 9 Ocean Blue, teal and white colors 10 Forest Yellow and green hues 11 Rainbow Every hue 12 Rainbow bands Rainbow colors with black spots in-between 13 Sunset Dark blue with purple, red and yellow hues 14 Rivendell Desaturated greens 15 Breeze Teal colors with varying brightness 16 Red & Blue Red running on blue 17 Yellowout Yellow, fading out 18 Analoguous Red running on blue 19 Splash Vibrant pink and magenta 20 Pastel Different hues with very little saturation 21 Sunset 2 Yellow and white running on dim blue 22 Beech Different shades of light blue 23 Vintage Warm white running on very dim red 24 Departure Greens and white fading out 25 Landscape Blue, white and green gradient 26 Beach Teal and yellow gradient fading out 27 Sherbet Bright white, pink and mint colors 28 Hult White, magenta and teal 29 Hult 64 Teal and yellow hues 30 Drywet Blue and yellow gradient 31 Jul Pastel green and red 32 Grintage Yellow fading out 33 Rewhi Bright orange on desaturated purple 34 Tertiary Red, green and blue gradient 35 Fire White, yellow and fading red gradient 36 Icefire Same as Fire, but with blue colors 37 Cyane Desaturated pastel colors 38 Light Pink Desaturated purple hues 39 Autumn Three white fields surrounded by yellow and dim red 40 Magenta White with magenta and blue 41 Magred Magenta and red hues 42 Yelmag Magenta and red hues with a yellow 43 Yelblu Blue with a little yellow 44 Orange & Teal An Orange - Gray - Teal gradient 45 Tiamat A bright meteor with blue, teal and magenta hues 46 April Night Dark blue background with colorful snowflakes 47 Orangery Orange and yellow tones 48 C9 Christmas lights palette. Red - amber - green - blue 49 Sakura Pink and rose tones 50 Aurora Greens on dark blue 51 Atlantica Greens & Blues of the ocean 52 C9 2 C9 plus yellow 53 C9 New C9, but brighter and with a less purple blue 54 Temperature Temperature mapping 55 Aurora 2 Aurora with some pinks & blue 56 Retro Clown Yellow to purple gradient 57 Candy Vivid yellows, magenta, salmon and blues 58 Toxy Reaf Vivid aqua to purple gradient 59 Fairy Reaf Bright aqua to purple gradient 60 Semi Blue Dark blues with a bright blue burst 61 Pink Candy White, pinks and purple 62 Red Reaf Blue, aqua and red gradient 63 Aqua Flash Aqua gradient with a flash of yellow and white 64 Yelblu Hot Yellow, red, blue spectrum 65 Lite Light Faint white and purple 66 Red Flash Red gradient with burst of white in the center 67 Blink Red Dark blue to dark red gradient with burst of purple 68 Red Shift Vibrant yellow to blue gradient with magenta, purple and red 69 Red Tide Waves of yellow, orange and red 70 Candy2 Faded gradient of yellow, salmon and blue","title":"Palettes"},{"location":"features/macros/","text":"Info Also see Presets for 0.11.0+. You are able to set custom actions (\"Macros\") in Time & Macro settings for the following events: Specific time of day Button short/long/double press HTTP API call executing a macro with &M= Alexa On/Off Countdown over Timed light duration over Device (re)boot (up to 0.10.2, use LED settings Boot preset in 0.11) Each macro has the format of a standard HTTP API call without the IP. Optionally, the \"win&\" may be omitted. For example, the macro \"A=255\" sets the brightness to maximum. \"R=255&G=160&B=0\" sets the color to orange. You can specify up to 16 macros. (up to 250 in WLED 0.11 since the Macro functionality has been merged into the Presets feature) Examples of how to use API-calls and define macros can be found in this issue and in this one . The simplest macro example is getting a button to do your bidding. The default pin to which a button can be connected is GPIO 0 (D3 on NodeMCU, D1 Mini and others). This pin is ideally pulled high to 3.3V with a 10k resistor and the configured macro executes when the pin is pulled low (grounded). The desired macro is entered on the Time/Macros configuration page and then assigned to a short, long or double press. Like this: The \"T=2\" macro toggles power to the LEDs (in this case long press). The \"FX=~\" macro steps through the effects (in this case short press). You can set a preset to P1=1&P2=3&PL=~ , enter the preset number for your button, and this will step through presets 1 and 3. Change the \"3\" to whatever your highest preset is that you want to include. The default (built-in) actions for button 0 are short-press: toggle on/off and long-press: select random color. Long-pressing for more than 6 seconds will open the WLED-AP with the default password ( wled1234 ). For further buttons, the default action for short press is cycling effects, long press ramp brightness, and double press cycle palettes. Buttons Multiple buttons are implemented since 0.13 and allow a few different types of buttons to be connected to the ESP: momentary push-buttons that short GPIO pin to ground momentary push-buttons that short GPIO pin to +3.3V (inverted) switches (be careful with selection of GPIO for switch since some GPIOs will prevent successful boot of ESP if held LOW or HIGH at boot) PIR switch AKA motion detection sensor (they set GPIO HIGH when motion is detected, this type of buttons will also trigger MQTT message with /motion topic) some GPIO pins on ESP32 can act as momentary touch buttons with no additional hardware analog \"buttons\" (also with inverted logic) those can be used as potentiometers or analog input buttons Button GPIO pin and type can be selected in the LED Settings page. Each momentary button can have 3 different Presets assigned, for short press, long press or double press. For switch type buttons you can assign only 2 presets, one for transition of switch from LOW to HIGH and second for the opposite transition from HIGH to LOW. Selecting 0 for preset will use the default action. If you find that the default action is inverted for switch, please create presets for On and Off actions and assign them appropriately. For assigning Presets to buttons use Time & Macros settings page. Analog button Starting in WLED 0.13, analog \"buttons\" (e.g. a potentiometer) are supported. With the Short and Long columns set to 0, set the Double column in Button Actions to one of these values to configure: Property Value Global brightness 250 Effect speed 249 Effect intensity 248 Palette 247 Primary color hue 200 Segment N opacity 0-32 This potentiometer should be supplied 3.3V and GND, with it's output supplied to A0 (or any other ADC pin you specify), recommended 10K\u03a9 or greater. Do not use ESP32 ADC2 GPIO pins for analog buttons On ESP8266, you can only have a single analog button on pin A0, the pin set in the settings UI is ignored. On ESP32, only ADC1 pins will work for analog input while WiFi is active (pins 32-39). ADC2 pins will not work. Global brightness Users planning to use a potentiometer for global brightness should be aware that wled is configured to turn off when the potentiometer is adjusted to either extreme - both maximum and minimum adjustments. Users who desire to disable this functionality may do so on the hardware side by adding resistors between the potentiometer and the rails. Adding a resistor between the potentiometer and 3.3V prevents A0 from fully reaching 3.3V and allows the potentiometer to be adjusted to the maximum adjustment without powering off wled. A value of 7.5%-10% of the potentiometer value should be sufficient for this (~750\u03a9 for a 10K\u03a9 potentiometer). Similarly, added resistance between the potentiometer and GND prevents A0 from reaching 0V, and allows the potentiometer to be adjusted to the minimum adjustment without powering off wled. A value of 3-5% of the potentiometer value should be sufficient (~500\u03a9 for a 10K\u03a9 potentiomenter). In both instances, the added resistances will slightly reduce the overall adjustment range, with a larger reduction for larger resistor choices. As such, A user who desires the maximum possible adjustment range should determine their needed resistance values experimentally by installing the potentiometer, adjusting for stable behavior at the desired extrema, measuring the voltage on A0, using the voltage divider equation to determine the optimal resistance, then retesting for confirmation.","title":"Macros"},{"location":"features/macros/#buttons","text":"Multiple buttons are implemented since 0.13 and allow a few different types of buttons to be connected to the ESP: momentary push-buttons that short GPIO pin to ground momentary push-buttons that short GPIO pin to +3.3V (inverted) switches (be careful with selection of GPIO for switch since some GPIOs will prevent successful boot of ESP if held LOW or HIGH at boot) PIR switch AKA motion detection sensor (they set GPIO HIGH when motion is detected, this type of buttons will also trigger MQTT message with /motion topic) some GPIO pins on ESP32 can act as momentary touch buttons with no additional hardware analog \"buttons\" (also with inverted logic) those can be used as potentiometers or analog input buttons Button GPIO pin and type can be selected in the LED Settings page. Each momentary button can have 3 different Presets assigned, for short press, long press or double press. For switch type buttons you can assign only 2 presets, one for transition of switch from LOW to HIGH and second for the opposite transition from HIGH to LOW. Selecting 0 for preset will use the default action. If you find that the default action is inverted for switch, please create presets for On and Off actions and assign them appropriately. For assigning Presets to buttons use Time & Macros settings page.","title":"Buttons"},{"location":"features/macros/#analog-button","text":"Starting in WLED 0.13, analog \"buttons\" (e.g. a potentiometer) are supported. With the Short and Long columns set to 0, set the Double column in Button Actions to one of these values to configure: Property Value Global brightness 250 Effect speed 249 Effect intensity 248 Palette 247 Primary color hue 200 Segment N opacity 0-32 This potentiometer should be supplied 3.3V and GND, with it's output supplied to A0 (or any other ADC pin you specify), recommended 10K\u03a9 or greater. Do not use ESP32 ADC2 GPIO pins for analog buttons On ESP8266, you can only have a single analog button on pin A0, the pin set in the settings UI is ignored. On ESP32, only ADC1 pins will work for analog input while WiFi is active (pins 32-39). ADC2 pins will not work.","title":"Analog button"},{"location":"features/macros/#global-brightness","text":"Users planning to use a potentiometer for global brightness should be aware that wled is configured to turn off when the potentiometer is adjusted to either extreme - both maximum and minimum adjustments. Users who desire to disable this functionality may do so on the hardware side by adding resistors between the potentiometer and the rails. Adding a resistor between the potentiometer and 3.3V prevents A0 from fully reaching 3.3V and allows the potentiometer to be adjusted to the maximum adjustment without powering off wled. A value of 7.5%-10% of the potentiometer value should be sufficient for this (~750\u03a9 for a 10K\u03a9 potentiometer). Similarly, added resistance between the potentiometer and GND prevents A0 from reaching 0V, and allows the potentiometer to be adjusted to the minimum adjustment without powering off wled. A value of 3-5% of the potentiometer value should be sufficient (~500\u03a9 for a 10K\u03a9 potentiomenter). In both instances, the added resistances will slightly reduce the overall adjustment range, with a larger reduction for larger resistor choices. As such, A user who desires the maximum possible adjustment range should determine their needed resistance values experimentally by installing the potentiometer, adjusting for stable behavior at the desired extrema, measuring the voltage on A0, using the voltage divider equation to determine the optimal resistance, then retesting for confirmation.","title":"Global brightness"},{"location":"features/multi-strip/","text":"Multi strip support Starting in WLED 0.12.0, you are able to use multiple LED outputs from one ESP board! Pins and LED numbers can be easily configured in LED settings, you don't need to re-compile code for your specific setup. Custom binaries for multiple pins are now also a thing of the past! There are a few tips and recomendations to keep in mind when designing your setup: General It is highly recommended to use an ESP32 when using more than 1 output You may freely choose the LEDs type, pin numbers, length and color order of your LED strips at runtime in the LED settings page Highly recommeded to size power supply correctly according to your setup and disable the WLED brightness limiter setting to increase framerate with very large LED counts Most strip types have yet to be tested. Add confirmed working below: Confirmed working: WS281x, SK6812 RGBW, PWM white ESP8266 There is a maximum of 3 strips supported. It is highly recommended to use two specific LED pins, GPIO1 (TX) and GPIO2 (D4), since they allow for hardware driving. It is recommended to use 512 LEDs/pin for good performance for a total of 1024 LEDs. 800 LEDs/pin for a total of 1600 has been confirmed working, but is not recommended for good performance and reliability. Using GPIO1 will disable serial debugging. If you need it, you can't use a strip on this pin. GPIO3 is the third pin that allows hardware driving on ESP8266. However, it uses 5 times as much memory per LED as GPIO 1 and 2, so use it only for low LED counts (recommended <50) You can use any other pin, but it will use the bitbang method, which is not recommended for reliability. It is best to stick to GPIO 1, 2, and if need be, 3. Using pin GPIO16 for WS2812b LEDs did not work in my testing. ESP8266 can calculate about 15k LEDs per second (that means 250LEDs @~60fps, 500 LEDs @~30fps, 1000 LEDs @~15fps) The LED settings will give you a bar that shows how much memory you can allocate. ESP32 There is a maximum of 10 strips supported Contrary to the ESP8266, the pin usage does not matter on ESP32, feel free to use any available pin For perfect performance, it is recommeded to use 512 LEDs/pin with 4 outputs for a total of 2048 LEDs. For very good performance, it is recommended to use 800 LEDs/pin with 4 outputs for a total of 3200 LEDs. For good performance, you can use 1000 LEDs/pin with 4 outputs for a total of 4000 LEDs. For okay performance, you can use 1000 LEDs/pin with 5 outputs for a total of 5000 LEDs. For okay performance, you can use 800 LEDs/pin with 6 outputs for a total of 4800 LEDs. ESP32 can calculate about 65k-85k LEDs per second (that means 1000 LEDs @~70fps, 2000 LEDs @~35fps, 4000 LEDs @~18fps) 4 outputs seem to be the sweet spot. Virtual LEDs (DDP) You can now add virtual LEDs which are distributed across one or more ESPs. Select DDP RGB (Network) as the LED type and enter the LED count and IP address for each. An ESP32 is best for this role, but you can use up to 300 LEDs with an ESP8266. Note that this is only RGB data (no white) for now.","title":"Multi-strip Support"},{"location":"features/multi-strip/#multi-strip-support","text":"Starting in WLED 0.12.0, you are able to use multiple LED outputs from one ESP board! Pins and LED numbers can be easily configured in LED settings, you don't need to re-compile code for your specific setup. Custom binaries for multiple pins are now also a thing of the past! There are a few tips and recomendations to keep in mind when designing your setup:","title":"Multi strip support"},{"location":"features/multi-strip/#general","text":"It is highly recommended to use an ESP32 when using more than 1 output You may freely choose the LEDs type, pin numbers, length and color order of your LED strips at runtime in the LED settings page Highly recommeded to size power supply correctly according to your setup and disable the WLED brightness limiter setting to increase framerate with very large LED counts Most strip types have yet to be tested. Add confirmed working below: Confirmed working: WS281x, SK6812 RGBW, PWM white","title":"General"},{"location":"features/multi-strip/#esp8266","text":"There is a maximum of 3 strips supported. It is highly recommended to use two specific LED pins, GPIO1 (TX) and GPIO2 (D4), since they allow for hardware driving. It is recommended to use 512 LEDs/pin for good performance for a total of 1024 LEDs. 800 LEDs/pin for a total of 1600 has been confirmed working, but is not recommended for good performance and reliability. Using GPIO1 will disable serial debugging. If you need it, you can't use a strip on this pin. GPIO3 is the third pin that allows hardware driving on ESP8266. However, it uses 5 times as much memory per LED as GPIO 1 and 2, so use it only for low LED counts (recommended <50) You can use any other pin, but it will use the bitbang method, which is not recommended for reliability. It is best to stick to GPIO 1, 2, and if need be, 3. Using pin GPIO16 for WS2812b LEDs did not work in my testing. ESP8266 can calculate about 15k LEDs per second (that means 250LEDs @~60fps, 500 LEDs @~30fps, 1000 LEDs @~15fps) The LED settings will give you a bar that shows how much memory you can allocate.","title":"ESP8266"},{"location":"features/multi-strip/#esp32","text":"There is a maximum of 10 strips supported Contrary to the ESP8266, the pin usage does not matter on ESP32, feel free to use any available pin For perfect performance, it is recommeded to use 512 LEDs/pin with 4 outputs for a total of 2048 LEDs. For very good performance, it is recommended to use 800 LEDs/pin with 4 outputs for a total of 3200 LEDs. For good performance, you can use 1000 LEDs/pin with 4 outputs for a total of 4000 LEDs. For okay performance, you can use 1000 LEDs/pin with 5 outputs for a total of 5000 LEDs. For okay performance, you can use 800 LEDs/pin with 6 outputs for a total of 4800 LEDs. ESP32 can calculate about 65k-85k LEDs per second (that means 1000 LEDs @~70fps, 2000 LEDs @~35fps, 4000 LEDs @~18fps) 4 outputs seem to be the sweet spot.","title":"ESP32"},{"location":"features/multi-strip/#virtual-leds-ddp","text":"You can now add virtual LEDs which are distributed across one or more ESPs. Select DDP RGB (Network) as the LED type and enter the LED count and IP address for each. An ESP32 is best for this role, but you can use up to 300 LEDs with an ESP8266. Note that this is only RGB data (no white) for now.","title":"Virtual LEDs (DDP)"},{"location":"features/presets/","text":"Presets can be used to save your favorite light configurations to apply later! You can compare them to the \"scenes\" feature present in some other smart devices. New version (0.11+) Overview WLED 0.11.0 contains a major overhaul of presets, storing them in a /presets.json file in an internal filesystem. This enables many new features, you can now have up to 250 presets and each of them can save all segments which are set up! Speaking of segments, the maximum number has been increased to 12 on ESP8266 and 16 on ESP32! Presets can now also contain both HTTP and JSON API commands, replacing the previous Macro functionality. Each preset can be named, so you'll be able to access it more easily! How to use The new preset system is quite a bit more advanced than the previous one, thus it is likely not as self-explanatory to use. Here you can find what each setting does and how to make best use of it! \"Create Preset\" button Use this to save the current state as a permanent preset, or to add a new API macro. Preset name Enter a nice name for your preset here. I would recommend putting something short, but to the point here, like Epic fireworks or Slow fade . All special characters and emoji are permitted (however, there must not be more than 6 consecutive whitespaces) If you leave this empty, you'll get a name based on the preset ID number, like Preset 16 . Quick load label You can optionally add a short label up to 2 characters or 1 emoji long. It will show up in a small circle on top of the preset list for extra quick access without scrolling! I recommend using this for the presets you truly love. Use current state/Overwrite with state This is enabled by default when adding a new preset and disabled when editing an existing preset. When enabled, it will write the current segment config, including all colors and effect, to the preset. When disabled, it will instead give you a textfield to enter a custom API command or show you the command currently saved. Include brightness If disabled, the brightness value is not included in the preset. This can be useful e.g. when you want to control the brightness manually and want the preset to only set the effect. Save segment bounds This is an important one. Make sure it is enabled for your boot preset, so that your segment config is properly restored on boot! When disabled, the segment start and stop LEDs are not included in the preset. This can be useful if you plan to make changes to your segment setup and don't want your presets to always reset it to the point it was when the preset was saved. API command This accepts any HTTP or JSON API command! (only visible if the current state checkbox is unchecked) It replaces the previous macro functionality. If you know your JSON, you can even create playlists of other presets! Save to ID This is the ID the preset will be saved to. When creating a new preset, you likely won't have to change it as the lowest unused ID will be chosen automatically. If you change the ID on an existing preset and save, you can copy it to the new ID - change the name though. Save and Delete buttons Now these are self-explanatory, but I said I'd cover each point :) ID This is the number you'll want to use to apply this preset from a timed macro or automation! A note on performance This new preset system is quite fast where it matters, reading the presets. Applying a preset will typically take less than a tenth of a second. However, due to a design choice of the LittleFS filesystem used by WLED, random writes to the preset file are very resource intensive. This means that while updating your presets, you might notice your light freezing and becoming unresponsive for up to a few seconds. Adding new presets is usually very fast, those performance issues will occur once you delete/edit/overwrite older presets and your preset file becomes very large, or when adding presets after deleting older ones. I'm looking into ways to mitigate this situation as soon as possible! Meanwhile, to keep things snappy, I would recommend not having more than 50-ish single segment or a dozen of multi-segment presets. What about my cool presets from earlier versions? Don't worry, they (as well as your settings) will be automatically imported to the new system! And if you ever need to downgrade to v0.10 for some reason, they will still be there (although any changes made in v0.11 won't be applied) Obtaining preset list Obtaining the preset list is possible with the /presets.json file Seeing the name of the current preset with the API only is not possible, you can only obtain its ID. Then you'd need some code to match it with the entries from presets.json (this is also what the UI does). See section \"Backing up/restoring presets\". Saving named presets Save a named preset with {\"psave\":<preset number here>;\"n\":\"Preset name\",\"ib\":true,\"sb\":true} Backing up/restoring presets To backup all presets, go to [WLED-IP]/edit (OTA lock must be off), right click the presets.json file and download! To restore, use the Choose file and Upload buttons. Applying presets at a certain time of day Tip If you want to create a preset that turns on the light to the last effect displayed, uncheck Use current state and enter T=1 into the API Command field. WLED supports schedules - that is, applying presets at a certain time automatically. Here is a simple guide to get it set up quickly! Creates the preset(s) you want to load at specific time(s) Note the preset ID - the small gray number to the left of the preset name (or, in the bottom of the preset menu) Go to the Time & Macros section in the WLED settings. Make sure the time displayed is correct and accurate. It is highly recommended to enable NTP for a reliable schedule. Do not forget to set the correct timezone. If applicable, daylight saving time is handled automatically. Scroll down to Time-controlled presets . There are 8 different timer slots available. Enter the hour, minute, and weekdays you want the preset to activate. In the Preset column, enter the preset ID you noted earlier. Save the settings page! You have successfully set up a schedule :) Note This only applies the preset at the start of the specified minute. If you set up two presets, one to turn on the light at 7 and another to turn it off at 8, if WLED is booted at 7:30, the light will not turn on. This should not be an issue in most applications. Applying presets at sunrise and sunset Applying a preset at sunrise and/or sunset is also supported, the last two timed preset slots are used for this. To calculate the times, WLED needs your location. This is possible with the \"Get Location\" button in Time & Macro settings if accessed via a browser. If you are using the WLED app, you will need to open locate.wled.me in your browser and copy the coordinates over to the settings page manually. With the Minutes input field, you may specify an offset of up to 59 minutes before or 59 minutes after the actual sunrise/set time. Location Sunrise and sunset calculation do not work if you live in the polar circles (latitude >66.6N or >66.6S). Earlier versions (up to 0.10) There are 16 preset slots in total. In 0.9.0, the last preset (16) is capable of saving the entire segment configuration. All other presets only save a single segment (main segment, the first one by default) and restore that preset to all selected segments. In the Favorites tab, the number buttons from 1-16 are the different save slots. Find a config you like, then toggle Saving mode on and click on a number to save the preset to that slot. If Saving mode is toggled off, you can restore presets with a single click. Preset cycle (up to 0.12.1) With this feature, you can create an animation by automatically swapping between presets within a specified range. Keep in mind that any changes you make to effects/colors will be overridden once the system applies the next preset. If you want to start the preset cycle on boot, go to LED settings and tick \"Save current preset cycle configuration as boot default To modify the duration of the preset cycle, ensure the preset cycle box is unchecked before entering a new time value. Once updated, the preset cycle can be enabled again\" Playlists supersede Preset cycle in 0.13.","title":"Presets"},{"location":"features/presets/#new-version-011","text":"","title":"New version (0.11+)"},{"location":"features/presets/#overview","text":"WLED 0.11.0 contains a major overhaul of presets, storing them in a /presets.json file in an internal filesystem. This enables many new features, you can now have up to 250 presets and each of them can save all segments which are set up! Speaking of segments, the maximum number has been increased to 12 on ESP8266 and 16 on ESP32! Presets can now also contain both HTTP and JSON API commands, replacing the previous Macro functionality. Each preset can be named, so you'll be able to access it more easily!","title":"Overview"},{"location":"features/presets/#how-to-use","text":"The new preset system is quite a bit more advanced than the previous one, thus it is likely not as self-explanatory to use. Here you can find what each setting does and how to make best use of it! \"Create Preset\" button Use this to save the current state as a permanent preset, or to add a new API macro. Preset name Enter a nice name for your preset here. I would recommend putting something short, but to the point here, like Epic fireworks or Slow fade . All special characters and emoji are permitted (however, there must not be more than 6 consecutive whitespaces) If you leave this empty, you'll get a name based on the preset ID number, like Preset 16 . Quick load label You can optionally add a short label up to 2 characters or 1 emoji long. It will show up in a small circle on top of the preset list for extra quick access without scrolling! I recommend using this for the presets you truly love. Use current state/Overwrite with state This is enabled by default when adding a new preset and disabled when editing an existing preset. When enabled, it will write the current segment config, including all colors and effect, to the preset. When disabled, it will instead give you a textfield to enter a custom API command or show you the command currently saved. Include brightness If disabled, the brightness value is not included in the preset. This can be useful e.g. when you want to control the brightness manually and want the preset to only set the effect. Save segment bounds This is an important one. Make sure it is enabled for your boot preset, so that your segment config is properly restored on boot! When disabled, the segment start and stop LEDs are not included in the preset. This can be useful if you plan to make changes to your segment setup and don't want your presets to always reset it to the point it was when the preset was saved. API command This accepts any HTTP or JSON API command! (only visible if the current state checkbox is unchecked) It replaces the previous macro functionality. If you know your JSON, you can even create playlists of other presets! Save to ID This is the ID the preset will be saved to. When creating a new preset, you likely won't have to change it as the lowest unused ID will be chosen automatically. If you change the ID on an existing preset and save, you can copy it to the new ID - change the name though. Save and Delete buttons Now these are self-explanatory, but I said I'd cover each point :) ID This is the number you'll want to use to apply this preset from a timed macro or automation!","title":"How to use"},{"location":"features/presets/#a-note-on-performance","text":"This new preset system is quite fast where it matters, reading the presets. Applying a preset will typically take less than a tenth of a second. However, due to a design choice of the LittleFS filesystem used by WLED, random writes to the preset file are very resource intensive. This means that while updating your presets, you might notice your light freezing and becoming unresponsive for up to a few seconds. Adding new presets is usually very fast, those performance issues will occur once you delete/edit/overwrite older presets and your preset file becomes very large, or when adding presets after deleting older ones. I'm looking into ways to mitigate this situation as soon as possible! Meanwhile, to keep things snappy, I would recommend not having more than 50-ish single segment or a dozen of multi-segment presets.","title":"A note on performance"},{"location":"features/presets/#what-about-my-cool-presets-from-earlier-versions","text":"Don't worry, they (as well as your settings) will be automatically imported to the new system! And if you ever need to downgrade to v0.10 for some reason, they will still be there (although any changes made in v0.11 won't be applied)","title":"What about my cool presets from earlier versions?"},{"location":"features/presets/#obtaining-preset-list","text":"Obtaining the preset list is possible with the /presets.json file Seeing the name of the current preset with the API only is not possible, you can only obtain its ID. Then you'd need some code to match it with the entries from presets.json (this is also what the UI does). See section \"Backing up/restoring presets\".","title":"Obtaining preset list"},{"location":"features/presets/#saving-named-presets","text":"Save a named preset with {\"psave\":<preset number here>;\"n\":\"Preset name\",\"ib\":true,\"sb\":true}","title":"Saving named presets"},{"location":"features/presets/#backing-uprestoring-presets","text":"To backup all presets, go to [WLED-IP]/edit (OTA lock must be off), right click the presets.json file and download! To restore, use the Choose file and Upload buttons.","title":"Backing up/restoring presets"},{"location":"features/presets/#applying-presets-at-a-certain-time-of-day","text":"Tip If you want to create a preset that turns on the light to the last effect displayed, uncheck Use current state and enter T=1 into the API Command field. WLED supports schedules - that is, applying presets at a certain time automatically. Here is a simple guide to get it set up quickly! Creates the preset(s) you want to load at specific time(s) Note the preset ID - the small gray number to the left of the preset name (or, in the bottom of the preset menu) Go to the Time & Macros section in the WLED settings. Make sure the time displayed is correct and accurate. It is highly recommended to enable NTP for a reliable schedule. Do not forget to set the correct timezone. If applicable, daylight saving time is handled automatically. Scroll down to Time-controlled presets . There are 8 different timer slots available. Enter the hour, minute, and weekdays you want the preset to activate. In the Preset column, enter the preset ID you noted earlier. Save the settings page! You have successfully set up a schedule :) Note This only applies the preset at the start of the specified minute. If you set up two presets, one to turn on the light at 7 and another to turn it off at 8, if WLED is booted at 7:30, the light will not turn on. This should not be an issue in most applications.","title":"Applying presets at a certain time of day"},{"location":"features/presets/#applying-presets-at-sunrise-and-sunset","text":"Applying a preset at sunrise and/or sunset is also supported, the last two timed preset slots are used for this. To calculate the times, WLED needs your location. This is possible with the \"Get Location\" button in Time & Macro settings if accessed via a browser. If you are using the WLED app, you will need to open locate.wled.me in your browser and copy the coordinates over to the settings page manually. With the Minutes input field, you may specify an offset of up to 59 minutes before or 59 minutes after the actual sunrise/set time. Location Sunrise and sunset calculation do not work if you live in the polar circles (latitude >66.6N or >66.6S).","title":"Applying presets at sunrise and sunset"},{"location":"features/presets/#earlier-versions-up-to-010","text":"There are 16 preset slots in total. In 0.9.0, the last preset (16) is capable of saving the entire segment configuration. All other presets only save a single segment (main segment, the first one by default) and restore that preset to all selected segments. In the Favorites tab, the number buttons from 1-16 are the different save slots. Find a config you like, then toggle Saving mode on and click on a number to save the preset to that slot. If Saving mode is toggled off, you can restore presets with a single click.","title":"Earlier versions (up to 0.10)"},{"location":"features/presets/#preset-cycle-up-to-0121","text":"With this feature, you can create an animation by automatically swapping between presets within a specified range. Keep in mind that any changes you make to effects/colors will be overridden once the system applies the next preset. If you want to start the preset cycle on boot, go to LED settings and tick \"Save current preset cycle configuration as boot default To modify the duration of the preset cycle, ensure the preset cycle box is unchecked before entering a new time value. Once updated, the preset cycle can be enabled again\" Playlists supersede Preset cycle in 0.13.","title":"Preset cycle (up to 0.12.1)"},{"location":"features/relay-control/","text":"Digital LED strips still use power when seemingly switched off, about 1W per 200 LEDs. In case you want to prevent that, you can completely cut power to the LEDs by adding a relay to your circuit. It is toggled by WLED when WLED is turned on/off (in the UI, or through other interfaces). No pin is allocated for a relay by default, but can be easily set in the LED preferences page. Previously, GPIO12 (Pin D6 on many devices) was set as the default and is confirmed to work well on most boards except the ESP32-C3. When you decide that you want WLED to control a relay, make sure you buy a suitable relay board. Check what voltage you can supply from your controller to relay (available 3.3V or 5V pin or different voltage from external power source), and make sure the relay can be controlled by voltage level your board is providing (3.3V CMOS, 5V TTL). Note, some relays come with a jumper that lets you configure whether the relay switches at high or low level of signal, giving you maximum flexibility. This page gives a clear description using a light bulb instead of a LED strip. And instead of the D1 mentioned there, with WLED, you use the pin you set. The default WLED behavior is to turn the relay pin on (high) when the LEDs are on and off (low) when the LEDs are off. This can be changed in the LED Preferences page. Many relays are powered when the signal is LOW. See this thread . Sometimes people ask whether they can control more than one relay through WLED, including controlling this all via Alexa. Controlling an extra relay separately from the RGB lights is not something WLED is designed to do, however you can modify the code to add that functionality. For that, make sure you can compile WLED from source unmodified first. Then, change #define ESPALEXA_MAXDEVICES 1 in line 71 of the wled.h file to 2. After that, just follow the API documentation on https://github.com/Aircoookie/Espalexa to add a new EspalexaDevice to the alexa.cpp file Second option for controlling multiple relays is using a Multi Relay usermod. As with Alexa you will need to compile WLED from source an include Multi Relay usermod either by including -D USERMOD_MULTI_RELAY in PlatformIO.ini or adding #define USERMOD_MULTI_RELAY in wled.h or my_config.h . You can also override default number of relays by defining MULTI_RELAY_MAX_RELAYS . Configuring usermod is done using Usermod settings page where you can define GPIO pins used, wether relay activates on HIGH or LOW logic, if the activation has any delay and if the relay can be controlled from the outside using MQTT message (external). MQTT topic for controlling relays is wled/[device]/relay/[relay_id]/command and accepts on , off and toggle messages. When the relay changes state a message with on or off is sent with the topic wled/[device]/relay/[relay_id] . How To: Use WLED to switch external relay with PIR sensor without affecting WLED state If you do not want PIR (motion) sensor attached to WLED controller to trigger change of WLED state, but still want to control a legacy light, fan, etc. use the Multi Relay usermod and another relay attached to WLED controller. Create two presets for relay control (shown for switching relay off) and set up PIR and multi relay usermods as shown. If you do not want button relay control just leave relay button at -1, the same goes for PIR sensor parameters (leave nighttime-only and/or off-only unchecked). Adjust preset numbers and GPIO pins to your liking. Multi relay usermod can also switch relay using MQTT messages or HTTP requests (check source code for available commands). Of course if you configured MQTT on your WLED device PIR sensor usermod will publish /motion topic to MQTT broker for your HA integration.","title":"Relay Control"},{"location":"features/segments/","text":"Info Starting in WLED 0.9.0, Segments are supported. This feature allows you to set different zones on the LED strip, each running a different effect or color. A segment is selected if the checkmark next to the segment number is checked. Changes you make to color or effects will apply to all selected segments. The color/effect that is shown in the web UI is that of the first selected segment. There is one main segment , Segment 0 by default. This segment has a few important differences to the rest of the segments. - Color transitions only work on the main segment - The main segment's color is the one that will be reported to HTTP and MQTT APIs Tip: If you divide your strip into two segments, reverse the second one and select both, you can achieve very nice symmetrical effects! Segment 0 has a Start LED of 0 and a Stop LED equal to the LED Count you defined in Configuration, LED Preferences. The Stop LED is not included in the Segment. Currently you can create a maximum of 10 segments. Presets 1-15 use only Segment 0 by default. Preset 16 is the only Preset that saves settings for Segments 1-10. To display segment information select the down arrow in the Segment box. To add a Segment select \u201c+ Add Segment\u201d. Enter the Start and Stop LED as appropriate. Grouping and Spacing control the organization of the LEDs within the selected effect. To reverse the direction of an effect select Reverse Direction. To delete a Segment select the trash can. To save your Segment settings select the checkmark to the right of the Start and Stop LED numbers. Grouping and Spacing When an effect changes the color of one LED, it is really changing the color of one LED group. Since the default group size is one, the effect normally only changes a single LED. When Grouping is set to two, the effect will light two LEDs using the same color. The two LEDs are treated as a single virtual LED. To illustrate this, we can create a segment with 12 LEDS (physically referred to as LED 0 to LED 11) and select an effect that repeats three colors. When Grouping is set to one we see a repeating pattern of one red LED, one blue LED, and one green LED. When Grouping is set to two the segment of 12 physical LEDs becomes a segment of 6 virtual LEDs (virtualLED 0 to virtualLED 5). The same effect will now set the color of each virtual LED (which consists of two physical LEDs). The pattern becomes two red LEDs followed by two blue LEDs then two green LEDs. Setting LED Output Grouping 1 Spacing 0 Grouping 2 Spacing 0 As the pattern cycles, the group of LEDs will move together. Setting LED Output Grouping 1 Spacing 0 Grouping 2 Spacing 0 Spacing controls the space or gap between LEDs. The default spacing is zero, so normally there is no space between LEDs. When Spacing is set to one, every other LED will be lit. The number of virtual LEDs in the strip will be half the number of physical LEDs. Again, we can create a segment with 12 LEDS (physically referred to as LED 0 to LED 11) and select an effect that repeats three colors. When Spacing is set to zero we see a repeating pattern of one red LED, one blue LED, and one green LED. When Spacing is set to one the segment of 12 physical LEDs becomes a segment of 6 virtual LEDs (virtualLED 0 to virtualLED 5). The same effect will now set the color of each virtual LED (which consists of the even numbered physical LEDs). The pattern becomes one red LED followed by a blank LED, one blue LED followed by a blank LED, then one green LED followed by a blank LED. Setting LED Output Grouping 1 Spacing 0 Grouping 1 Spacing 1 As the pattern cycles, only the virtual LEDs will be lit - the blank LEDs in between the virtual LEDs will always be off. Setting LED Output Grouping 1 Spacing 0 Grouping 1 Spacing 1 Grouping and Spacing can be combined to create many different custom LED layouts. In the example below, the strip of 12 physical LEDs has been configured to function as four virtual LEDs with a small gap between them. Setting LED Output Grouping 2 Spacing 1 Grouping 2 Spacing 1 Interleaving This is an easy way to get a repeating pattern of colors using one segment per color. Offset in a segment By default effects start in the first LED in the segment and finish in the last one. If the offset parameter in a segment is used, the effect start will be moved by the number of positions entered. It will continue to the last LED and then finish with the initial positions that were skipped. For instance, let's assume assume a strip of 12 LEDs with the positions numbered as follows (like the examples above): An offset value of 5 will make the effect start in the physical position 5, continue to position 11 and then finish with positions 0 through 4, like this: A negative offset value is allowed and represents an offset starting from the last position in the segment. In our previous example, an offset of -2 will start the effect in position 10, like this: The offset values is prioritized over grouping and/or spacing. For example, if the offset is 2, grouping 4 and spacing 1, the first group of 4 LEDs will start at the physical position number 2.","title":"Segments"},{"location":"features/segments/#grouping-and-spacing","text":"When an effect changes the color of one LED, it is really changing the color of one LED group. Since the default group size is one, the effect normally only changes a single LED. When Grouping is set to two, the effect will light two LEDs using the same color. The two LEDs are treated as a single virtual LED. To illustrate this, we can create a segment with 12 LEDS (physically referred to as LED 0 to LED 11) and select an effect that repeats three colors. When Grouping is set to one we see a repeating pattern of one red LED, one blue LED, and one green LED. When Grouping is set to two the segment of 12 physical LEDs becomes a segment of 6 virtual LEDs (virtualLED 0 to virtualLED 5). The same effect will now set the color of each virtual LED (which consists of two physical LEDs). The pattern becomes two red LEDs followed by two blue LEDs then two green LEDs. Setting LED Output Grouping 1 Spacing 0 Grouping 2 Spacing 0 As the pattern cycles, the group of LEDs will move together. Setting LED Output Grouping 1 Spacing 0 Grouping 2 Spacing 0 Spacing controls the space or gap between LEDs. The default spacing is zero, so normally there is no space between LEDs. When Spacing is set to one, every other LED will be lit. The number of virtual LEDs in the strip will be half the number of physical LEDs. Again, we can create a segment with 12 LEDS (physically referred to as LED 0 to LED 11) and select an effect that repeats three colors. When Spacing is set to zero we see a repeating pattern of one red LED, one blue LED, and one green LED. When Spacing is set to one the segment of 12 physical LEDs becomes a segment of 6 virtual LEDs (virtualLED 0 to virtualLED 5). The same effect will now set the color of each virtual LED (which consists of the even numbered physical LEDs). The pattern becomes one red LED followed by a blank LED, one blue LED followed by a blank LED, then one green LED followed by a blank LED. Setting LED Output Grouping 1 Spacing 0 Grouping 1 Spacing 1 As the pattern cycles, only the virtual LEDs will be lit - the blank LEDs in between the virtual LEDs will always be off. Setting LED Output Grouping 1 Spacing 0 Grouping 1 Spacing 1 Grouping and Spacing can be combined to create many different custom LED layouts. In the example below, the strip of 12 physical LEDs has been configured to function as four virtual LEDs with a small gap between them. Setting LED Output Grouping 2 Spacing 1 Grouping 2 Spacing 1","title":"Grouping and Spacing"},{"location":"features/segments/#interleaving","text":"This is an easy way to get a repeating pattern of colors using one segment per color.","title":"Interleaving"},{"location":"features/segments/#offset-in-a-segment","text":"By default effects start in the first LED in the segment and finish in the last one. If the offset parameter in a segment is used, the effect start will be moved by the number of positions entered. It will continue to the last LED and then finish with the initial positions that were skipped. For instance, let's assume assume a strip of 12 LEDs with the positions numbered as follows (like the examples above): An offset value of 5 will make the effect start in the physical position 5, continue to position 11 and then finish with positions 0 through 4, like this: A negative offset value is allowed and represents an offset starting from the last position in the segment. In our previous example, an offset of -2 will start the effect in position 10, like this: The offset values is prioritized over grouping and/or spacing. For example, if the offset is 2, grouping 4 and spacing 1, the first group of 4 LEDs will start at the physical position number 2.","title":"Offset in a segment"},{"location":"features/settings/","text":"All web configurable settings are split in 5 sub-pages. This page is meant to clarify the purpose of each setting. This documentation applies to WLED 0.8.5. Settings overview WiFi Settings This sub-page offers options to connect the ESP to different WiFi/WLAN devices. Setting name Value Range Description Network Name String 0..32 The name (SSID) of your home WiFi. Spaces and some other characters are not supported. Network password String 0..64 The password of your home WiFi Static IP 4x 0..256 An optional static IPv4 address Static gateway 4x 0..255 In a static config, your gateway's IPv4 address Static subnet 4x 0..255 In a static config, this normally is 255.255.255.0 mDNS address String 0..32 Name of your device for the Bonjour/Zeroconf protocol Client IP - The current IP of the ESP in the home network AP SSID String 0..32 The name of the ESPs internal WiFi hotspot (Access Point) Hide AP name Y/N The ESPs Access Point won't appear in WiFi lists of other devices AP password String 0..64 The password of the ESPs WiFi Access Point AP WiFi channel 1..13 The 2.4G WiFi band of the AP. For advanced users AP opens select Condition on when to open the AP AP IP - The Access Point IPv4 address of the ESP (is 192.168.4.1 in most cases) WiFi sleep Y/N Disabling WiFi sleep can increase reliability, but increases power consumption LED settings This sub-page configures the state of your lights. Setting name Value Range Description LED count 1..1500 How many LEDs are in your WS2812B strip Automatic brightness limiter Y/N Limit brightness to stay in a given current range Maximum current 300..65000 Current limit im milliamps LED voltage select Voltage/type of LEDs Custom max. current 1..255 Custom current per LED on full white 4-channel LEDs (RGBW) Y/N Support for SK6812 LEDs with white channel Color order select If your LEDs display incorrect colors (red and green swapped), try changing it Auto-calculate white select Get white channel from RGB automatically (only applicable for RGBW) Details Turn on after power up Y/N Whether the lights should turn on after a reset Apply preset 0..16 Preset to load at boot (0 = none) Set current preset cycle... Y/N The current preset cycle configuration will be used as boot default Use Gamma for brightness Y/N Will correct brightness changes to make it appear more linear. Advised to leave off Use Gamma for color Y/N Will correct colors to match those on a monitor. Strongly advised to keep on Brightness factor 1..255 Factor to change master brightness if it is to dim/bright for a certain configuration Crossfade Y/N Whether to have a smooth fading transitional effect when changing colors/brightness Transition time 0..65535 How many milliseconds the transition lasts Enable transition for secondary color Y/N Enable Palette transitions Y/N Enable transitions for palettes (not affected by transition time) Timed light duration 1..255 How long the nightlight should stay on Target brightness 0..255 What brightness the light should have after time is over. 0=off. Fade down Y/N Gradually fades down the light over the duration instead of turning it off at the end Palette blending select Choose how the palette wraps at the end (seam) Reverse LED order Y/N Mirrors the LEDs (last LED is first) Skip first LED Y/N Will turn off the first LED and shift the remaining by 1 (1st LED used as a signal repeater) User Interface settings This sub-page changes the look of the web interface. Setting name Value Range Description Server description String 1..32 The name of the device as shown on the top of the UI. Differs from Alexa device name Sync button toggles... Y/N If enabled, both send and receive are toggled by the button in UI. If disabled, only sending is toggled and receiving is kept as configured in Sync settings. Sync settings This sub-page configures external software synchronization interfaces. Setting name Value Range Description On/Off button enabled Y/N Check if there is a physical pushbutton connected to GPIO0 Infrared receiver type select Type of infrared receiver Broadcast UDP port 1..65535 All WLED lights you want to group together must have the same port Receive Brightness Y/N If there is a sync notification, whether its brightness should be applied Color Y/N Whether the color of the synced device should be applied Effects Y/N Whether the effect settings should be applied Send on direct change Y/N Whether to send a sync notification when state changed via web UI or API Send on button press Y/N Whether to send sync when toggled by button or IR Send Alexa notifications Y/N Whether to send sync after changed by Alexa (you may use Alexa groups instead) Send Hue notifications Y/N Whether to send sync after a connected Philips light changed Send Macro notifications Y/N Whether to send sync after a macro was triggered Send notifications twice Y/N Sends notifications twice (if you have issues with UDP packet loss) Receive UDP realtime Y/N Receive live UDP stream data (DRGB, WARLS, ...) Use E1.31 multicast Y/N Listen on multicast IP instead of unicast E1.31 start universe 1..63000 Only applies for multicast. If you want to set different content, set ESPs at least 8 universes apart Timeout 100..65000 Time after which to resume normal mode once stream has stopped. 65000 will keep the data indefinitely Force max brightness Y/N Realtime stream with max. brightness (unless limited by power brightness limiter) Disable realtime gamma correction Y/N Check if your host software does gamma correction already Realtime LED offset -255..255 Shift the realtime input by how many LEDs Emulate Alexa device Y/N Allows you to control the light via the Amazon Echo voice assistant. Requires reboot Alexa Invocation name String 1..32 The name you want the device to have for control via Alexa. Choose something easy she can understand Device Auth token String 40 You will get this in an e-mail during Blynk setup MQTT Broker IP or String 0..32 Connect to this host MQTT broker Device topic String 0..32 MQTT topic unique to this light Group topic String 0..32 MQTT topic for all lights in a group (room, floor, ...) Hue Bridge IP 4x 0..255 Your Hue bridge IPv4 address. Should be static to avoid reassigning Poll Hue light 0..99 The ID of the hue lamp you want to sync WLED to every x ms 100..65000 How often to poll. Smaller numbers decrease lag but might hurt bridge responsiveness ... Y/N Turn polling on/off Receive On/Off Y/N Turn on/off like the hue light Brightness Y/N Set brightness to that of the hue light Color Y/N Set color to that of the hue light Hue status - Shows the current connection status to a hue bridge Baud rate Various Set the default Serial connection Baud Rate Time settings This sub-page configures automation tasks. Setting name Value Range Description Get time from NTP Y/N Whether to get the current time from the internet Use 24h format Y/N Use 24h clock format instead of AM/PM Time zone - Your time zone. Open an issue if yours is unsupported. DST is applied automatically UTC offset -65000..65000 Seconds to offset. If you want e.g. 1h offset, use 3600 Current local time - The local time the ESP has acquired. If set up correctly, should equal actual time Clock overlay - The special overlay to use. Allows to display a clock on the strip Countdown mode Y/N Allows to have a visual countdown towards a specific date API macro fields 16x String 0..64 Allows you to define custom API calls which can be triggered by events Boot Macro 0..16 Which macro to trigger after WiFi connected (0 is default action) Alexa On/Off Macros 2x 0..16 Which macros to trigger when turning on/off via Alexa Button Macro 0..16 Macro to trigger if button is short pressed. Default action is on/off toggle. Long Press 0..16 Macro to trigger if button is long pressed (>0.7s). Default action is random color. Double press 0..16 Macro for double click on button. Countdown-Over Macro 0..16 Macro to trigger when the countdown is over Timed-Light-Over Macro 0..16 Macro to trigger when timed light is done Security settings This sub-page manages permissions and updates. Setting name Value Range Description Enable OTA lock Y/N If enabled, no firmware updates may be done via WiFi and some settings can't be changed. Passphrase String 0..32 To disable OTA lock, you need a password. The default is \"wledota\". Change it! Deny access to WiFi settings Y/N Disables changes to WiFi settings while locked Disable recovery AP Y/N If enabled, the module will not open an Access Point if connection to home WiFi failed. Factory reset Y/N Deletes all custom settings data (passwords, configuration, macros, presets) Manual OTA - If OTA is enabled, you can upload new binary firmware Enable ArduinoOTA Y/N Useful for developers. Be careful, can even be left on when OTA locked!","title":"Settings"},{"location":"features/settings/#settings-overview","text":"","title":"Settings overview"},{"location":"features/settings/#wifi-settings","text":"This sub-page offers options to connect the ESP to different WiFi/WLAN devices. Setting name Value Range Description Network Name String 0..32 The name (SSID) of your home WiFi. Spaces and some other characters are not supported. Network password String 0..64 The password of your home WiFi Static IP 4x 0..256 An optional static IPv4 address Static gateway 4x 0..255 In a static config, your gateway's IPv4 address Static subnet 4x 0..255 In a static config, this normally is 255.255.255.0 mDNS address String 0..32 Name of your device for the Bonjour/Zeroconf protocol Client IP - The current IP of the ESP in the home network AP SSID String 0..32 The name of the ESPs internal WiFi hotspot (Access Point) Hide AP name Y/N The ESPs Access Point won't appear in WiFi lists of other devices AP password String 0..64 The password of the ESPs WiFi Access Point AP WiFi channel 1..13 The 2.4G WiFi band of the AP. For advanced users AP opens select Condition on when to open the AP AP IP - The Access Point IPv4 address of the ESP (is 192.168.4.1 in most cases) WiFi sleep Y/N Disabling WiFi sleep can increase reliability, but increases power consumption","title":"WiFi Settings"},{"location":"features/settings/#led-settings","text":"This sub-page configures the state of your lights. Setting name Value Range Description LED count 1..1500 How many LEDs are in your WS2812B strip Automatic brightness limiter Y/N Limit brightness to stay in a given current range Maximum current 300..65000 Current limit im milliamps LED voltage select Voltage/type of LEDs Custom max. current 1..255 Custom current per LED on full white 4-channel LEDs (RGBW) Y/N Support for SK6812 LEDs with white channel Color order select If your LEDs display incorrect colors (red and green swapped), try changing it Auto-calculate white select Get white channel from RGB automatically (only applicable for RGBW) Details Turn on after power up Y/N Whether the lights should turn on after a reset Apply preset 0..16 Preset to load at boot (0 = none) Set current preset cycle... Y/N The current preset cycle configuration will be used as boot default Use Gamma for brightness Y/N Will correct brightness changes to make it appear more linear. Advised to leave off Use Gamma for color Y/N Will correct colors to match those on a monitor. Strongly advised to keep on Brightness factor 1..255 Factor to change master brightness if it is to dim/bright for a certain configuration Crossfade Y/N Whether to have a smooth fading transitional effect when changing colors/brightness Transition time 0..65535 How many milliseconds the transition lasts Enable transition for secondary color Y/N Enable Palette transitions Y/N Enable transitions for palettes (not affected by transition time) Timed light duration 1..255 How long the nightlight should stay on Target brightness 0..255 What brightness the light should have after time is over. 0=off. Fade down Y/N Gradually fades down the light over the duration instead of turning it off at the end Palette blending select Choose how the palette wraps at the end (seam) Reverse LED order Y/N Mirrors the LEDs (last LED is first) Skip first LED Y/N Will turn off the first LED and shift the remaining by 1 (1st LED used as a signal repeater)","title":"LED settings"},{"location":"features/settings/#user-interface-settings","text":"This sub-page changes the look of the web interface. Setting name Value Range Description Server description String 1..32 The name of the device as shown on the top of the UI. Differs from Alexa device name Sync button toggles... Y/N If enabled, both send and receive are toggled by the button in UI. If disabled, only sending is toggled and receiving is kept as configured in Sync settings.","title":"User Interface settings"},{"location":"features/settings/#sync-settings","text":"This sub-page configures external software synchronization interfaces. Setting name Value Range Description On/Off button enabled Y/N Check if there is a physical pushbutton connected to GPIO0 Infrared receiver type select Type of infrared receiver Broadcast UDP port 1..65535 All WLED lights you want to group together must have the same port Receive Brightness Y/N If there is a sync notification, whether its brightness should be applied Color Y/N Whether the color of the synced device should be applied Effects Y/N Whether the effect settings should be applied Send on direct change Y/N Whether to send a sync notification when state changed via web UI or API Send on button press Y/N Whether to send sync when toggled by button or IR Send Alexa notifications Y/N Whether to send sync after changed by Alexa (you may use Alexa groups instead) Send Hue notifications Y/N Whether to send sync after a connected Philips light changed Send Macro notifications Y/N Whether to send sync after a macro was triggered Send notifications twice Y/N Sends notifications twice (if you have issues with UDP packet loss) Receive UDP realtime Y/N Receive live UDP stream data (DRGB, WARLS, ...) Use E1.31 multicast Y/N Listen on multicast IP instead of unicast E1.31 start universe 1..63000 Only applies for multicast. If you want to set different content, set ESPs at least 8 universes apart Timeout 100..65000 Time after which to resume normal mode once stream has stopped. 65000 will keep the data indefinitely Force max brightness Y/N Realtime stream with max. brightness (unless limited by power brightness limiter) Disable realtime gamma correction Y/N Check if your host software does gamma correction already Realtime LED offset -255..255 Shift the realtime input by how many LEDs Emulate Alexa device Y/N Allows you to control the light via the Amazon Echo voice assistant. Requires reboot Alexa Invocation name String 1..32 The name you want the device to have for control via Alexa. Choose something easy she can understand Device Auth token String 40 You will get this in an e-mail during Blynk setup MQTT Broker IP or String 0..32 Connect to this host MQTT broker Device topic String 0..32 MQTT topic unique to this light Group topic String 0..32 MQTT topic for all lights in a group (room, floor, ...) Hue Bridge IP 4x 0..255 Your Hue bridge IPv4 address. Should be static to avoid reassigning Poll Hue light 0..99 The ID of the hue lamp you want to sync WLED to every x ms 100..65000 How often to poll. Smaller numbers decrease lag but might hurt bridge responsiveness ... Y/N Turn polling on/off Receive On/Off Y/N Turn on/off like the hue light Brightness Y/N Set brightness to that of the hue light Color Y/N Set color to that of the hue light Hue status - Shows the current connection status to a hue bridge Baud rate Various Set the default Serial connection Baud Rate","title":"Sync settings"},{"location":"features/settings/#time-settings","text":"This sub-page configures automation tasks. Setting name Value Range Description Get time from NTP Y/N Whether to get the current time from the internet Use 24h format Y/N Use 24h clock format instead of AM/PM Time zone - Your time zone. Open an issue if yours is unsupported. DST is applied automatically UTC offset -65000..65000 Seconds to offset. If you want e.g. 1h offset, use 3600 Current local time - The local time the ESP has acquired. If set up correctly, should equal actual time Clock overlay - The special overlay to use. Allows to display a clock on the strip Countdown mode Y/N Allows to have a visual countdown towards a specific date API macro fields 16x String 0..64 Allows you to define custom API calls which can be triggered by events Boot Macro 0..16 Which macro to trigger after WiFi connected (0 is default action) Alexa On/Off Macros 2x 0..16 Which macros to trigger when turning on/off via Alexa Button Macro 0..16 Macro to trigger if button is short pressed. Default action is on/off toggle. Long Press 0..16 Macro to trigger if button is long pressed (>0.7s). Default action is random color. Double press 0..16 Macro for double click on button. Countdown-Over Macro 0..16 Macro to trigger when the countdown is over Timed-Light-Over Macro 0..16 Macro to trigger when timed light is done","title":"Time settings"},{"location":"features/settings/#security-settings","text":"This sub-page manages permissions and updates. Setting name Value Range Description Enable OTA lock Y/N If enabled, no firmware updates may be done via WiFi and some settings can't be changed. Passphrase String 0..32 To disable OTA lock, you need a password. The default is \"wledota\". Change it! Deny access to WiFi settings Y/N Disables changes to WiFi settings while locked Disable recovery AP Y/N If enabled, the module will not open an Access Point if connection to home WiFi failed. Factory reset Y/N Deletes all custom settings data (passwords, configuration, macros, presets) Manual OTA - If OTA is enabled, you can upload new binary firmware Enable ArduinoOTA Y/N Useful for developers. Be careful, can even be left on when OTA locked!","title":"Security settings"},{"location":"features/subpages/","text":"This is the sitemap of the module server. Access with \\<ESP-IP>/path (Example: 192.168.8.4/settings ) Path Description OTA rights required Since version / Default UI, index page No 0.2 /update Upload new firmware Yes 0.3 /win HTTP Request API (since 0.3) No 0.3 /json JSON API No 0.8.4 /json/state JSON state object No 0.8.4 /json/info JSON information No 0.8.4 /json/eff Effect name list No 0.8.4 /json/pal Palette name list No 0.8.4 /json/live Current colors of LEDs No 0.9.0 /liveview Live preview of current LEDs No 0.9.0 /url Returns current light setup API url No 0.9.1 /settings Settings index page No 0.2 /settings/wifi WiFi Settings page Cnfg 0.5.0 /settings/led LED Settings page No 0.5.0 /settings/ui UI Settings page No 0.5.0 /settings/sync Sync Settings page No 0.5.0 /settings/time Time Settings page No 0.5.0 /settings/sec Security Settings page Yes 0.5.0 /welcome New User Welcome page No 0.5.0 /sliders UI, index page No 0.5.0 /reset Reboot module No 0.3 /version Returns build version No 0.3 /uptime Returns runtime in ms No 0.4 /freeheap Returns free memory No 0.4 /favicon.ico Page icon No 0.2 /teapot :) No 0.5.0 /edit SPIFFS page (if USEFS) Yes 0.2 Removed sites Path Description OTA rights required Versions /list Lists SPIFFS contents (if USEFS) Yes 0.2-0.8.3 /easter Joke page No 0.6.2 only /power Returns an estimate of used LED current No 0.5.0-0.8.3 /build Returns details about the build No 0.5.0-0.8.3 /cleareeprom Resets to factory defaults Yes 0.3-0.6.4 /down Kills software. Hard reset required. Yes 0.3-0.6.4","title":"Web GUI Sitemap"},{"location":"features/subpages/#removed-sites","text":"Path Description OTA rights required Versions /list Lists SPIFFS contents (if USEFS) Yes 0.2-0.8.3 /easter Joke page No 0.6.2 only /power Returns an estimate of used LED current No 0.5.0-0.8.3 /build Returns details about the build No 0.5.0-0.8.3 /cleareeprom Resets to factory defaults Yes 0.3-0.6.4 /down Kills software. Hard reset required. Yes 0.3-0.6.4","title":"Removed sites"},{"location":"interfaces/blynk/","text":"Warning This only works with the legacy Blynk app, for which new signups have been closed by the Blynk developer. WLED will either move to Blynk 2.0 or a different solution soon. You can use the free (if you only use it for 1 WLED light) IoT cloud Blynk to control your WLED Lights with the beautiful Blynk app for Android and iOS! With Blynk, you can also even control your lights when you are not connected to your home network! Installation Download the Blynk (legacy) app from the Play Store or the App Store Scan this QR code with the app: Paste the device auth token Blynk sends to your e-mail into the WLED sync settings (only one ESP!) You can use the sync button in Blynk to sync other WLED ESPs, just like with the web UIs! If you have doubts about the security of using a 3rd party IoT cloud, don't worry. WLED will only attempt to connect to Blynk if you put the device token string into Sync settings! Keep in mind that your ESP needs to connect to an external server, which may cause lag.","title":"Blynk"},{"location":"interfaces/blynk/#installation","text":"Download the Blynk (legacy) app from the Play Store or the App Store Scan this QR code with the app: Paste the device auth token Blynk sends to your e-mail into the WLED sync settings (only one ESP!) You can use the sync button in Blynk to sync other WLED ESPs, just like with the web UIs! If you have doubts about the security of using a 3rd party IoT cloud, don't worry. WLED will only attempt to connect to Blynk if you put the device token string into Sync settings! Keep in mind that your ESP needs to connect to an external server, which may cause lag.","title":"Installation"},{"location":"interfaces/dmx-output/","text":"DMX output Version Info As of version 0.9.2 WLED supports DMX output via MAX485. This is great for controlling DMX LED PAR lamps with WLED patterns. features and limitations up to 15 DMX channels per fixture channels can be set to dimmer (brightness), red, green, blue, white, 0, 255 supports channel spacing between fixtures outputs a DMX channel map one universe (512 channels) type of fixture software setup For the DMX feature to work, you'll need to compile WLED from source. It's not a big deal, you can do it! Here is the Quick Start guide. There you'll find the section \"i want to modify WLED\". make sure, you can compile the latest version of WLED without any issues. Then continue. Once that works, in wled00/wled.h you need to change the line //#define WLED_ENABLE_DMX to #define WLED_ENABLE_DMX Yes, you just remove the //, which enables the line and therefore DMX support. change either the DMX output pin (sendPin in src/dependencies/ESPDMX.cpp) or the LED output pin (LEDPIN in NpbWrapper.h) to something other than 2. If both are set to the same setting, you might experience slight flickering on your DMX output. Once you successfully uploaded the sketch to your board, you'll find a new entry \"DMX Output\" in your settings menu. Grab the manual for your lamp and maybe some snacks, look up the dmx channels and set everything up accordingly. hardware setup The DMX output uses a MAX485 transceiver connected to the TX-pin of the ESP8266. I am currently working on an open source PCB design to go along with this feature. Until then, i can recommend this tutorial by Robert Oostenveld . Only the hardware side, of course. If you need to use another pin for output than the TX-pin, you'll need to change this in the ESP-Dmx library itself. This setting is located in ESP-Dmx/src/ESPDMX.cpp on line 29. questions If you have further questions about this feature, you can reach me via github (@jwingefeld), ICQ (30914656) or via WLED Discord (JvPeek).","title":"DMX"},{"location":"interfaces/dmx-output/#dmx-output","text":"Version Info As of version 0.9.2 WLED supports DMX output via MAX485. This is great for controlling DMX LED PAR lamps with WLED patterns.","title":"DMX output"},{"location":"interfaces/dmx-output/#features-and-limitations","text":"up to 15 DMX channels per fixture channels can be set to dimmer (brightness), red, green, blue, white, 0, 255 supports channel spacing between fixtures outputs a DMX channel map one universe (512 channels) type of fixture","title":"features and limitations"},{"location":"interfaces/dmx-output/#software-setup","text":"For the DMX feature to work, you'll need to compile WLED from source. It's not a big deal, you can do it! Here is the Quick Start guide. There you'll find the section \"i want to modify WLED\". make sure, you can compile the latest version of WLED without any issues. Then continue. Once that works, in wled00/wled.h you need to change the line //#define WLED_ENABLE_DMX to #define WLED_ENABLE_DMX Yes, you just remove the //, which enables the line and therefore DMX support. change either the DMX output pin (sendPin in src/dependencies/ESPDMX.cpp) or the LED output pin (LEDPIN in NpbWrapper.h) to something other than 2. If both are set to the same setting, you might experience slight flickering on your DMX output. Once you successfully uploaded the sketch to your board, you'll find a new entry \"DMX Output\" in your settings menu. Grab the manual for your lamp and maybe some snacks, look up the dmx channels and set everything up accordingly.","title":"software setup"},{"location":"interfaces/dmx-output/#hardware-setup","text":"The DMX output uses a MAX485 transceiver connected to the TX-pin of the ESP8266. I am currently working on an open source PCB design to go along with this feature. Until then, i can recommend this tutorial by Robert Oostenveld . Only the hardware side, of course. If you need to use another pin for output than the TX-pin, you'll need to change this in the ESP-Dmx library itself. This setting is located in ESP-Dmx/src/ESPDMX.cpp on line 29.","title":"hardware setup"},{"location":"interfaces/dmx-output/#questions","text":"If you have further questions about this feature, you can reach me via github (@jwingefeld), ICQ (30914656) or via WLED Discord (JvPeek).","title":"questions"},{"location":"interfaces/e1.31-dmx/","text":"E1.31 WLED supports the E1.31 (sACN) realtime light protocol. Version Info As of WLED v0.10.0, Art-Net is alternatively supported. All information on this page applies for Art-Net as well. You will need to switch to Art-Net mode in Sync settings and reboot once. Version Info As of WLED v0.11.0, DDP is alternatively supported. Using DDP, the Multi RGB DMX mode is always used regardless of the DMX mode setting (as it is no DMX) You will need to switch to DDP mode in Sync settings and reboot once. Features 170 LEDs (510 DMX channels) are supported per universe. You can use up to 9 adjacent universes which is a total of more than the maximum 1500 LEDs WLED can drive. General Recommendations For a fluent 25ms (40fps) or more framerate, it is recommended to use no more than 3 universes (510 LEDs). It is not recommended to try and have multiple E1.31 sources send to a single WLED controller at the same time. It will impact performance and there is no priority handling implemented. WLED is only meant to handle a single source at a time. Configure WLED to connect to a WiFi Network . It was observed that sending E1.31 from a computer to WLED when accessed as access point (WLED-AP) may not work, see forum post . When using an ESP32, disabling WiFi sleep in the WiFi settings of WLED can reduce/eliminate visual stuttering/lag of effects, and significantly reduce ping times. Note: disabling WiFi will increase power consumption. Using LedFX We highly recommend the LedFx project in combination with WLED! Configure WLED first, ensure devices are powered on and connected to your WiFi. To add WLED devices, in the 'Device Management', click on the Find WLED devices button. If you want to manually add devices, use more than 170 LEDs with LedFx, you need to go to additional settings and set \"Universe Size\" to 510 when adding the WLED device! Settings DMX types Select the mode you want to use in Sync settings. 0: Disabled Incoming E1.31 packets will be ignored. 1: Single RGB All LEDs are set to the same color. 3 Channels: Red, Green, Blue 2: Single DRGB All LEDs are set to the same color. 4 Channels: Master Dimmer, Red, Green, Blue 3: Effect Not a realtime mode. Allows setting WLED effect properties over E1.31 with 11 or 13 channels. Channel Property 1 Master Dimmer 2 Effect mode ID 3 Effect speed 4 Effect intensity 5 Effect palette ID 6 Red Primary 7 Green Primary 8 Blue Primary 9 Red Secondary 10 Green Secondary 11 Blue Secondary 12 White Primary (channel optional) 13 White Secondary (channel optional) 4: Multiple RGB 3 Channels per LED in sequence. LED 0 Red, LED 0 Green, LED 0 Blue, LED 1 Red, ... Default mode, equivalent to pre-0.9.1 E1.31. This is the mode you want to use for xLights and LedFx. 5: Multiple DRGB Like Multiple RGB, but the first channel is a brightness control. Master Dimmer, LED 0 Red, LED 0 Green, ...","title":"E1.31 (DMX) / Art-Net"},{"location":"interfaces/e1.31-dmx/#e131","text":"WLED supports the E1.31 (sACN) realtime light protocol. Version Info As of WLED v0.10.0, Art-Net is alternatively supported. All information on this page applies for Art-Net as well. You will need to switch to Art-Net mode in Sync settings and reboot once. Version Info As of WLED v0.11.0, DDP is alternatively supported. Using DDP, the Multi RGB DMX mode is always used regardless of the DMX mode setting (as it is no DMX) You will need to switch to DDP mode in Sync settings and reboot once.","title":"E1.31"},{"location":"interfaces/e1.31-dmx/#features","text":"170 LEDs (510 DMX channels) are supported per universe. You can use up to 9 adjacent universes which is a total of more than the maximum 1500 LEDs WLED can drive.","title":"Features"},{"location":"interfaces/e1.31-dmx/#general-recommendations","text":"For a fluent 25ms (40fps) or more framerate, it is recommended to use no more than 3 universes (510 LEDs). It is not recommended to try and have multiple E1.31 sources send to a single WLED controller at the same time. It will impact performance and there is no priority handling implemented. WLED is only meant to handle a single source at a time. Configure WLED to connect to a WiFi Network . It was observed that sending E1.31 from a computer to WLED when accessed as access point (WLED-AP) may not work, see forum post . When using an ESP32, disabling WiFi sleep in the WiFi settings of WLED can reduce/eliminate visual stuttering/lag of effects, and significantly reduce ping times. Note: disabling WiFi will increase power consumption.","title":"General Recommendations"},{"location":"interfaces/e1.31-dmx/#using-ledfx","text":"We highly recommend the LedFx project in combination with WLED! Configure WLED first, ensure devices are powered on and connected to your WiFi. To add WLED devices, in the 'Device Management', click on the Find WLED devices button. If you want to manually add devices, use more than 170 LEDs with LedFx, you need to go to additional settings and set \"Universe Size\" to 510 when adding the WLED device!","title":"Using LedFX"},{"location":"interfaces/e1.31-dmx/#settings","text":"","title":"Settings"},{"location":"interfaces/e1.31-dmx/#dmx-types","text":"Select the mode you want to use in Sync settings.","title":"DMX types"},{"location":"interfaces/e1.31-dmx/#0-disabled","text":"Incoming E1.31 packets will be ignored.","title":"0: Disabled"},{"location":"interfaces/e1.31-dmx/#1-single-rgb","text":"All LEDs are set to the same color. 3 Channels: Red, Green, Blue","title":"1: Single RGB"},{"location":"interfaces/e1.31-dmx/#2-single-drgb","text":"All LEDs are set to the same color. 4 Channels: Master Dimmer, Red, Green, Blue","title":"2: Single DRGB"},{"location":"interfaces/e1.31-dmx/#3-effect","text":"Not a realtime mode. Allows setting WLED effect properties over E1.31 with 11 or 13 channels. Channel Property 1 Master Dimmer 2 Effect mode ID 3 Effect speed 4 Effect intensity 5 Effect palette ID 6 Red Primary 7 Green Primary 8 Blue Primary 9 Red Secondary 10 Green Secondary 11 Blue Secondary 12 White Primary (channel optional) 13 White Secondary (channel optional)","title":"3: Effect"},{"location":"interfaces/e1.31-dmx/#4-multiple-rgb","text":"3 Channels per LED in sequence. LED 0 Red, LED 0 Green, LED 0 Blue, LED 1 Red, ... Default mode, equivalent to pre-0.9.1 E1.31. This is the mode you want to use for xLights and LedFx.","title":"4: Multiple RGB"},{"location":"interfaces/e1.31-dmx/#5-multiple-drgb","text":"Like Multiple RGB, but the first channel is a brightness control. Master Dimmer, LED 0 Red, LED 0 Green, ...","title":"5: Multiple DRGB"},{"location":"interfaces/http-api/","text":"Hint While this API is not deprecated, it is highly recommended to use the JSON API instead of the HTTP API for new integrations, as it is structured in a better way and allows efficient use of newer features like segments, presets, and playlists. WLED's HTTP API allows you to set many properties of your lights, even more than the index page UI supports, via a simple GET web request. Help Unsure how all this API stuff works? Check out this amazing guide by tynick! The basic URL scheme is: [ipadress]/win . This will return an XML file with some current values (see bottom of page). Parameters can be added to control some of the variables. Example (AP): 192.168.4.1/win&A=255 sets the brightness to maximum Example (mdns): led.local/win&A=128&FX=0 sets the brightness to half and the effect to Solid In conjunction with a router port forwarding this can be used to automate WLED, for example via IFTTT. Add one or multiple of the following parameters after the base URL/IP to change values: (if the parameter is unknown or the value illegal nothing will happen) LED control Parameter Value Range Description Since Version &A= 0 to 255 Master brightness 0.2 &T= 0, 1, or 2 Master Off/On/Toggle 0.3 &R= 0 to 255 Primary Red value 0.2 &G= 0 to 255 Primary Green value 0.2 &B= 0 to 255 Primary Blue value 0.2 &W= 0 to 255 Primary White value 0.4 &FX= 0 to 101 LED Effect Index 0.3 &SX= 0 to 255 Effect Speed 0.3 &IX= 0 to 255 Effect Intensity 0.5.0 &FP= 0 to 46 FastLED Palette 0.8.0 &NL= 0 to 255 Nightlight active and duration in minutes 0.3 &ND none Toggles nightlight on but uses default duration 0.6.3 &NT= 0 to 255 Nightlight target brightness 0.5.0 &NF= 0 to 2 Fade Nightlight, 1 = fade brightness only, 2 = additionaly fade color from primary to secondary color 0.5.0 Advanced Parameter Value Range Description Since Version &CL= HEX/DEC Primary color 0.8.0 &C2= HEX/DEC Secondary color 0.8.0 &C3= HEX/DEC Third color 0.8.0 &R2= 0 to 255 Secondary Red value 0.4 &G2= 0 to 255 Secondary Green value 0.4 &B2= 0 to 255 Secondary Blue value 0.4 &W2= 0 to 255 Secondary White value 0.4 &HU= 0 to 65535 Hue 0.5.1 &SA= 0 to 255 Saturation (only in conjunction with Hue) 0.5.1 &H2 none Hue + Saturation will set secondary color 0.5.1 &SR= 0 or 1 Set Primary/Secondary color to random hue 0.4 &SC none Swap primary and secondary color 0.4 Use of hex values Hex values need to be prefaced with the character h or H. The normal format is RRGGBB . If the led strip is RGBW, the hex format is WWRRGGBB . Note: In the UI the format is RRGGBBWW , so the values cannot be copied without a transformation. Loxone commands Loxone offers two commands. One for RGB values and one for brightness and color temperature. Parameter Syntax Range Description Since Version &LX= BBBGGGRRR 0 - 100100100 Loxone RGB value for primary color. Each color ( RRR , GGG , BBB ) is specified in the range from 0 to 100%. 0.11 &LX= 20bbbtttt 200002700 - 201006500 Loxone brightness and color temperature values for primary color. Brightness bbb is specified in the range 0 to 100%. tttt defines the color temperature in the range from 2700 to 6500 Kelvin. 0.11 &LY= BBBGGGRRR 0 - 100100100 Loxone RGB value for secondary color. Each color ( RRR , GGG , BBB ) is specified in the range from 0 to 100%. 0.11 &LY= 20bbbtttt 200002700 - 201006500 Loxone brightness and color temperature values for secondary color. Brightness bbb is specified in the range 0 to 100%. tttt defines the color temperature in the range from 2700 to 6500 Kelvin. 0.11 Notifications Parameter Value Range Description Since Version &RN= 0 or 1 Receive UDP Notifications 0.3 &SN= 0 or 1 Send UDP Notifications 0.3 &NN none No notification for this request 0.3 &HP= 0 to 99 Sets Hue polling light ID (0 is off) 0.5.1 Presets Parameter Value Range Description Since Version &PS= 1 to 16 Saves current setup to preset. Preset 255 can be used and is temporary/not persistent. 0.4 &PL= 1 to 250 Applies entire preset 0.4 &P1= 1 to 249 First cycle preset 0.6.3 &P2= 2 to 250 Last cycle preset 0.6.3 &TT= 0 to 65000 Set transition time (ms) 0.6.3 Macros Parameter Value Range Description Since Version &M= 1 to 16 Apply macro (deprecated, added for compatibility with pre-0.11 automations) 0.5.0 Segments It is highly recommended to use the JSON API when dealing with Segments. Parameter Value Range Description Since Version &SM= 0 to 9 Set the main segment (values are reported to XML) 0.9.0 &SS= 0 to 9 Select segment to apply THIS api call to 0.9.0 &SV= 0, 1, or 2 Set segment selected (2 unselects others) 0.9.0 &S= 0 to ledcount-1 Set segment start 0.9.0 &S2= 0 to ledcount Set segment stop 0.9.0 &GP= 1 to 255 Set segment grouping 0.9.1 &SP= 0 to 255 Set segment spacing 0.9.1 &RV= 0 or 1 Reverse/Flip Segment direction 0.9.1 &SB= 0 to 255 Segment brightness 0.10.0 General and Experimental Parameter Value Range Description Since Version &RB none Reboot WLED 0.10.0 (?) &ST= 32bit Current UTC time in Unix epoch 0.4 &CT= 32bit UTC time for countdown end 0.4 &MD= 0 or 1 Set slider mode to RGB/HSB 0.3 &AX= 0 to 255 Debug feature, can be configured for general IO 0.3 &IN none Server will not respond to this request (internal) 0.3 &OL= 0 to 255 Experimental overlays 0.3 &L= 0 to 255 Lock pixel 0.4 &L2= 0 to 255 Lock pixel range L to L2 0.4 &UL none Unlock instead (used in conjunction with L and L2) 0.4 &NX= String 1..6 Cronixie clockface 0.4 &NM= 0 or 1 Cronixie Time or Countdown mode 0.4 &NB= 0 or 1 Cronixie Backlight 0.4 &IT none Include UI color theme in API response 0.8.2 &RD= 0 or 1 Toggle realtime UDP 0.8.4 &LO= 0-2 Live data override. 0 is off, 1 is override until live data ends, 2 is override until ESP reboot 0.10.2 XML response This is the XML file sent as response to every API call. Parameter Value Range Description ac 0 to 255 Master Brightness cl 3x 0..255 Primary Color RGB cs 3x 0..255 Secondary RGB ns 0 or 1 Notification Sending on nr 0 or 1 Notification Receive on nl 0 or 1 Nightlight active nf 0 or 2 Nightlight Fade type nd 0 to 255 Nightlight delay nt 0 to 255 Nightlight target brightness fx 0 to 73 Effect index sx 0 to 255 Effect speed ix 0 to 255 Effect intensity fp 0 to 43 FastLED palette wv -1 to 255 Primary White value ws 0 to 255 Secondary White ps 0 to 255 Current Preset cy 0 or 1 Preset Cycling enabled md 0 or 1 RGB or HSB UI mode ds String 0..32 Server description ss 0 to 12 Segment ID In-/decrementing values You can use the ~ character to easily set values relative to their current value. This is currently supported for the following parameters: A, R, G, B, W, R2, G2, B2, W2, FX, SX, IX, FP, PL For example, use PL=~ to go to the next preset. Using just ~ without a number will increase the value by 1, ~- will decrease it by 1. The value will then wrap around, so using A=~- when A is 0 will set A to 255. You can also specify by how much to change the value. For example, using A=~10 will increase the brightness by 10. In case of using a number behind ~ , the value will clip (so it will not wrap around, if the maximum brightness is set, A=~10 will not have any effect) To setup a Macro for a Button to advance to the next Preset, use win&P1=1&P2=30&PL=~ P1 will equal the first Preset of the rotation while P2 will be the last Preset.","title":"HTTP Request API"},{"location":"interfaces/http-api/#led-control","text":"Parameter Value Range Description Since Version &A= 0 to 255 Master brightness 0.2 &T= 0, 1, or 2 Master Off/On/Toggle 0.3 &R= 0 to 255 Primary Red value 0.2 &G= 0 to 255 Primary Green value 0.2 &B= 0 to 255 Primary Blue value 0.2 &W= 0 to 255 Primary White value 0.4 &FX= 0 to 101 LED Effect Index 0.3 &SX= 0 to 255 Effect Speed 0.3 &IX= 0 to 255 Effect Intensity 0.5.0 &FP= 0 to 46 FastLED Palette 0.8.0 &NL= 0 to 255 Nightlight active and duration in minutes 0.3 &ND none Toggles nightlight on but uses default duration 0.6.3 &NT= 0 to 255 Nightlight target brightness 0.5.0 &NF= 0 to 2 Fade Nightlight, 1 = fade brightness only, 2 = additionaly fade color from primary to secondary color 0.5.0","title":"LED control"},{"location":"interfaces/http-api/#advanced","text":"Parameter Value Range Description Since Version &CL= HEX/DEC Primary color 0.8.0 &C2= HEX/DEC Secondary color 0.8.0 &C3= HEX/DEC Third color 0.8.0 &R2= 0 to 255 Secondary Red value 0.4 &G2= 0 to 255 Secondary Green value 0.4 &B2= 0 to 255 Secondary Blue value 0.4 &W2= 0 to 255 Secondary White value 0.4 &HU= 0 to 65535 Hue 0.5.1 &SA= 0 to 255 Saturation (only in conjunction with Hue) 0.5.1 &H2 none Hue + Saturation will set secondary color 0.5.1 &SR= 0 or 1 Set Primary/Secondary color to random hue 0.4 &SC none Swap primary and secondary color 0.4","title":"Advanced"},{"location":"interfaces/http-api/#use-of-hex-values","text":"Hex values need to be prefaced with the character h or H. The normal format is RRGGBB . If the led strip is RGBW, the hex format is WWRRGGBB . Note: In the UI the format is RRGGBBWW , so the values cannot be copied without a transformation.","title":"Use of hex values"},{"location":"interfaces/http-api/#loxone-commands","text":"Loxone offers two commands. One for RGB values and one for brightness and color temperature. Parameter Syntax Range Description Since Version &LX= BBBGGGRRR 0 - 100100100 Loxone RGB value for primary color. Each color ( RRR , GGG , BBB ) is specified in the range from 0 to 100%. 0.11 &LX= 20bbbtttt 200002700 - 201006500 Loxone brightness and color temperature values for primary color. Brightness bbb is specified in the range 0 to 100%. tttt defines the color temperature in the range from 2700 to 6500 Kelvin. 0.11 &LY= BBBGGGRRR 0 - 100100100 Loxone RGB value for secondary color. Each color ( RRR , GGG , BBB ) is specified in the range from 0 to 100%. 0.11 &LY= 20bbbtttt 200002700 - 201006500 Loxone brightness and color temperature values for secondary color. Brightness bbb is specified in the range 0 to 100%. tttt defines the color temperature in the range from 2700 to 6500 Kelvin. 0.11","title":"Loxone commands"},{"location":"interfaces/http-api/#notifications","text":"Parameter Value Range Description Since Version &RN= 0 or 1 Receive UDP Notifications 0.3 &SN= 0 or 1 Send UDP Notifications 0.3 &NN none No notification for this request 0.3 &HP= 0 to 99 Sets Hue polling light ID (0 is off) 0.5.1","title":"Notifications"},{"location":"interfaces/http-api/#presets","text":"Parameter Value Range Description Since Version &PS= 1 to 16 Saves current setup to preset. Preset 255 can be used and is temporary/not persistent. 0.4 &PL= 1 to 250 Applies entire preset 0.4 &P1= 1 to 249 First cycle preset 0.6.3 &P2= 2 to 250 Last cycle preset 0.6.3 &TT= 0 to 65000 Set transition time (ms) 0.6.3","title":"Presets"},{"location":"interfaces/http-api/#macros","text":"Parameter Value Range Description Since Version &M= 1 to 16 Apply macro (deprecated, added for compatibility with pre-0.11 automations) 0.5.0","title":"Macros"},{"location":"interfaces/http-api/#segments","text":"It is highly recommended to use the JSON API when dealing with Segments. Parameter Value Range Description Since Version &SM= 0 to 9 Set the main segment (values are reported to XML) 0.9.0 &SS= 0 to 9 Select segment to apply THIS api call to 0.9.0 &SV= 0, 1, or 2 Set segment selected (2 unselects others) 0.9.0 &S= 0 to ledcount-1 Set segment start 0.9.0 &S2= 0 to ledcount Set segment stop 0.9.0 &GP= 1 to 255 Set segment grouping 0.9.1 &SP= 0 to 255 Set segment spacing 0.9.1 &RV= 0 or 1 Reverse/Flip Segment direction 0.9.1 &SB= 0 to 255 Segment brightness 0.10.0","title":"Segments"},{"location":"interfaces/http-api/#general-and-experimental","text":"Parameter Value Range Description Since Version &RB none Reboot WLED 0.10.0 (?) &ST= 32bit Current UTC time in Unix epoch 0.4 &CT= 32bit UTC time for countdown end 0.4 &MD= 0 or 1 Set slider mode to RGB/HSB 0.3 &AX= 0 to 255 Debug feature, can be configured for general IO 0.3 &IN none Server will not respond to this request (internal) 0.3 &OL= 0 to 255 Experimental overlays 0.3 &L= 0 to 255 Lock pixel 0.4 &L2= 0 to 255 Lock pixel range L to L2 0.4 &UL none Unlock instead (used in conjunction with L and L2) 0.4 &NX= String 1..6 Cronixie clockface 0.4 &NM= 0 or 1 Cronixie Time or Countdown mode 0.4 &NB= 0 or 1 Cronixie Backlight 0.4 &IT none Include UI color theme in API response 0.8.2 &RD= 0 or 1 Toggle realtime UDP 0.8.4 &LO= 0-2 Live data override. 0 is off, 1 is override until live data ends, 2 is override until ESP reboot 0.10.2","title":"General and Experimental"},{"location":"interfaces/http-api/#xml-response","text":"This is the XML file sent as response to every API call. Parameter Value Range Description ac 0 to 255 Master Brightness cl 3x 0..255 Primary Color RGB cs 3x 0..255 Secondary RGB ns 0 or 1 Notification Sending on nr 0 or 1 Notification Receive on nl 0 or 1 Nightlight active nf 0 or 2 Nightlight Fade type nd 0 to 255 Nightlight delay nt 0 to 255 Nightlight target brightness fx 0 to 73 Effect index sx 0 to 255 Effect speed ix 0 to 255 Effect intensity fp 0 to 43 FastLED palette wv -1 to 255 Primary White value ws 0 to 255 Secondary White ps 0 to 255 Current Preset cy 0 or 1 Preset Cycling enabled md 0 or 1 RGB or HSB UI mode ds String 0..32 Server description ss 0 to 12 Segment ID","title":"XML response"},{"location":"interfaces/http-api/#in-decrementing-values","text":"You can use the ~ character to easily set values relative to their current value. This is currently supported for the following parameters: A, R, G, B, W, R2, G2, B2, W2, FX, SX, IX, FP, PL For example, use PL=~ to go to the next preset. Using just ~ without a number will increase the value by 1, ~- will decrease it by 1. The value will then wrap around, so using A=~- when A is 0 will set A to 255. You can also specify by how much to change the value. For example, using A=~10 will increase the brightness by 10. In case of using a number behind ~ , the value will clip (so it will not wrap around, if the maximum brightness is set, A=~10 will not have any effect) To setup a Macro for a Button to advance to the next Preset, use win&P1=1&P2=30&PL=~ P1 will equal the first Preset of the rotation while P2 will be the last Preset.","title":"In-/decrementing values"},{"location":"interfaces/infrared/","text":"Version Info Since v0.8.2, infrared control from various IR remotes is supported for ESP8266 and since v0.9.0 for ESP32, too. A dedicated infrared receiver module is required. (KY-022 or TSOP38238 are confirmed to work and inexpensive) The default sensor pin is GPIO4. It can be changed in LED settings. Warning IR receiving will not work on ESP8266 if you use any LED pin other than GPIO 1, 2, or 3 for digital LED strips. Supported IR remotes To use IR remote go to Settings , Sync Interfaces and change the value for Infrared receiver type according to the IR remote type of the following list: white 24-key IR remote with R,G,B + 12 color-tones white 24-key IR remote with CT+ / CT- buttons blue 40-key IR remote with keys for 25%, 50%, 75% and 100% white 44-key IR remote with up/down arrows for the colors R,G and B white 21-key IR remote with R,G,B + 9 color-tones black 6-key IR remote with CH up/down + Vol up/down JSON IR remote - Easily configure and use any IR remote.","title":"Infrared"},{"location":"interfaces/infrared/#supported-ir-remotes","text":"To use IR remote go to Settings , Sync Interfaces and change the value for Infrared receiver type according to the IR remote type of the following list: white 24-key IR remote with R,G,B + 12 color-tones white 24-key IR remote with CT+ / CT- buttons blue 40-key IR remote with keys for 25%, 50%, 75% and 100% white 44-key IR remote with up/down arrows for the colors R,G and B white 21-key IR remote with R,G,B + 9 color-tones black 6-key IR remote with CH up/down + Vol up/down JSON IR remote - Easily configure and use any IR remote.","title":"Supported IR remotes"},{"location":"interfaces/json-api/","text":"WLED versions since 0.8.4 implement a powerful JSON API over HTTP. It is accessible using the /json subpage. Obtaining light information Sending a GET request will return an object similar to the sample below The response consists of four objects: state contains the current state of the light. All values may be modified by the client (see below) info contains general information about the device. No value can be modified using this API effects contains an array of the effect mode names palettes contains an array of the palette names You may also obtain those objects individually using the URLs /json/state /json/info /json/eff , and /json/pal . Reserved effect IDs In WLED versions 0.14+, some effects are unsupported in certain builds (e.g. some audio reactive effects may only work on ESP32). In order for each effect to have an unique ID on all devices, having unsupported ones in between supported ones is possible. If called, these will fallback to the Solid effect, in the effects list they have the name RSVD or - . To improve user experience, it is recommended to remove effects with the names RSVD or - form the UI effect selection. Setting new values Sending a POST request to /json or /json/state with (parts of) the state object will update the respective values. Example: {\"on\":true,\"bri\":255} sets the brightness to maximum. {\"seg\":[{\"col\":[[0,255,200]]}]} sets the color of the first segment to teal. CURL example This will toggle on and off and return the new state (v0.13+): curl -X POST \"http://[WLED-IP]/json/state\" -d '{\"on\":\"t\",\"v\":true}' -H \"Content-Type: application/json\" Sample JSON API response (v0.8.4): { \"state\" : { \"on\" : true , \"bri\" : 127 , \"transition\" : 7 , \"ps\" : -1 , \"pl\" : -1 , \"nl\" : { \"on\" : false , \"dur\" : 60 , \"fade\" : true , \"tbri\" : 0 }, \"udpn\" : { \"send\" : false , \"recv\" : true }, \"seg\" : [{ \"start\" : 0 , \"stop\" : 20 , \"len\" : 20 , \"col\" : [ [ 255 , 160 , 0 , 0 ], [ 0 , 0 , 0 , 0 ], [ 0 , 0 , 0 , 0 ] ], \"fx\" : 0 , \"sx\" : 127 , \"ix\" : 127 , \"pal\" : 0 , \"sel\" : true , \"rev\" : false , \"cln\" : -1 }] }, \"info\" : { \"ver\" : \"0.8.4\" , \"vid\" : 1903252 , \"leds\" : { \"count\" : 20 , \"rgbw\" : true , \"pin\" : [ 2 ], \"pwr\" : 0 , \"maxpwr\" : 65000 , \"maxseg\" : 1 }, \"name\" : \"WLED Light\" , \"udpport\" : 21324 , \"live\" : false , \"fxcount\" : 80 , \"palcount\" : 47 , \"arch\" : \"esp8266\" , \"core\" : \"2_4_2\" , \"freeheap\" : 13264 , \"uptime\" : 17985 , \"opt\" : 127 , \"brand\" : \"WLED\" , \"product\" : \"DIY light\" , \"btype\" : \"src\" , \"mac\" : \"60019423b441\" }, \"effects\" : [ \"Solid\" , \"Blink\" , \"Breathe\" , \"Wipe\" , \"Wipe Random\" , \"Random Colors\" , \"Sweep\" , \"Dynamic\" , \"Colorloop\" , \"Rainbow\" , \"Scan\" , \"Dual Scan\" , \"Fade\" , \"Chase\" , \"Chase Rainbow\" , \"Running\" , \"Saw\" , \"Twinkle\" , \"Dissolve\" , \"Dissolve Rnd\" , \"Sparkle\" , \"Dark Sparkle\" , \"Sparkle+\" , \"Strobe\" , \"Strobe Rainbow\" , \"Mega Strobe\" , \"Blink Rainbow\" , \"Android\" , \"Chase\" , \"Chase Random\" , \"Chase Rainbow\" , \"Chase Flash\" , \"Chase Flash Rnd\" , \"Rainbow Runner\" , \"Colorful\" , \"Traffic Light\" , \"Sweep Random\" , \"Running 2\" , \"Red & Blue\" , \"Stream\" , \"Scanner\" , \"Lighthouse\" , \"Fireworks\" , \"Rain\" , \"Merry Christmas\" , \"Fire Flicker\" , \"Gradient\" , \"Loading\" , \"In Out\" , \"In In\" , \"Out Out\" , \"Out In\" , \"Circus\" , \"Halloween\" , \"Tri Chase\" , \"Tri Wipe\" , \"Tri Fade\" , \"Lightning\" , \"ICU\" , \"Multi Comet\" , \"Dual Scanner\" , \"Stream 2\" , \"Oscillate\" , \"Pride 2015\" , \"Juggle\" , \"Palette\" , \"Fire 2012\" , \"Colorwaves\" , \"BPM\" , \"Fill Noise\" , \"Noise 1\" , \"Noise 2\" , \"Noise 3\" , \"Noise 4\" , \"Colortwinkle\" , \"Lake\" , \"Meteor\" , \"Smooth Meteor\" , \"Railway\" , \"Ripple\" ], \"palettes\" : [ \"Default\" , \"Random Cycle\" , \"Primary Color\" , \"Based on Primary\" , \"Set Colors\" , \"Based on Set\" , \"Party\" , \"Cloud\" , \"Lava\" , \"Ocean\" , \"Forest\" , \"Rainbow\" , \"Rainbow Bands\" , \"Sunset\" , \"Rivendell\" , \"Breeze\" , \"Red & Blue\" , \"Yellowout\" , \"Analogous\" , \"Splash\" , \"Pastel\" , \"Sunset 2\" , \"Beech\" , \"Vintage\" , \"Departure\" , \"Landscape\" , \"Beach\" , \"Sherbet\" , \"Hult\" , \"Hult 64\" , \"Drywet\" , \"Jul\" , \"Grintage\" , \"Rewhi\" , \"Tertiary\" , \"Fire\" , \"Icefire\" , \"Cyane\" , \"Light Pink\" , \"Autumn\" , \"Magenta\" , \"Magred\" , \"Yelmag\" , \"Yelblu\" , \"Orange & Teal\" , \"Tiamat\" , \"April Night\" ] } Overview of values State object JSON key Value range Description on bool On/Off state of the light bri 0 to 255 Brightness of the light. If on is false , contains last brightness when light was on (aka brightness when on is set to true. Setting bri to 0 is supported but it is recommended to use the range 1-255 and use on: false to turn off. The state response will never havethe value 0 for bri . transition 0 to 255 Duration of the crossfade between different colors/brightness levels. One unit is 100ms, so a value of 4 results in atransition of 400ms. tt 0 to 255 Similar to transition, but applies to just the current API call. Not included in state response. ps -1 to 65535 ID of currently set preset. 1~17~ can be used to iterate through presets 1-17. pss 0 to 65535 Bitwise indication of preset slots (0 - vacant, 1 - written). Always 0 in 0.11. Not changable. Removed as of v0.11.1 psave 1 to 16 (250 in 0.11) Save current light config to specified preset slot. Not included in state response. pl -1 to 0 ID of currently set playlist. For now, this sets the preset cycle feature, -1 is off and 0 is on. nl.on bool Nightlight currently active nl.dur 1 to 255 Duration of nightlight in minutes nl.fade bool If true , the light will gradually dim over the course of the nightlight duration. If false , it will instantly turn to the target brightness once the duration has elapsed. Removed in 0.13.0 (use mode instead) nl.mode 0 to 3 Nightlight mode (0: instant, 1: fade, 2: color fade, 3: sunrise) (available since 0.10.2) nl.tbri 0 to 255 Target brightness of nightlight feature nl.rem -1 to 15300 Remaining nightlight duration in seconds, -1 if not active. Only in state response, can not be set. udpn.send bool Send WLED broadcast (UDP sync) packet on state change udpn.recv bool Receive broadcast packets udpn.nn bool Don't send a broadcast packet (applies to just the current API call). Not included in state response. v bool If set to true in a JSON POST command, the response will contain the full JSON state object. Not included in state response rb bool If set to true , device will reboot immediately. Not included in state response. live bool If set to true , enters realtime mode and blanks the LEDs. The realtime timeout option does not have an effect when this command is used, WLED will stay in realtime mode until the state (color/effect/segments, excluding brightness) is changed. It is expected that {\"live\":false} is sent once live data sending is terminated. Not included in state response. lor 0, 1, or 2 Live data override. 0 is off, 1 is override until live data ends, 2 is override until ESP reboot (available since 0.10.0) time uint32 Set module time to unix timestamp. Not included in state response. mainseg 0 to info.leds.maxseg-1 Main Segment seg Array of segment objects Segments are individual parts of the LED strip. In 0.9.0 this will enables running different effects on differentparts of the strip. playlist object Custom preset playlists . Not included in state response (available since 0.11.0) tb uint32 Sets timebase for effects. Not reported. Contents of the segment object Notice: start , stop , and len are not changeable in 0.8.4. Any segment with id > 0 is ignored. Unless stated otherwise, every value may be changed via an HTTP POST request. The tertiary color is not gamma-corrected in 0.8.4, but is in subsequent releases. JSON key Value range Description id 0 to info.maxseg -1 Zero-indexed ID of the segment. May be omitted, in that case the ID will be inferred from the order of the segment objects in the seg array. start 0 to info.leds.count -1 LED the segment starts at. stop 0 to info.leds.count LED the segment stops at, not included in range. If stop is set to a lower or equal value than start (setting to 0 is recommended), the segment is invalidated and deleted. len 0 to info.leds.count Length of the segment ( stop - start ). stop has preference, so if it is included, len is ignored. grp 0 to 255 Grouping (how many consecutive LEDs of the same segment will be grouped to the same color) spc 0 to 255 Spacing (how many LEDs are turned off and skipped between each group) of -len+1 to len Offset (how many LEDs to rotate the virtual start of the segments, available since 0.13.0) col array of colors Array that has up to 3 color arrays as elements, the primary, secondary (background) and tertiary colors of the segment. Each color is an array of 3 or 4 bytes, which represent an RGB(W) color. fx 0 to info.fxcount -1 ID of the effect or ~ to increment, ~- to decrement, or r for random. sx 0 to 255 Relative effect speed. ~ to increment, ~- to decrement. ~10 to increment by 10, ~-10 to decrement by 10. ix 0 to 255 Effect intensity. ~ to increment, ~- to decrement. ~10 to increment by 10, ~-10 to decrement by 10. pal 0 to info.palcount -1 ID of the color palette or ~ to increment, ~- to decrement, or r for random. sel bool true if the segment is selected. Selected segments will have their state (color/FX) updated by APIs that don't support segments (e.g. UDP sync, HTTP API). If no segment is selected, the first segment ( id : 0 ) will behave as if selected. WLED will report the state of the first (lowest id ) segment that is selected to APIs (HTTP, MQTT, Blynk...), or mainseg in case no segment is selected and for the UDP API. Live data is always applied to all LEDs regardless of segment configuration. rev bool Flips the segment, causing animations to change direction. on bool Turns on and off the individual segment. (available since 0.10.0) bri 0 to 255 Sets the individual segment brightness (available since 0.10.0) mi bool Mirrors the segment (available since 0.10.2) cct 0 to 255 or 1900 to 10091 White spectrum color temperature (available since 0.13.0) lx BBBGGGRRR : 0 - 100100100 Loxone RGB value for primary color. Each color ( RRR , GGG , BBB ) is specified in the range from 0 to 100%. lx 20bbbtttt : 200002700 - 201006500 Loxone brightness and color temperature values for primary color. Brightness bbb is specified in the range 0 to 100%. tttt defines the color temperature in the range from 2700 to 6500 Kelvin. (available since 0.11.0, not included in state response) ly BBBGGGRRR : 0 - 100100100 Loxone RGB value for secondary color. Each color ( RRR , GGG , BBB ) is specified in the range from 0 to 100%. ly 20bbbtttt : 200002700 - 201006500 Loxone brightness and color temperature values for secondary color. Brightness bbb is specified in the range 0 to 100%. tttt defines the color temperature in the range from 2700 to 6500 Kelvin. (available since 0.11.0, not included in state response) i array Individual LED control . Not included in state response (available since 0.10.2) frz bool freezes/unfreezes the current effect Info object No value may be changed by means of this API. JSON key Value range Description ver string Version name. vid uint32 Build ID (YYMMDDB, B = daily build index). leds object Contains info about the LED setup. leds.cct bool true if the light supports color temperature control (available since 0.13.0, deprecated, use info.leds.lc) leds.count 1 to 1200 Total LED count. leds.fps 0 to 255 Current frames per second. (available since 0.12.0) leds.rgbw bool true if LEDs are 4-channel (RGB + White). (deprecated, use info.leds.lc) leds.wv bool true if a white channel slider should be displayed. (available since 0.10.0, deprecated, use info.leds.lc) leds.pin byte array LED strip pin(s). Always one element. Removed as of v0.13 leds.pwr 0 to 65000 Current LED power usage in milliamps as determined by the ABL. 0 if ABL is disabled. leds.maxpwr 0 to 65000 Maximum power budget in milliamps for the ABL. 0 if ABL is disabled. leds.maxseg byte Maximum number of segments supported by this version. leds.lc byte Logical AND of all active segment's virtual light capabilities leds.seglc byte array Per-segment virtual light capabilities str bool If true , an UI with only a single button for toggling sync should toggle receive+send, otherwise send only name string Friendly name of the light. Intended for display in lists and titles. udpport uint16 The UDP port for realtime packets and WLED broadcast. live bool If true , the software is currently receiving realtime data via UDP or E1.31. lm string Info about the realtime data source lip string Realtime data source IP address ws -1 to 8 Number of currently connected WebSockets clients. -1 indicates that WS is unsupported in this build. fxcount byte Number of effects included. palcount uint16 Number of palettes configured. wifi object Info about current signal strength wifi.bssid string The BSSID of the currently connected network. wifi.signal 0 to 100 Relative signal quality of the current connection. wifi.channel 1 to 14 The current WiFi channel. fs object Info about the embedded LittleFS filesystem (since 0.11.0) fs.u uint32 Estimate of used filesystem space in kilobytes fs.t uint32 Total filesystem size in kilobytes fs.pmt uint32 Unix timestamp for the last modification to the presets.json file. Not accurate after boot or after using /edit ndc -1 to 255 Number of other WLED devices discovered on the network. -1 if Node discovery disabled. (since 0.12.0) arch string Name of the platform. core string Version of the underlying (Arduino core) SDK. lwip 0, 1, or 2 Version of LwIP. 1 or 2 on ESP8266, 0 (does not apply) on ESP32. Deprecated, removal in 0.14.0 freeheap uint32 Bytes of heap memory (RAM) currently available. Problematic if < 10k . uptime uint32 Time since the last boot/reset in seconds. opt uint16 Used for debugging purposes only. brand string The producer/vendor of the light. Always WLED for standard installations. product string The product name. Always FOSS for standard installations. btype string The origin of the build. src if a release version is compiled from source, bin for an official release image, dev for a development build (regardless of src/bin origin) and exp for experimental versions. ogn if the image is flashed to hardware by the vendor. Removed as of v0.10 mac string The hexadecimal hardware MAC address of the light, lowercase and without colons. ip string The IP address of this instance. Empty string if not connected. (since 0.13.0) Per-segment individual LED control Using the i property of the segment object, you can set the LED colors in the segment using the JSON API. Keep in mind that this is non-persistent, if the light is turned off the segment will return to effect mode. The segment is blanked out when using individual control, the set effect will not run. To disable, change any property of the segment or turn off the light. To set individual LEDs starting from the beginning, use an array of Color arrays. {\"seg\":{\"i\":[[255,0,0], [0,255,0], [0,0,255]]}} will set the first LED red, the second green and the third blue. To set individual LEDs, use the LED index followed by its Color array. {\"seg\":{\"i\":[0,[255,0,0], 2,[0,255,0], 4,[0,0,255]]}} is the same as above, but leaves blank spaces between the lit LEDs. To set ranges of LEDs, use the LED start and stop index followed by its Color array. {\"seg\":{\"i\":[0,8,[255,0,0], 10,18,[0,0,255]]}} sets the first eight LEDs to red, leaves out two, and sets another 8 to blue. Keep in mind that the LED indices are segment-based, so LED 0 is the first LED of the segment, not of the entire strip. Segment features, including Grouping, Spacing, Mirroring and Reverse are functional. This feature is available in build 200829 and above. Brightness interaction For your colors to apply correctly, make sure the desired brightness is set beforehand. Turning on the LEDs from an off state and setting individual LEDs in the same JSON request will not work! Turning Individual Segments On/Off Use: {\"seg\":[{\"id\":X,\"on\":\"t\"}]} and replace X with your desired segment. Playlists (Available since 0.11.0) Sample playlist API call: { \"playlist\" : { \"ps\" : [ 26 , 20 , 18 , 20 ], \"dur\" : [ 30 , 20 , 10 , 50 ], \"transition\" : 0 , \"repeat\" : 10 , \"end\" : 21 } } This example applies preset ID 26 for 3 seconds, then preset 20 for 2 seconds, then preset 18 for 1 second, lastly preset 20 again for 5 seconds.This repeats 10 times, then preset 21 is applied. Playlist object: JSON key Description ps Array of preset ID integers to be applied in this order. dur Array of time each preset should be kept, in tenths of seconds. If only one integer is supplied, all presets will be kept for that time.Defaults to 10 seconds if not provided. transition Array of time each preset should transition to the next one, in tenths of seconds. If only one integer is supplied, all presets will transition for that time. Defaults to the current transition time if not provided. repeat How many times the entire playlist should cycle before finishing. Set to 0 for an indefinite cycle. Default to indefinite if not provided. end Single preset ID to apply after the playlist finished. Has no effect when an indefinite cycle is set. If not provided, the light will stay on the last preset of the playlist. Light capabilities In order to e.g. only show color controls relevant to a given setup, it is necessary to obtain the color capabilities of the light. The info.leds.seglc array can be used to do so on a per-segment level. It contains n+1 8-bit integers, where n is the id of the last active segment, each index corresponds to the segment with that ID. This integer indicates whether a given segment supports (24 bit) RGB colors, an extra (8 bit) white channel and/or adjustable color temperature (CCT): Bit Capability 0 Segment supports RGB color 1 Segment supports white channel 2 Segment supports color temperature 3-7 Reserved (expect any value) Therefore: lc value Capabilities 0 None. Indicates a segment that does not have a bus within its range, e.g. because it is not active. 1 Supports RGB 2 Supports white channel only 3 Supports RGBW 4 Supports CCT only, no white channel (unused) 5 Supports CCT + RGB, no white channel (unused) 6 Supports CCT (including white channel) 7 Supports CCT (including white channel) + RGB Note that CCT is controllable per-segment, while RGB color and white channel have 3 color slots each per segment. info.leds.lc contains this info on a global level, and is a bitwise AND of the per-segment light capability values. CCT control Please also see the general info about CCT . Supported value ranges Given that the white spectrum handling is agnostic to the true color temperature of the LEDs used, a relative range is preferred for the time being, where a value of 0 indicates the warmest possible color temperature, while a value of 255 indicates the coldest temperature. It is also possible to pass a value in the range of 1900 to 10091 , in which case it is treated as a Kelvin color temperature, where 1900 is mapped to a relative value of 0 and 10091 to a relative value of 255 . As such, it is unlikely to match the actual color temperature output by the light, therefore the relative values 0-255 are preferred for the time being. In the future, an option to specify the Kelvin temperatures of the utilized hardware may be added, once this is done, a color temperature can be set to more accurately match other lights. Therefore, for forward compatibility, your integration should expect both either a 0-255 value for seg.cct , in which case it is a relative value, or an absolute Kelvin value in the range 1000-16000 K. In case a Kelvin value is provided, you can consider the color temperature as accurate, which is not possible with relative 0-255 values as the Kelvin points of the white channels are unknown. It is preferred that you set a new CCT value in the same range as received from WLED, that is, use 0-255 if the original value was within this range, and 1000-20000 K otherwise. If your code relies on absolute Kelvin values, a reasonable estimate for the warm white point (relative 0 ) could be 2700K, while cold white (relative 255 ) could commonly be 6500K. Effect of the seg.cct value seg.cct can always be set, but only has an effect on the physical state of the light if one or both of the following conditions is met: White Balance correction is enabled A bus supporting CCT is configured and Calculate CCT from RGB is not enabled CCT support is indicated by info.leds.cct being true , in which case you can regard the instance as a CCT light and e.g. display a color temperature control. Sensors Warning This section about the Sensor API is a DRAFT specification. It is not yet implemented and subject to change. Various types of sensors (e.g. for Temperature, light intensity, PIR) may be added to WLED via usermods. To allow read access to sensor data via the JSON API in a standardized way, the info.sensor array is used. If the info.sensor array is missing or empty, no sensor values are exposed. Sensor object Each sensor/measurement is represented by an object within the info.sensor array. For example, { \"type\" : \"T\" , \"n\" : \"Outside\" , \"val\" : 12 } refers to a 12 \u00b0C temperature measurement in Celsius with the sensor name \"Outside\". The object may contain the following properties, of which all are optional, except type . JSON key Value range Description type string The type of the sensor. n string The name of the sensor. If omitted, the client may generate a suitable name (e.g. \"Temperature sensor 1\") val any The most current sensor reading. May be of any JSON type depending on the type of the sensor, this is a number for all sensor types pre-defined below except for the \"b\" and \"CL\" types and custom type sensors. null if the reading is invalid, either due to an error or because the first reading has not yet completed. unit string An explicit human-readable unit string for the measurement. If omitted, the default for the sensor type is used. error int or string If present and not null , false , 0 or an empty string, a sensor error is indicated. May either be an integer error code or an error string. tc number Seconds of WLED uptime when the value last changed substantially. The threshold for a \"substantial\" change is up to the implementation. This can for example be used to find when a PIR sensor was last activated. tm number Seconds of WLED uptime when the last reading given by val was obtained. ts number Seconds of WLED uptime at the first measurement / start of measurement period. (required for Energy sensor type) min number Lower bound of possible value range max number Upper bound of possible value range u number Absolute uncertainty of the measurement model string Identification of the sensor hardware used Sensor types These are the standardized sensor types that may be implemented by usermods: Type ID string Measurement type Default unit \"\" (empty string) Invalid sensor (reserved) - b Button/Boolean true/false c Custom user-defined sensor - q Electric charge As t Time s BL Battery Level % CL 24-bit RGB color hex string E Energy ( ts property required) J I Electric current A J Illuminance lx L Distance m Lp Sound pressure level dB M Mass kg N Number/count - P Power W Pe General purpose percentage % PL Power Level (signal strength) dBm Pr Pressure Pa R Electric Resistance Ohms RH Relative Humidity % T Temperature \u00b0C U Voltage V (other strings) Reserved, let us know if you need a new type added - If a client is only interested in certain sensor types (e.g. Temperature), it may disregard all other sensor objects.","title":"JSON API"},{"location":"interfaces/json-api/#obtaining-light-information","text":"Sending a GET request will return an object similar to the sample below The response consists of four objects: state contains the current state of the light. All values may be modified by the client (see below) info contains general information about the device. No value can be modified using this API effects contains an array of the effect mode names palettes contains an array of the palette names You may also obtain those objects individually using the URLs /json/state /json/info /json/eff , and /json/pal . Reserved effect IDs In WLED versions 0.14+, some effects are unsupported in certain builds (e.g. some audio reactive effects may only work on ESP32). In order for each effect to have an unique ID on all devices, having unsupported ones in between supported ones is possible. If called, these will fallback to the Solid effect, in the effects list they have the name RSVD or - . To improve user experience, it is recommended to remove effects with the names RSVD or - form the UI effect selection.","title":"Obtaining light information"},{"location":"interfaces/json-api/#setting-new-values","text":"Sending a POST request to /json or /json/state with (parts of) the state object will update the respective values. Example: {\"on\":true,\"bri\":255} sets the brightness to maximum. {\"seg\":[{\"col\":[[0,255,200]]}]} sets the color of the first segment to teal. CURL example This will toggle on and off and return the new state (v0.13+): curl -X POST \"http://[WLED-IP]/json/state\" -d '{\"on\":\"t\",\"v\":true}' -H \"Content-Type: application/json\" Sample JSON API response (v0.8.4): { \"state\" : { \"on\" : true , \"bri\" : 127 , \"transition\" : 7 , \"ps\" : -1 , \"pl\" : -1 , \"nl\" : { \"on\" : false , \"dur\" : 60 , \"fade\" : true , \"tbri\" : 0 }, \"udpn\" : { \"send\" : false , \"recv\" : true }, \"seg\" : [{ \"start\" : 0 , \"stop\" : 20 , \"len\" : 20 , \"col\" : [ [ 255 , 160 , 0 , 0 ], [ 0 , 0 , 0 , 0 ], [ 0 , 0 , 0 , 0 ] ], \"fx\" : 0 , \"sx\" : 127 , \"ix\" : 127 , \"pal\" : 0 , \"sel\" : true , \"rev\" : false , \"cln\" : -1 }] }, \"info\" : { \"ver\" : \"0.8.4\" , \"vid\" : 1903252 , \"leds\" : { \"count\" : 20 , \"rgbw\" : true , \"pin\" : [ 2 ], \"pwr\" : 0 , \"maxpwr\" : 65000 , \"maxseg\" : 1 }, \"name\" : \"WLED Light\" , \"udpport\" : 21324 , \"live\" : false , \"fxcount\" : 80 , \"palcount\" : 47 , \"arch\" : \"esp8266\" , \"core\" : \"2_4_2\" , \"freeheap\" : 13264 , \"uptime\" : 17985 , \"opt\" : 127 , \"brand\" : \"WLED\" , \"product\" : \"DIY light\" , \"btype\" : \"src\" , \"mac\" : \"60019423b441\" }, \"effects\" : [ \"Solid\" , \"Blink\" , \"Breathe\" , \"Wipe\" , \"Wipe Random\" , \"Random Colors\" , \"Sweep\" , \"Dynamic\" , \"Colorloop\" , \"Rainbow\" , \"Scan\" , \"Dual Scan\" , \"Fade\" , \"Chase\" , \"Chase Rainbow\" , \"Running\" , \"Saw\" , \"Twinkle\" , \"Dissolve\" , \"Dissolve Rnd\" , \"Sparkle\" , \"Dark Sparkle\" , \"Sparkle+\" , \"Strobe\" , \"Strobe Rainbow\" , \"Mega Strobe\" , \"Blink Rainbow\" , \"Android\" , \"Chase\" , \"Chase Random\" , \"Chase Rainbow\" , \"Chase Flash\" , \"Chase Flash Rnd\" , \"Rainbow Runner\" , \"Colorful\" , \"Traffic Light\" , \"Sweep Random\" , \"Running 2\" , \"Red & Blue\" , \"Stream\" , \"Scanner\" , \"Lighthouse\" , \"Fireworks\" , \"Rain\" , \"Merry Christmas\" , \"Fire Flicker\" , \"Gradient\" , \"Loading\" , \"In Out\" , \"In In\" , \"Out Out\" , \"Out In\" , \"Circus\" , \"Halloween\" , \"Tri Chase\" , \"Tri Wipe\" , \"Tri Fade\" , \"Lightning\" , \"ICU\" , \"Multi Comet\" , \"Dual Scanner\" , \"Stream 2\" , \"Oscillate\" , \"Pride 2015\" , \"Juggle\" , \"Palette\" , \"Fire 2012\" , \"Colorwaves\" , \"BPM\" , \"Fill Noise\" , \"Noise 1\" , \"Noise 2\" , \"Noise 3\" , \"Noise 4\" , \"Colortwinkle\" , \"Lake\" , \"Meteor\" , \"Smooth Meteor\" , \"Railway\" , \"Ripple\" ], \"palettes\" : [ \"Default\" , \"Random Cycle\" , \"Primary Color\" , \"Based on Primary\" , \"Set Colors\" , \"Based on Set\" , \"Party\" , \"Cloud\" , \"Lava\" , \"Ocean\" , \"Forest\" , \"Rainbow\" , \"Rainbow Bands\" , \"Sunset\" , \"Rivendell\" , \"Breeze\" , \"Red & Blue\" , \"Yellowout\" , \"Analogous\" , \"Splash\" , \"Pastel\" , \"Sunset 2\" , \"Beech\" , \"Vintage\" , \"Departure\" , \"Landscape\" , \"Beach\" , \"Sherbet\" , \"Hult\" , \"Hult 64\" , \"Drywet\" , \"Jul\" , \"Grintage\" , \"Rewhi\" , \"Tertiary\" , \"Fire\" , \"Icefire\" , \"Cyane\" , \"Light Pink\" , \"Autumn\" , \"Magenta\" , \"Magred\" , \"Yelmag\" , \"Yelblu\" , \"Orange & Teal\" , \"Tiamat\" , \"April Night\" ] }","title":"Setting new values"},{"location":"interfaces/json-api/#overview-of-values","text":"","title":"Overview of values"},{"location":"interfaces/json-api/#state-object","text":"JSON key Value range Description on bool On/Off state of the light bri 0 to 255 Brightness of the light. If on is false , contains last brightness when light was on (aka brightness when on is set to true. Setting bri to 0 is supported but it is recommended to use the range 1-255 and use on: false to turn off. The state response will never havethe value 0 for bri . transition 0 to 255 Duration of the crossfade between different colors/brightness levels. One unit is 100ms, so a value of 4 results in atransition of 400ms. tt 0 to 255 Similar to transition, but applies to just the current API call. Not included in state response. ps -1 to 65535 ID of currently set preset. 1~17~ can be used to iterate through presets 1-17. pss 0 to 65535 Bitwise indication of preset slots (0 - vacant, 1 - written). Always 0 in 0.11. Not changable. Removed as of v0.11.1 psave 1 to 16 (250 in 0.11) Save current light config to specified preset slot. Not included in state response. pl -1 to 0 ID of currently set playlist. For now, this sets the preset cycle feature, -1 is off and 0 is on. nl.on bool Nightlight currently active nl.dur 1 to 255 Duration of nightlight in minutes nl.fade bool If true , the light will gradually dim over the course of the nightlight duration. If false , it will instantly turn to the target brightness once the duration has elapsed. Removed in 0.13.0 (use mode instead) nl.mode 0 to 3 Nightlight mode (0: instant, 1: fade, 2: color fade, 3: sunrise) (available since 0.10.2) nl.tbri 0 to 255 Target brightness of nightlight feature nl.rem -1 to 15300 Remaining nightlight duration in seconds, -1 if not active. Only in state response, can not be set. udpn.send bool Send WLED broadcast (UDP sync) packet on state change udpn.recv bool Receive broadcast packets udpn.nn bool Don't send a broadcast packet (applies to just the current API call). Not included in state response. v bool If set to true in a JSON POST command, the response will contain the full JSON state object. Not included in state response rb bool If set to true , device will reboot immediately. Not included in state response. live bool If set to true , enters realtime mode and blanks the LEDs. The realtime timeout option does not have an effect when this command is used, WLED will stay in realtime mode until the state (color/effect/segments, excluding brightness) is changed. It is expected that {\"live\":false} is sent once live data sending is terminated. Not included in state response. lor 0, 1, or 2 Live data override. 0 is off, 1 is override until live data ends, 2 is override until ESP reboot (available since 0.10.0) time uint32 Set module time to unix timestamp. Not included in state response. mainseg 0 to info.leds.maxseg-1 Main Segment seg Array of segment objects Segments are individual parts of the LED strip. In 0.9.0 this will enables running different effects on differentparts of the strip. playlist object Custom preset playlists . Not included in state response (available since 0.11.0) tb uint32 Sets timebase for effects. Not reported.","title":"State object"},{"location":"interfaces/json-api/#contents-of-the-segment-object","text":"Notice: start , stop , and len are not changeable in 0.8.4. Any segment with id > 0 is ignored. Unless stated otherwise, every value may be changed via an HTTP POST request. The tertiary color is not gamma-corrected in 0.8.4, but is in subsequent releases. JSON key Value range Description id 0 to info.maxseg -1 Zero-indexed ID of the segment. May be omitted, in that case the ID will be inferred from the order of the segment objects in the seg array. start 0 to info.leds.count -1 LED the segment starts at. stop 0 to info.leds.count LED the segment stops at, not included in range. If stop is set to a lower or equal value than start (setting to 0 is recommended), the segment is invalidated and deleted. len 0 to info.leds.count Length of the segment ( stop - start ). stop has preference, so if it is included, len is ignored. grp 0 to 255 Grouping (how many consecutive LEDs of the same segment will be grouped to the same color) spc 0 to 255 Spacing (how many LEDs are turned off and skipped between each group) of -len+1 to len Offset (how many LEDs to rotate the virtual start of the segments, available since 0.13.0) col array of colors Array that has up to 3 color arrays as elements, the primary, secondary (background) and tertiary colors of the segment. Each color is an array of 3 or 4 bytes, which represent an RGB(W) color. fx 0 to info.fxcount -1 ID of the effect or ~ to increment, ~- to decrement, or r for random. sx 0 to 255 Relative effect speed. ~ to increment, ~- to decrement. ~10 to increment by 10, ~-10 to decrement by 10. ix 0 to 255 Effect intensity. ~ to increment, ~- to decrement. ~10 to increment by 10, ~-10 to decrement by 10. pal 0 to info.palcount -1 ID of the color palette or ~ to increment, ~- to decrement, or r for random. sel bool true if the segment is selected. Selected segments will have their state (color/FX) updated by APIs that don't support segments (e.g. UDP sync, HTTP API). If no segment is selected, the first segment ( id : 0 ) will behave as if selected. WLED will report the state of the first (lowest id ) segment that is selected to APIs (HTTP, MQTT, Blynk...), or mainseg in case no segment is selected and for the UDP API. Live data is always applied to all LEDs regardless of segment configuration. rev bool Flips the segment, causing animations to change direction. on bool Turns on and off the individual segment. (available since 0.10.0) bri 0 to 255 Sets the individual segment brightness (available since 0.10.0) mi bool Mirrors the segment (available since 0.10.2) cct 0 to 255 or 1900 to 10091 White spectrum color temperature (available since 0.13.0) lx BBBGGGRRR : 0 - 100100100 Loxone RGB value for primary color. Each color ( RRR , GGG , BBB ) is specified in the range from 0 to 100%. lx 20bbbtttt : 200002700 - 201006500 Loxone brightness and color temperature values for primary color. Brightness bbb is specified in the range 0 to 100%. tttt defines the color temperature in the range from 2700 to 6500 Kelvin. (available since 0.11.0, not included in state response) ly BBBGGGRRR : 0 - 100100100 Loxone RGB value for secondary color. Each color ( RRR , GGG , BBB ) is specified in the range from 0 to 100%. ly 20bbbtttt : 200002700 - 201006500 Loxone brightness and color temperature values for secondary color. Brightness bbb is specified in the range 0 to 100%. tttt defines the color temperature in the range from 2700 to 6500 Kelvin. (available since 0.11.0, not included in state response) i array Individual LED control . Not included in state response (available since 0.10.2) frz bool freezes/unfreezes the current effect","title":"Contents of the segment object"},{"location":"interfaces/json-api/#info-object","text":"No value may be changed by means of this API. JSON key Value range Description ver string Version name. vid uint32 Build ID (YYMMDDB, B = daily build index). leds object Contains info about the LED setup. leds.cct bool true if the light supports color temperature control (available since 0.13.0, deprecated, use info.leds.lc) leds.count 1 to 1200 Total LED count. leds.fps 0 to 255 Current frames per second. (available since 0.12.0) leds.rgbw bool true if LEDs are 4-channel (RGB + White). (deprecated, use info.leds.lc) leds.wv bool true if a white channel slider should be displayed. (available since 0.10.0, deprecated, use info.leds.lc) leds.pin byte array LED strip pin(s). Always one element. Removed as of v0.13 leds.pwr 0 to 65000 Current LED power usage in milliamps as determined by the ABL. 0 if ABL is disabled. leds.maxpwr 0 to 65000 Maximum power budget in milliamps for the ABL. 0 if ABL is disabled. leds.maxseg byte Maximum number of segments supported by this version. leds.lc byte Logical AND of all active segment's virtual light capabilities leds.seglc byte array Per-segment virtual light capabilities str bool If true , an UI with only a single button for toggling sync should toggle receive+send, otherwise send only name string Friendly name of the light. Intended for display in lists and titles. udpport uint16 The UDP port for realtime packets and WLED broadcast. live bool If true , the software is currently receiving realtime data via UDP or E1.31. lm string Info about the realtime data source lip string Realtime data source IP address ws -1 to 8 Number of currently connected WebSockets clients. -1 indicates that WS is unsupported in this build. fxcount byte Number of effects included. palcount uint16 Number of palettes configured. wifi object Info about current signal strength wifi.bssid string The BSSID of the currently connected network. wifi.signal 0 to 100 Relative signal quality of the current connection. wifi.channel 1 to 14 The current WiFi channel. fs object Info about the embedded LittleFS filesystem (since 0.11.0) fs.u uint32 Estimate of used filesystem space in kilobytes fs.t uint32 Total filesystem size in kilobytes fs.pmt uint32 Unix timestamp for the last modification to the presets.json file. Not accurate after boot or after using /edit ndc -1 to 255 Number of other WLED devices discovered on the network. -1 if Node discovery disabled. (since 0.12.0) arch string Name of the platform. core string Version of the underlying (Arduino core) SDK. lwip 0, 1, or 2 Version of LwIP. 1 or 2 on ESP8266, 0 (does not apply) on ESP32. Deprecated, removal in 0.14.0 freeheap uint32 Bytes of heap memory (RAM) currently available. Problematic if < 10k . uptime uint32 Time since the last boot/reset in seconds. opt uint16 Used for debugging purposes only. brand string The producer/vendor of the light. Always WLED for standard installations. product string The product name. Always FOSS for standard installations. btype string The origin of the build. src if a release version is compiled from source, bin for an official release image, dev for a development build (regardless of src/bin origin) and exp for experimental versions. ogn if the image is flashed to hardware by the vendor. Removed as of v0.10 mac string The hexadecimal hardware MAC address of the light, lowercase and without colons. ip string The IP address of this instance. Empty string if not connected. (since 0.13.0)","title":"Info object"},{"location":"interfaces/json-api/#per-segment-individual-led-control","text":"Using the i property of the segment object, you can set the LED colors in the segment using the JSON API. Keep in mind that this is non-persistent, if the light is turned off the segment will return to effect mode. The segment is blanked out when using individual control, the set effect will not run. To disable, change any property of the segment or turn off the light. To set individual LEDs starting from the beginning, use an array of Color arrays. {\"seg\":{\"i\":[[255,0,0], [0,255,0], [0,0,255]]}} will set the first LED red, the second green and the third blue. To set individual LEDs, use the LED index followed by its Color array. {\"seg\":{\"i\":[0,[255,0,0], 2,[0,255,0], 4,[0,0,255]]}} is the same as above, but leaves blank spaces between the lit LEDs. To set ranges of LEDs, use the LED start and stop index followed by its Color array. {\"seg\":{\"i\":[0,8,[255,0,0], 10,18,[0,0,255]]}} sets the first eight LEDs to red, leaves out two, and sets another 8 to blue. Keep in mind that the LED indices are segment-based, so LED 0 is the first LED of the segment, not of the entire strip. Segment features, including Grouping, Spacing, Mirroring and Reverse are functional. This feature is available in build 200829 and above. Brightness interaction For your colors to apply correctly, make sure the desired brightness is set beforehand. Turning on the LEDs from an off state and setting individual LEDs in the same JSON request will not work!","title":"Per-segment individual LED control"},{"location":"interfaces/json-api/#turning-individual-segments-onoff","text":"Use: {\"seg\":[{\"id\":X,\"on\":\"t\"}]} and replace X with your desired segment.","title":"Turning Individual Segments On/Off"},{"location":"interfaces/json-api/#playlists","text":"(Available since 0.11.0) Sample playlist API call: { \"playlist\" : { \"ps\" : [ 26 , 20 , 18 , 20 ], \"dur\" : [ 30 , 20 , 10 , 50 ], \"transition\" : 0 , \"repeat\" : 10 , \"end\" : 21 } } This example applies preset ID 26 for 3 seconds, then preset 20 for 2 seconds, then preset 18 for 1 second, lastly preset 20 again for 5 seconds.This repeats 10 times, then preset 21 is applied. Playlist object: JSON key Description ps Array of preset ID integers to be applied in this order. dur Array of time each preset should be kept, in tenths of seconds. If only one integer is supplied, all presets will be kept for that time.Defaults to 10 seconds if not provided. transition Array of time each preset should transition to the next one, in tenths of seconds. If only one integer is supplied, all presets will transition for that time. Defaults to the current transition time if not provided. repeat How many times the entire playlist should cycle before finishing. Set to 0 for an indefinite cycle. Default to indefinite if not provided. end Single preset ID to apply after the playlist finished. Has no effect when an indefinite cycle is set. If not provided, the light will stay on the last preset of the playlist.","title":"Playlists"},{"location":"interfaces/json-api/#light-capabilities","text":"In order to e.g. only show color controls relevant to a given setup, it is necessary to obtain the color capabilities of the light. The info.leds.seglc array can be used to do so on a per-segment level. It contains n+1 8-bit integers, where n is the id of the last active segment, each index corresponds to the segment with that ID. This integer indicates whether a given segment supports (24 bit) RGB colors, an extra (8 bit) white channel and/or adjustable color temperature (CCT): Bit Capability 0 Segment supports RGB color 1 Segment supports white channel 2 Segment supports color temperature 3-7 Reserved (expect any value) Therefore: lc value Capabilities 0 None. Indicates a segment that does not have a bus within its range, e.g. because it is not active. 1 Supports RGB 2 Supports white channel only 3 Supports RGBW 4 Supports CCT only, no white channel (unused) 5 Supports CCT + RGB, no white channel (unused) 6 Supports CCT (including white channel) 7 Supports CCT (including white channel) + RGB Note that CCT is controllable per-segment, while RGB color and white channel have 3 color slots each per segment. info.leds.lc contains this info on a global level, and is a bitwise AND of the per-segment light capability values.","title":"Light capabilities"},{"location":"interfaces/json-api/#cct-control","text":"Please also see the general info about CCT .","title":"CCT control"},{"location":"interfaces/json-api/#supported-value-ranges","text":"Given that the white spectrum handling is agnostic to the true color temperature of the LEDs used, a relative range is preferred for the time being, where a value of 0 indicates the warmest possible color temperature, while a value of 255 indicates the coldest temperature. It is also possible to pass a value in the range of 1900 to 10091 , in which case it is treated as a Kelvin color temperature, where 1900 is mapped to a relative value of 0 and 10091 to a relative value of 255 . As such, it is unlikely to match the actual color temperature output by the light, therefore the relative values 0-255 are preferred for the time being. In the future, an option to specify the Kelvin temperatures of the utilized hardware may be added, once this is done, a color temperature can be set to more accurately match other lights. Therefore, for forward compatibility, your integration should expect both either a 0-255 value for seg.cct , in which case it is a relative value, or an absolute Kelvin value in the range 1000-16000 K. In case a Kelvin value is provided, you can consider the color temperature as accurate, which is not possible with relative 0-255 values as the Kelvin points of the white channels are unknown. It is preferred that you set a new CCT value in the same range as received from WLED, that is, use 0-255 if the original value was within this range, and 1000-20000 K otherwise. If your code relies on absolute Kelvin values, a reasonable estimate for the warm white point (relative 0 ) could be 2700K, while cold white (relative 255 ) could commonly be 6500K.","title":"Supported value ranges"},{"location":"interfaces/json-api/#effect-of-the-segcct-value","text":"seg.cct can always be set, but only has an effect on the physical state of the light if one or both of the following conditions is met: White Balance correction is enabled A bus supporting CCT is configured and Calculate CCT from RGB is not enabled CCT support is indicated by info.leds.cct being true , in which case you can regard the instance as a CCT light and e.g. display a color temperature control.","title":"Effect of the seg.cct value"},{"location":"interfaces/json-api/#sensors","text":"Warning This section about the Sensor API is a DRAFT specification. It is not yet implemented and subject to change. Various types of sensors (e.g. for Temperature, light intensity, PIR) may be added to WLED via usermods. To allow read access to sensor data via the JSON API in a standardized way, the info.sensor array is used. If the info.sensor array is missing or empty, no sensor values are exposed.","title":"Sensors"},{"location":"interfaces/json-api/#sensor-object","text":"Each sensor/measurement is represented by an object within the info.sensor array. For example, { \"type\" : \"T\" , \"n\" : \"Outside\" , \"val\" : 12 } refers to a 12 \u00b0C temperature measurement in Celsius with the sensor name \"Outside\". The object may contain the following properties, of which all are optional, except type . JSON key Value range Description type string The type of the sensor. n string The name of the sensor. If omitted, the client may generate a suitable name (e.g. \"Temperature sensor 1\") val any The most current sensor reading. May be of any JSON type depending on the type of the sensor, this is a number for all sensor types pre-defined below except for the \"b\" and \"CL\" types and custom type sensors. null if the reading is invalid, either due to an error or because the first reading has not yet completed. unit string An explicit human-readable unit string for the measurement. If omitted, the default for the sensor type is used. error int or string If present and not null , false , 0 or an empty string, a sensor error is indicated. May either be an integer error code or an error string. tc number Seconds of WLED uptime when the value last changed substantially. The threshold for a \"substantial\" change is up to the implementation. This can for example be used to find when a PIR sensor was last activated. tm number Seconds of WLED uptime when the last reading given by val was obtained. ts number Seconds of WLED uptime at the first measurement / start of measurement period. (required for Energy sensor type) min number Lower bound of possible value range max number Upper bound of possible value range u number Absolute uncertainty of the measurement model string Identification of the sensor hardware used","title":"Sensor object"},{"location":"interfaces/json-api/#sensor-types","text":"These are the standardized sensor types that may be implemented by usermods: Type ID string Measurement type Default unit \"\" (empty string) Invalid sensor (reserved) - b Button/Boolean true/false c Custom user-defined sensor - q Electric charge As t Time s BL Battery Level % CL 24-bit RGB color hex string E Energy ( ts property required) J I Electric current A J Illuminance lx L Distance m Lp Sound pressure level dB M Mass kg N Number/count - P Power W Pe General purpose percentage % PL Power Level (signal strength) dBm Pr Pressure Pa R Electric Resistance Ohms RH Relative Humidity % T Temperature \u00b0C U Voltage V (other strings) Reserved, let us know if you need a new type added - If a client is only interested in certain sensor types (e.g. Temperature), it may disregard all other sensor objects.","title":"Sensor types"},{"location":"interfaces/mqtt/","text":"Important Notice: The MQTT implementation is currently being restructured to provide a better experience for users of Home Assistant and other automation software. This will be a breaking change . For details regarding the rework, please see #207 ! WLED versions from 0.8.0 up are able to connect to an MQTT broker for smart home control. Connection to both domains and IP servers is supported on port 1883. Warning Secure connections are not currently supported. I recommend only connecting to local MQTT brokers. In v0.8.4-0.8.6 only, WLED supports MQTT autodiscovery by the HomeAssistant software. This has been removed because of bootloop issues and in favor of the native HomeAssistant integration. WLED will subscribe to up to six topics to change the state of the lights. [mqttDeviceTopic] -> Send brightness as ASCII number 0-255 or the strings \"ON\", \"OFF\", and \"T\" (for toggle) [mqttDeviceTopic]/col -> Send color as HEX (#WWRRGGBB or #RRGGBB) or 32bit DEC. Hex has '#','h' or 'H' as prefix. [mqttDeviceTopic]/api -> Send an API call (using the HTTP API or, since 0.11, JSON API syntax). You may omit the \"win\" and just send e.g. \"FX=73\" [mqttGroupTopic] [mqttGroupTopic]/col [mqttGroupTopic]/api The topic paths [mqttDeviceTopic] and [mqttGroupTopic] are customizable in Sync settings. If [mqttGroupTopic] is left empty, it will not subscribe to anything. An empty [mqttDeviceTopic] will instead be replaced with the default \"wled/macaddr\". [mqttDeviceTopic] is intended to be unique to one WLED device and just control that device. [mqttGroupTopic] is intended to control a group of or all WLED devices. UDP notifications will be sent just as if the change was done via the UI or HTTP API. Additionally, on light change, WLED will publish to 3 topics for MQTT clients to query the state of the light. [mqttDeviceTopic]/g -> Contains current brightness as ASCII number 0-255 [mqttDeviceTopic]/c -> Contains current color as HEX (#RRGGBB if white is 0, else #WWRRGGBB) [mqttDeviceTopic]/v -> Contains XML API response (same as HTTP API) There is support for client ID and authentication, but this is presently transmitted over an unencrypted connection, so please do not use the same password for other services. Attention The maximal length of a MQTT messages for WLED is 1024 bytes.","title":"MQTT"},{"location":"interfaces/philips-hue/","text":"WLED can sync to your Philips hue lights. Info This feature allows your WLED light to set it color to that of one of your Hue lights. It does NOT enable individual control of your WLED light from the hue app. To activate it, please go to Sync settings, fill in the IP of your hue bridge. Also you need to fill in the numeric ID of the hue light you want to sync to. Newer versions of the Hue app do not display light IDs in the \"About\" section of the app anymore, to find it, the app Hue Config Viewer is highly recommended. It is available on the Play Store as well as the App Store . After pairing the app to your Hue bridge, you can see the numeric IDs of all your Hue lights in the Lights menu. The poll interval specifies how often WLED asks the hue bridge for a light change. Lower values will mean a quicker response of WLED to hue light changes, but also decrease responsiveness and stability of WLED and potentially the hue bridge. It is recommended to set it to 1000-2000ms. Due to the nature of the hue protocol, WLED can only sync itself to a native hue bulb. At this time, there is no way to add WLED to the hue bridge and control it individually as if it was a native light. Please don't expect the same level of stability with this feature active, the ESP may reset itself because of the increased traffic it needs to handle. With DiyHue you can emulate a hue bridge that will show all WLED strips as Hue Strip Plus which will work with Hue Sync in realtime.","title":"Philips Hue"},{"location":"interfaces/serial/","text":"WLED 0.13.0 supports multiple protocols over Serial. Serial is available via USB, and on most boards, GPIO1 for TX and GPIO3 for RX. Pin usage limitation If GPIO3 is allocated (e.g. for LED output), all Serial functionality except debug output is unavailable. If GPIO1 is allocated, all Serial output is disabled, including the JSON API response, Improv, and tpm2 output. Adalight and tpm2 Both these protocols are supported and can be used to stream realtime LED data to WLED for direct display, e.g. from an bias lighting program. For tpm2, only data packets are supported and data in 24-bit RGB format is expected. If you want to drive a large amount of LEDs, you may need to increase the Baud rate in WLED Sync settings, as the default baud rate of 115200 is only sufficient for about 50-100 LEDs depending on the refresh rate. Adalight is supported since WLED 0.6.3, tpm2 since version 0.10.2. JSON over Serial You can send commands to the WLED instance via Serial using the JSON API . To request a JSON response containing the state and info objects, send {\"v\":true} . Improv Improv Serial is supported and can be used to check the installed software version as well as connect your device to WiFi without needing to connect to the WLED access point. Improv is used by the WLED web installer for an easy installation and setup process. Note that the baud rate must remain at the default 115200 setting for the device to be detected as Improv-capable. Other Version query Send a lowercase 'v' character (byte 0x76 ) to obtain the ID of the installed WLED version. LED data query To get the colors currently displayed by LEDs: Send an uppercase 'L' (byte 0x4C ) to request the current LED data as a tpm2 data packet in 24-bit RGB format. Send a lowercase 'l' (byte 0x6C ) to request the current LED data in JSON format. This returns the LED colors as 32-bit integers, of which the lowest byte is the Blue value, then Green, then Red, and the highest byte is the White channel value. For both of these methods, you may need to increase the baud rate if you have a large amount of LEDs. However, tpm2 requires on average 2-4x less bandwidth than JSON, and should therefore be preferred if your application can parse binary data. Changing Baud Rate There are 2 main method for changing Baud Rate for the serial connection - Persistant: Configure in App under Sync Interfaces . This setting will persist, and WLED will use specified Baud Rate from this point forward. - Temporary: Utilizing the serial connection at the existing Baud Rate, send the specific command byte to have WLED temporarily change to new Baud Rate. This Baud Rate is temporary and will be reset to default or peristant setting on reboot. Byte Baud Rate 0xB0 115200 0xB1 230400 0xB2 460800 0xB3 500000 0xB4 576000 0xB5 921600 0xB6 1000000 0xB7 1500000 - Note: Keep at 115200 to use Improv. Some boards may not support high rates. Debugging Compile with the -D WLED_DEBUG build flag to enable serial debugging using DEBUG_PRINTLN(x) macros. This will reserve pin GPIO1, therefore it cannot be used for other purposes when debugging.","title":"Serial"},{"location":"interfaces/serial/#adalight-and-tpm2","text":"Both these protocols are supported and can be used to stream realtime LED data to WLED for direct display, e.g. from an bias lighting program. For tpm2, only data packets are supported and data in 24-bit RGB format is expected. If you want to drive a large amount of LEDs, you may need to increase the Baud rate in WLED Sync settings, as the default baud rate of 115200 is only sufficient for about 50-100 LEDs depending on the refresh rate. Adalight is supported since WLED 0.6.3, tpm2 since version 0.10.2.","title":"Adalight and tpm2"},{"location":"interfaces/serial/#json-over-serial","text":"You can send commands to the WLED instance via Serial using the JSON API . To request a JSON response containing the state and info objects, send {\"v\":true} .","title":"JSON over Serial"},{"location":"interfaces/serial/#improv","text":"Improv Serial is supported and can be used to check the installed software version as well as connect your device to WiFi without needing to connect to the WLED access point. Improv is used by the WLED web installer for an easy installation and setup process. Note that the baud rate must remain at the default 115200 setting for the device to be detected as Improv-capable.","title":"Improv"},{"location":"interfaces/serial/#other","text":"","title":"Other"},{"location":"interfaces/serial/#version-query","text":"Send a lowercase 'v' character (byte 0x76 ) to obtain the ID of the installed WLED version.","title":"Version query"},{"location":"interfaces/serial/#led-data-query","text":"To get the colors currently displayed by LEDs: Send an uppercase 'L' (byte 0x4C ) to request the current LED data as a tpm2 data packet in 24-bit RGB format. Send a lowercase 'l' (byte 0x6C ) to request the current LED data in JSON format. This returns the LED colors as 32-bit integers, of which the lowest byte is the Blue value, then Green, then Red, and the highest byte is the White channel value. For both of these methods, you may need to increase the baud rate if you have a large amount of LEDs. However, tpm2 requires on average 2-4x less bandwidth than JSON, and should therefore be preferred if your application can parse binary data.","title":"LED data query"},{"location":"interfaces/serial/#changing-baud-rate","text":"There are 2 main method for changing Baud Rate for the serial connection - Persistant: Configure in App under Sync Interfaces . This setting will persist, and WLED will use specified Baud Rate from this point forward. - Temporary: Utilizing the serial connection at the existing Baud Rate, send the specific command byte to have WLED temporarily change to new Baud Rate. This Baud Rate is temporary and will be reset to default or peristant setting on reboot. Byte Baud Rate 0xB0 115200 0xB1 230400 0xB2 460800 0xB3 500000 0xB4 576000 0xB5 921600 0xB6 1000000 0xB7 1500000 - Note: Keep at 115200 to use Improv. Some boards may not support high rates.","title":"Changing Baud Rate"},{"location":"interfaces/serial/#debugging","text":"Compile with the -D WLED_DEBUG build flag to enable serial debugging using DEBUG_PRINTLN(x) macros. This will reserve pin GPIO1, therefore it cannot be used for other purposes when debugging.","title":"Debugging"},{"location":"interfaces/udp-notifier/","text":"Usage The UDP notifier function of WLED makes it easy to sync multiple lights to the same color/effect, enabled by default. You can set the specific behavior of it in Sync settings, also you can choose if all aspects or only brightness/color/effects are applied. Additionally, there is a \"Sync\" quick toggle for it in the main control UI! In UI settings, you can set whether this button only turns on/off sending (default) or also receiving, with the option Sync button toggles both send and receive . If your sync settings are not the way you like on boot, check the WLED Broadcast section in Sync settings, where you can specify what is sent and received by default: Receiving settings Setting Description Receive Brightness If there is a sync notification, whether its brightness should be applied Color Whether the color of the synced device should be applied Effects Whether the effect settings should be applied If all checkboxes are disabled, nothing is received by default after each boot. If the sync is toggled on in the main UI and the corresponding checkbox in UI settings is checked, everything is received. A sync receiver will not assume the state of the last sender directly after booting, a new packet must be send for it to react. Sending settings Setting Description Send on direct change Whether to send a sync notification when state changed via the web UI or API Send on button press Whether to send sync when toggled by the physical hardware button Send Alexa notifications Whether to send sync after changed by Alexa (you may use Alexa groups instead) Send Hue notifications Whether to send sync after a connected Philips light changed Send Macro notifications Whether to send sync after a macro was triggered Send notifications twice Sends notifications twice (if you have issues with UDP packet loss) The quick toggle in the main UI will only apply to direct changes (UI + API), all other sync type sending behavior remains unaffected. You can easily group WLED devices (for example all in one room) by changing the UDP port of all devices you want in that group. Sync groups From v0.13.0, 8 Sync groups are available. This allows syncing select instances only without changing the UDP port. For example, you might use one sync group per room you use WLED devices in. Make sure the sender and receiver you want to sync both have the same sync group ticked (a sender can send to multiple groups and a receiver can listen to multiple groups). Sync packets received from pre-0.13.0 instances are treated as if sent in sync group 1 only. Protocol description Warning Note: this info is partly out of date, see updated functionality in the code ( udp.cpp ) When enabled, the module where a value was changed will send an UDP broadcast to a port (default 21324). Other modules that listen on this port will set themselves to the same color. For interoperability, the protocol was designed so that even modules with different WLED versions can sync. Therefore, if a WLED 0.4 system receives a WLED 0.3 UDP notification it will apply the primary color but keep its current secondary color. The UDP packet is currently 24 bytes long. It is laid out in the following: Byte Index Var Name Description Notifier Version 0 - Packet Purpose Byte* 0 1 callMode Packet Reason** 0 2 bri Master Brightness 0 3 col[0] Primary Red Value 0 4 col[1] Primary Green Value 0 5 col[2] Primary Blue Value 0 6 nightlightActive Nightlight running? 0 7 nightlightDelayMins Nightlight Time 0 8 effectCurrent Effect Index 0 9 effectSpeed Effect Speed 0 10 white Primary White Value 1 11 - Version Byte*** 1 12 colSec[0] Secondary Red Value 2 13 colSec[1] Secondary Green Value 2 14 colSec[2] Secondary Blue Value 2 15 whiteSec Secondary White Value 2 16 effectIntensity Effect Intensity 3 17 transitionDelay Transition Duration Upper 4 18 transitionDelay Transition Duration Lower 4 19 effectPalette FastLED palette 5 20-23 - Zeros - *The notifier protocol is only used if this byte is 0. Otherwise, one of the UDP Realtime protocols will be used. **The callMode variable specifies the reason for the notification. Every color update has the potential to trigger a notification. callMode Description Behavior 0 Initial Boot Do not notify 1 Direct Change via UI or API notifyDirect? 2 Button was pressed notifyButton? 3 Update by other notification Do not notify 4 Nightlight activated notifyDirect? 5 Other (Req. with &NN) Do not notify 6 Effect changed notifyDirect? 7 Hue light changed notifyHue? 8 Preset Cycle active notifyDirect? 9 Updated via Blynk notifyDirect? ***This is the version of the UDP protocol. UDP Version Description WLED Version 0 Basic Support 0.3 1 White Value supported 0.4p 2 Secondary Color supported 0.4 3 Effect Intensity supported 0.5.0 4 Transition Time supported 0.6.0 5 Palettes supported 0.8.0","title":"WLED UDP Sync"},{"location":"interfaces/udp-notifier/#usage","text":"The UDP notifier function of WLED makes it easy to sync multiple lights to the same color/effect, enabled by default. You can set the specific behavior of it in Sync settings, also you can choose if all aspects or only brightness/color/effects are applied. Additionally, there is a \"Sync\" quick toggle for it in the main control UI! In UI settings, you can set whether this button only turns on/off sending (default) or also receiving, with the option Sync button toggles both send and receive . If your sync settings are not the way you like on boot, check the WLED Broadcast section in Sync settings, where you can specify what is sent and received by default:","title":"Usage"},{"location":"interfaces/udp-notifier/#receiving-settings","text":"Setting Description Receive Brightness If there is a sync notification, whether its brightness should be applied Color Whether the color of the synced device should be applied Effects Whether the effect settings should be applied If all checkboxes are disabled, nothing is received by default after each boot. If the sync is toggled on in the main UI and the corresponding checkbox in UI settings is checked, everything is received. A sync receiver will not assume the state of the last sender directly after booting, a new packet must be send for it to react.","title":"Receiving settings"},{"location":"interfaces/udp-notifier/#sending-settings","text":"Setting Description Send on direct change Whether to send a sync notification when state changed via the web UI or API Send on button press Whether to send sync when toggled by the physical hardware button Send Alexa notifications Whether to send sync after changed by Alexa (you may use Alexa groups instead) Send Hue notifications Whether to send sync after a connected Philips light changed Send Macro notifications Whether to send sync after a macro was triggered Send notifications twice Sends notifications twice (if you have issues with UDP packet loss) The quick toggle in the main UI will only apply to direct changes (UI + API), all other sync type sending behavior remains unaffected. You can easily group WLED devices (for example all in one room) by changing the UDP port of all devices you want in that group.","title":"Sending settings"},{"location":"interfaces/udp-notifier/#sync-groups","text":"From v0.13.0, 8 Sync groups are available. This allows syncing select instances only without changing the UDP port. For example, you might use one sync group per room you use WLED devices in. Make sure the sender and receiver you want to sync both have the same sync group ticked (a sender can send to multiple groups and a receiver can listen to multiple groups). Sync packets received from pre-0.13.0 instances are treated as if sent in sync group 1 only.","title":"Sync groups"},{"location":"interfaces/udp-notifier/#protocol-description","text":"Warning Note: this info is partly out of date, see updated functionality in the code ( udp.cpp ) When enabled, the module where a value was changed will send an UDP broadcast to a port (default 21324). Other modules that listen on this port will set themselves to the same color. For interoperability, the protocol was designed so that even modules with different WLED versions can sync. Therefore, if a WLED 0.4 system receives a WLED 0.3 UDP notification it will apply the primary color but keep its current secondary color. The UDP packet is currently 24 bytes long. It is laid out in the following: Byte Index Var Name Description Notifier Version 0 - Packet Purpose Byte* 0 1 callMode Packet Reason** 0 2 bri Master Brightness 0 3 col[0] Primary Red Value 0 4 col[1] Primary Green Value 0 5 col[2] Primary Blue Value 0 6 nightlightActive Nightlight running? 0 7 nightlightDelayMins Nightlight Time 0 8 effectCurrent Effect Index 0 9 effectSpeed Effect Speed 0 10 white Primary White Value 1 11 - Version Byte*** 1 12 colSec[0] Secondary Red Value 2 13 colSec[1] Secondary Green Value 2 14 colSec[2] Secondary Blue Value 2 15 whiteSec Secondary White Value 2 16 effectIntensity Effect Intensity 3 17 transitionDelay Transition Duration Upper 4 18 transitionDelay Transition Duration Lower 4 19 effectPalette FastLED palette 5 20-23 - Zeros - *The notifier protocol is only used if this byte is 0. Otherwise, one of the UDP Realtime protocols will be used. **The callMode variable specifies the reason for the notification. Every color update has the potential to trigger a notification. callMode Description Behavior 0 Initial Boot Do not notify 1 Direct Change via UI or API notifyDirect? 2 Button was pressed notifyButton? 3 Update by other notification Do not notify 4 Nightlight activated notifyDirect? 5 Other (Req. with &NN) Do not notify 6 Effect changed notifyDirect? 7 Hue light changed notifyHue? 8 Preset Cycle active notifyDirect? 9 Updated via Blynk notifyDirect? ***This is the version of the UDP protocol. UDP Version Description WLED Version 0 Basic Support 0.3 1 White Value supported 0.4p 2 Secondary Color supported 0.4 3 Effect Intensity supported 0.5.0 4 Transition Time supported 0.6.0 5 Palettes supported 0.8.0","title":"Protocol description"},{"location":"interfaces/udp-realtime/","text":"Hyperion You can now use WLED with the popular Ambilight software Hyperion. Just configure Hyperion to use an UDP device with protocol 0 on port 19446! The maximum number of LEDs supported in this mode is 490. (WLED 0.8.0 and lower: 341) Prismatik Prismatik is another Ambilight option. Select one of the UDP options in the device configuration wizard. TPM2.NET Supported in latest master and will be available in WLED 0.10.1. Please set the WLED broadcast UDP port to 65506 in Sync settings to enable receiving TPM2.NET data. UDP Realtime Additionally, WLED offers a way to directly drive the connected LEDs via UDP. The protocol is referred to as WLED Audio-Reactive-Led-Strip (WARLS), since the support of that project was its primary goal. However, it can also be used for other realtime applications like an ambilight. WARLS uses the same UDP port the notifier uses (default 21324, can be changed in settings). At the moment, the web UI will be disabled while active, the HTTP API, Alexa and button control remains functional. It uses the current brightness and gamma correction settings. Byte 0 of the UDP packet tells the server which realtime protocol to use. Value Description Max. LEDs 1 WARLS 255 2 DRGB 490 3 DRGBW 367 4 DNRGB 489/packet 0 WLED Notifier - In every protocol, Byte 1 tells the server how many seconds to wait after the last received packet before returning to normal mode, in practice you should use 1-2 (seconds) here in most cases so that the module returns to normal mode quickly after the end of transmission. Use 255 to stay on the UDP data without a timeout until a request is requested via another method. After this the LED color information is transmitted like this: WARLS Byte Description 2 + n*4 LED Index 3 + n*4 Red Value 4 + n*4 Green Value 5 + n*4 Blue Value DRGB: This mode has the difference that the LED indices are not part of the packet, instead every LED is updated. This leads to a higher speed when all LEDs are changed, but a drastically lower speed if only one LED is updated per packet. Byte Description 2 + n*3 Red Value 3 + n*3 Green Value 4 + n*3 Blue Value DRGBW: Like DRGB, but supports the White value for RGBW strips. Byte Description 2 + n*4 Red Value 3 + n*4 Green Value 4 + n*4 Blue Value 5 + n*4 White Value DNRGB: DRGB, but with 2 additional bytes that signify the starting LED index. This allows for more than 490 LEDs in realtime mode by sending multiple packets. Byte Description 2 Start index high byte 3 Start index low byte 4 + n*3 Red Value 5 + n*3 Green Value 6 + n*3 Blue Value When realtime mode starts, all LEDs will be black. However, you don't have to change all LEDs using one packet. Changing a single LED therefore only requires a packet of 2+4 bytes. All LEDs maintain their color until it is changed or the module exits WARLS mode because of a timeout. Setup with ARLS The software now supports audio-reactive-led-strip! Download audio-reactive-led-strip and follow its installation instruction. You can also use my (untested) fork . In that case, you can skip step 2. Insert the following code in led.py after line 66: m.append(1); m.append(2); These are the first two bytes of the protocol. In config.py set your led amount, ESP IP and WLED UDP notifier port. For FPS, a setting between 15-30 is recommended. Run visualization.py! If you have a low amount of LEDS (e.g. 10) try lowering the sigma values in line 129-131. If you have multiple WLED devices, you can sync them all with music. Use the led count of your largest device and set the IP to X.X.X.255 (UDP broadcast). You can adjust the position of the amplitude with the WARLS offset setting. Note that web control currently does not work while it is active.","title":"UDP Realtime / tpm2.net"},{"location":"interfaces/udp-realtime/#hyperion","text":"You can now use WLED with the popular Ambilight software Hyperion. Just configure Hyperion to use an UDP device with protocol 0 on port 19446! The maximum number of LEDs supported in this mode is 490. (WLED 0.8.0 and lower: 341)","title":"Hyperion"},{"location":"interfaces/udp-realtime/#prismatik","text":"Prismatik is another Ambilight option. Select one of the UDP options in the device configuration wizard.","title":"Prismatik"},{"location":"interfaces/udp-realtime/#tpm2net","text":"Supported in latest master and will be available in WLED 0.10.1. Please set the WLED broadcast UDP port to 65506 in Sync settings to enable receiving TPM2.NET data.","title":"TPM2.NET"},{"location":"interfaces/udp-realtime/#udp-realtime","text":"Additionally, WLED offers a way to directly drive the connected LEDs via UDP. The protocol is referred to as WLED Audio-Reactive-Led-Strip (WARLS), since the support of that project was its primary goal. However, it can also be used for other realtime applications like an ambilight. WARLS uses the same UDP port the notifier uses (default 21324, can be changed in settings). At the moment, the web UI will be disabled while active, the HTTP API, Alexa and button control remains functional. It uses the current brightness and gamma correction settings. Byte 0 of the UDP packet tells the server which realtime protocol to use. Value Description Max. LEDs 1 WARLS 255 2 DRGB 490 3 DRGBW 367 4 DNRGB 489/packet 0 WLED Notifier - In every protocol, Byte 1 tells the server how many seconds to wait after the last received packet before returning to normal mode, in practice you should use 1-2 (seconds) here in most cases so that the module returns to normal mode quickly after the end of transmission. Use 255 to stay on the UDP data without a timeout until a request is requested via another method. After this the LED color information is transmitted like this: WARLS Byte Description 2 + n*4 LED Index 3 + n*4 Red Value 4 + n*4 Green Value 5 + n*4 Blue Value DRGB: This mode has the difference that the LED indices are not part of the packet, instead every LED is updated. This leads to a higher speed when all LEDs are changed, but a drastically lower speed if only one LED is updated per packet. Byte Description 2 + n*3 Red Value 3 + n*3 Green Value 4 + n*3 Blue Value DRGBW: Like DRGB, but supports the White value for RGBW strips. Byte Description 2 + n*4 Red Value 3 + n*4 Green Value 4 + n*4 Blue Value 5 + n*4 White Value DNRGB: DRGB, but with 2 additional bytes that signify the starting LED index. This allows for more than 490 LEDs in realtime mode by sending multiple packets. Byte Description 2 Start index high byte 3 Start index low byte 4 + n*3 Red Value 5 + n*3 Green Value 6 + n*3 Blue Value When realtime mode starts, all LEDs will be black. However, you don't have to change all LEDs using one packet. Changing a single LED therefore only requires a packet of 2+4 bytes. All LEDs maintain their color until it is changed or the module exits WARLS mode because of a timeout.","title":"UDP Realtime"},{"location":"interfaces/udp-realtime/#setup-with-arls","text":"The software now supports audio-reactive-led-strip! Download audio-reactive-led-strip and follow its installation instruction. You can also use my (untested) fork . In that case, you can skip step 2. Insert the following code in led.py after line 66: m.append(1); m.append(2); These are the first two bytes of the protocol. In config.py set your led amount, ESP IP and WLED UDP notifier port. For FPS, a setting between 15-30 is recommended. Run visualization.py! If you have a low amount of LEDS (e.g. 10) try lowering the sigma values in line 129-131. If you have multiple WLED devices, you can sync them all with music. Use the led count of your largest device and set the IP to X.X.X.255 (UDP broadcast). You can adjust the position of the amplitude with the WARLS offset setting. Note that web control currently does not work while it is active.","title":"Setup with ARLS"},{"location":"interfaces/websocket/","text":"Version Info Since WLED 0.10.2, a WebSocket server is enabled by default and can be used to access a subset of the JSON API . The server is available at the /ws endpoint, you can access it like ws://[WLED-IP]/ws . You may send any JSON state update to the socket. On change of the lighting state, the server will send a JSON object containing the state and info objects (this is equivalent to HTTP GET /json/si ) to all connected clients. This object will also be sent to a client upon connecting. You can also request a live stream of the LED values (e.g. the \"Peek\" feature of WLED-UI) by sending {\"lv\":true} to the websocket. The returned format is the same as for /json/live . Only one client can receive this at a time, if a new client requests it the stream will stop for the previous client (but the websocket will stay connected). There can be a maximum of 4 clients connected at a time. If a fifth client connects, a different client will be disconnected. On ESP8266, it is recommended to have no more than 2 clients connected simultaneously.","title":"Websocket"},{"location":"interfaces/json-ir/json_infrared/","text":"Version Info Since v0.13.0, infrared control for any IR remote compatible with your IR receiver with JSON remote. A dedicated infrared receiver module is required. (KY-022 or TSOP38238 are confirmed to work and inexpensive) The default sensor pin is GPIO4. It can be changed in the WLED settings. JSON IR Remote The JSON IR remote allows users to customize IR remote behavior without writing custom C code or compiling. Using the JSON IR remote, you can map buttons from any compatible remote to any HTTP request API or JSON API command. The map of IR codes to API commands is stored on your ESP's file system in ir.json . From the \"LED Preferences\" page, set the IR pin and remote type to \"JSON remote\". Once \"JSON remote\" is selected, a file upload control will appear. You can also upload and edit ir.json from the /edit page, which can be reached by going to http://[controller-ip]/edit. If you use the edit page to upload your config file, be sure to name it ir.json . Preconfigured Remotes LED remotes typically are not sold separately. But you can purchase with an RGB controller for $2-4 on AliExpress and $5-10 on Amazon. When purchasing a remote, be sure that it is an infrared (IR) remote and not a radio (RF) remote as they are not supported at this time. 44-key white ir.json 40-key blue ir.json 40-key black ir.json 38-key ir.json (Sold with WLED compatible SP511E controllers) 32-key ir.json (commonly sold with fairy string lights) 24-key (very common, but buttons need repurposed to be very useful with WLED) ir.json v1 gray buttons load presets 1-4 ir.json v2 gray buttons cycle effects, palettes and change speed 24-key grey ir.json 24-key music ir.json v3 21-key ir.json 18-Key Silver ir.json 6-key ir.json Editing ir.json First see if a JSON file already exists for your remote. If not, see if there is a JSON file for a remote with the same number of buttons. Often remotes with the same number of buttons have different labels but emit the same codes. The JSON keys are the hex encoded IR codes emitted by each button. The keys are strings and case is important, be sure to use the same format as the sample below. It is also the same format used when codes are echoed on the serial console. In the JSON document, each button object should have a cmd attribute containing the HTTP request or JSON API command. In addition to HTTP and JSON API commands, several C functions are supported (!incBrightness, !decBrightness, !presetFallback). The !incBrightness and !decBrightness functions, take smaller steps at the dim end of the range with progressively larger steps at the bright end. The !presetFallback function applies a preset (attribute PL) and falls back to the specified effect and palette (attributes FX and FP) if preset does not exist. (see sample below) If an IR remote button is pressed rapidly or held down, subsequent presses have a different code (0xFFFFFFFF). If your command is repeatable but does not contain the \"~\" character and is not calling incBrightness or decBrightness, then add a \"rpt\" attribute with a value of true. Label and position attributes are ignored by WLED but useful when making edits. If an ir.json file does not already exist for your remote, you will need to determine what code each button emits. To do this, connect your ESP8266 or ESP32 to a computer and open Arduino or VSCode serial monitor. Then press each button and record the code printed on the serial monitor. You should see something like this: IR recv 0xFFDE10 You should get a 24-bit hex encoded integer. If you get 0xFFFFFFFF, that means the button has been pressed repeatedly or held down. Try tapping quickly. Tips Map play or auto buttons to a playlist. They currently just turn on preset cycling CY=1 or load a playlist of presets 1-5. You can define the playlist in ir.json as in the sample below, or save a playlist as a preset and load that. Save your 'every day' presets in one range of ids, maybe 1-30; your 'holiday' presets in another range, maybe 31-40. Then you can devote two buttons to cycle through presets. In our example, the command on the 'holiday cycle' button would be P1=31&P2=40&PL=~ You can also group your presets by color; for instance reddish animations in 1-10, greenish in 11-20, bluish in 21-30. The 44-key remote has up and down arrows for red, green and blue. So the command on the 'blue down' button would be P1=21&P2=30&PL=~- Most of the 24-key and fewer remotes are designed with analog LEDs in mind and do not have very useful labels for WLED. With JSON IR and a fine-tip Sharpie, you can repurpose buttons to make them more useful. ir.json sample { \"0xF740BF\" : { \"label\" : \"On/Off\" , \"cmd\" : \"T=2\" , \"rpt\" : true }, \"0xF700FF\" : { \"label\" : \"Speed +\" , \"cmd\" : \"SX=~16\" }, \"0xF720DF\" : { \"label\" : \"Red\" , \"cmnt\" : \"Lava palette + primary, secondary and tertiary colors\" , \"cmd\" : \"FP=8&CL=hFF7F00&C2=hFF0000&C3=hCC3D60\" }, \"0xF710EF\" : { \"label\" : \"Timer1\" , \"cmnt\" : \"Timer 60 min\" , \"cmd\" : \"NL=60&NT=0\" }, \"0xF730CF\" : { \"label\" : \"Play\" , \"cmnt\" : \"prime example of a playlist that cycles every 180 seconds and continues to repeat\" , \"cmd\" : { \"playlist\" :{ \"ps\" :[ 1 , 3 , 5 , 7 , 11 , 13 , 17 ], \"dur\" : 1800 , \"transition\" : 7 , \"repeat\" : 0 , \"end\" : 0 }} }, \"0xFF9867\" : { \"label\" : \"Bright+\" , \"cmnt\" : \"smaller steps at beginning, larger steps at the end\" , \"cmd\" : \"!incBrightness\" }, \"0xF78877\" : { \"label\" : \"DIY1\" , \"cmnt\" : \"Preset 1, fallback to Saw(16) - Party(6) if it doesn't exist\" , \"cmd\" : \"!presetFallback\" , \"PL\" : 1 , \"FX\" : 16 , \"FP\" : 6 }, }","title":"Infrared"},{"location":"interfaces/json-ir/json_infrared/#json-ir-remote","text":"The JSON IR remote allows users to customize IR remote behavior without writing custom C code or compiling. Using the JSON IR remote, you can map buttons from any compatible remote to any HTTP request API or JSON API command. The map of IR codes to API commands is stored on your ESP's file system in ir.json . From the \"LED Preferences\" page, set the IR pin and remote type to \"JSON remote\". Once \"JSON remote\" is selected, a file upload control will appear. You can also upload and edit ir.json from the /edit page, which can be reached by going to http://[controller-ip]/edit. If you use the edit page to upload your config file, be sure to name it ir.json .","title":"JSON IR Remote"},{"location":"interfaces/json-ir/json_infrared/#preconfigured-remotes","text":"LED remotes typically are not sold separately. But you can purchase with an RGB controller for $2-4 on AliExpress and $5-10 on Amazon. When purchasing a remote, be sure that it is an infrared (IR) remote and not a radio (RF) remote as they are not supported at this time. 44-key white ir.json 40-key blue ir.json 40-key black ir.json 38-key ir.json (Sold with WLED compatible SP511E controllers) 32-key ir.json (commonly sold with fairy string lights) 24-key (very common, but buttons need repurposed to be very useful with WLED) ir.json v1 gray buttons load presets 1-4 ir.json v2 gray buttons cycle effects, palettes and change speed 24-key grey ir.json 24-key music ir.json v3 21-key ir.json 18-Key Silver ir.json 6-key ir.json","title":"Preconfigured Remotes"},{"location":"interfaces/json-ir/json_infrared/#editing-irjson","text":"First see if a JSON file already exists for your remote. If not, see if there is a JSON file for a remote with the same number of buttons. Often remotes with the same number of buttons have different labels but emit the same codes. The JSON keys are the hex encoded IR codes emitted by each button. The keys are strings and case is important, be sure to use the same format as the sample below. It is also the same format used when codes are echoed on the serial console. In the JSON document, each button object should have a cmd attribute containing the HTTP request or JSON API command. In addition to HTTP and JSON API commands, several C functions are supported (!incBrightness, !decBrightness, !presetFallback). The !incBrightness and !decBrightness functions, take smaller steps at the dim end of the range with progressively larger steps at the bright end. The !presetFallback function applies a preset (attribute PL) and falls back to the specified effect and palette (attributes FX and FP) if preset does not exist. (see sample below) If an IR remote button is pressed rapidly or held down, subsequent presses have a different code (0xFFFFFFFF). If your command is repeatable but does not contain the \"~\" character and is not calling incBrightness or decBrightness, then add a \"rpt\" attribute with a value of true. Label and position attributes are ignored by WLED but useful when making edits. If an ir.json file does not already exist for your remote, you will need to determine what code each button emits. To do this, connect your ESP8266 or ESP32 to a computer and open Arduino or VSCode serial monitor. Then press each button and record the code printed on the serial monitor. You should see something like this: IR recv 0xFFDE10 You should get a 24-bit hex encoded integer. If you get 0xFFFFFFFF, that means the button has been pressed repeatedly or held down. Try tapping quickly.","title":"Editing ir.json"},{"location":"interfaces/json-ir/json_infrared/#tips","text":"Map play or auto buttons to a playlist. They currently just turn on preset cycling CY=1 or load a playlist of presets 1-5. You can define the playlist in ir.json as in the sample below, or save a playlist as a preset and load that. Save your 'every day' presets in one range of ids, maybe 1-30; your 'holiday' presets in another range, maybe 31-40. Then you can devote two buttons to cycle through presets. In our example, the command on the 'holiday cycle' button would be P1=31&P2=40&PL=~ You can also group your presets by color; for instance reddish animations in 1-10, greenish in 11-20, bluish in 21-30. The 44-key remote has up and down arrows for red, green and blue. So the command on the 'blue down' button would be P1=21&P2=30&PL=~- Most of the 24-key and fewer remotes are designed with analog LEDs in mind and do not have very useful labels for WLED. With JSON IR and a fine-tip Sharpie, you can repurpose buttons to make them more useful.","title":"Tips"},{"location":"interfaces/json-ir/json_infrared/#irjson-sample","text":"{ \"0xF740BF\" : { \"label\" : \"On/Off\" , \"cmd\" : \"T=2\" , \"rpt\" : true }, \"0xF700FF\" : { \"label\" : \"Speed +\" , \"cmd\" : \"SX=~16\" }, \"0xF720DF\" : { \"label\" : \"Red\" , \"cmnt\" : \"Lava palette + primary, secondary and tertiary colors\" , \"cmd\" : \"FP=8&CL=hFF7F00&C2=hFF0000&C3=hCC3D60\" }, \"0xF710EF\" : { \"label\" : \"Timer1\" , \"cmnt\" : \"Timer 60 min\" , \"cmd\" : \"NL=60&NT=0\" }, \"0xF730CF\" : { \"label\" : \"Play\" , \"cmnt\" : \"prime example of a playlist that cycles every 180 seconds and continues to repeat\" , \"cmd\" : { \"playlist\" :{ \"ps\" :[ 1 , 3 , 5 , 7 , 11 , 13 , 17 ], \"dur\" : 1800 , \"transition\" : 7 , \"repeat\" : 0 , \"end\" : 0 }} }, \"0xFF9867\" : { \"label\" : \"Bright+\" , \"cmnt\" : \"smaller steps at beginning, larger steps at the end\" , \"cmd\" : \"!incBrightness\" }, \"0xF78877\" : { \"label\" : \"DIY1\" , \"cmnt\" : \"Preset 1, fallback to Saw(16) - Party(6) if it doesn't exist\" , \"cmd\" : \"!presetFallback\" , \"PL\" : 1 , \"FX\" : 16 , \"FP\" : 6 }, }","title":"ir.json sample"},{"location":"moonmodules/Installing-and-Compiling/","text":"WIP Installing or Compiling Installing a bin Serg e.g. * WLEDMM_0.14.0.10_wemos_shield_esp32_16MB_max.bin * WLEDMM_0.14.0.10_wemos_shield_esp32_4MB_ICS4343x_max.bin * WLEDMM_0.14.0.10_wemos_shield_esp32_4MB_LineIn_max.bin * WLEDMM_0.14.0.10_wemos_shield_esp32_4MB_SPM1423_max.bin * WLEDMM_0.14.0.10_wemos_shield_esp32_4MB_max.bin To do: add more 16MB entries. Wladi wled.me Compiling from MS Code / Platform IO PlatformIO Environments Hardware: Choose the right environment depending on Shield, ESP32 flash size and mic type. Name of the environment reflects this e.g. wemos_shield_esp32_4MB_ICS4343x_max Bin aware: name of the binary contains fork (WLED, WLEDSR, WLEDMM), version and environment e.g WLEDMM_0.14.0.10_wemos_shield_esp32_4MB_ICS4343x_max.bin. This name is shown in the UI when oploading via OTA Build or upload: Build only creates the bin (to be uploaded via OTA or ESPTOOL), upload directly loads it into an USB connected ESP32 board. Shield environments: Pins for Shield are already preconfigured For developers: See platformio-entries Fork specific info WLED SR Also bin aware Bins . Choose latest version. For Wemos Shield choose WLEDSR_0.13.3.4_wemos_shield_esp32_16MB_max.bin or WLEDSR_0.13.3.4_wemos_shield_esp32_4MB_max.bin (Pins pre-configured) To do: add microphones WLED AC Not bin aware Bins . Select folder for WLED AC 0.13.3 or 0.14 beta For Shields choose wemos_shield_esp32 environment (Pins not pre-configured, not available as bin)","title":"Installing and Compiling"},{"location":"moonmodules/Installing-and-Compiling/#installing-or-compiling","text":"","title":"Installing or Compiling"},{"location":"moonmodules/Installing-and-Compiling/#installing-a-bin","text":"","title":"Installing a bin"},{"location":"moonmodules/Installing-and-Compiling/#serg","text":"e.g. * WLEDMM_0.14.0.10_wemos_shield_esp32_16MB_max.bin * WLEDMM_0.14.0.10_wemos_shield_esp32_4MB_ICS4343x_max.bin * WLEDMM_0.14.0.10_wemos_shield_esp32_4MB_LineIn_max.bin * WLEDMM_0.14.0.10_wemos_shield_esp32_4MB_SPM1423_max.bin * WLEDMM_0.14.0.10_wemos_shield_esp32_4MB_max.bin To do: add more 16MB entries.","title":"Serg"},{"location":"moonmodules/Installing-and-Compiling/#wladi","text":"","title":"Wladi"},{"location":"moonmodules/Installing-and-Compiling/#wledme","text":"","title":"wled.me"},{"location":"moonmodules/Installing-and-Compiling/#compiling-from-ms-code-platform-io","text":"","title":"Compiling from MS Code / Platform IO"},{"location":"moonmodules/Installing-and-Compiling/#platformio-environments","text":"Hardware: Choose the right environment depending on Shield, ESP32 flash size and mic type. Name of the environment reflects this e.g. wemos_shield_esp32_4MB_ICS4343x_max Bin aware: name of the binary contains fork (WLED, WLEDSR, WLEDMM), version and environment e.g WLEDMM_0.14.0.10_wemos_shield_esp32_4MB_ICS4343x_max.bin. This name is shown in the UI when oploading via OTA Build or upload: Build only creates the bin (to be uploaded via OTA or ESPTOOL), upload directly loads it into an USB connected ESP32 board. Shield environments: Pins for Shield are already preconfigured For developers: See platformio-entries","title":"PlatformIO Environments"},{"location":"moonmodules/Installing-and-Compiling/#fork-specific-info","text":"","title":"Fork specific info"},{"location":"moonmodules/Installing-and-Compiling/#wled-sr","text":"Also bin aware Bins . Choose latest version. For Wemos Shield choose WLEDSR_0.13.3.4_wemos_shield_esp32_16MB_max.bin or WLEDSR_0.13.3.4_wemos_shield_esp32_4MB_max.bin (Pins pre-configured) To do: add microphones","title":"WLED SR"},{"location":"moonmodules/Installing-and-Compiling/#wled-ac","text":"Not bin aware Bins . Select folder for WLED AC 0.13.3 or 0.14 beta For Shields choose wemos_shield_esp32 environment (Pins not pre-configured, not available as bin)","title":"WLED AC"},{"location":"moonmodules/custom-effects/","text":"Custom effects Custom effects are effects which are not compiled in the WLED repository but specified by a file (program file) which is interpreted in real time. The big advantage of this is that effects are not limited by what is made by WLED programmers but anybody can create effects without releasing a new version of WLED. Furthermore any change in the effect code is instantly shown on leds allowing fast developing of effects. A disadvantage is that the file needs to be loaded, examined and then run in real-time which is 'per definition' slower then pre-compiled code, although performance is promising already and will get better over time. Quick start To get your first Custom Effect running, perform the following steps In tab effects, select '\u2699\ufe0f Custom Effect' In tab Segments, give the segment a name, this will be the name of the Custom Effect Click on Custom Effect Editor Click on Download wled.json to enable Custom Effects for WLED (needed each time a new version of CE is published) Click on Load template to get a 'hello world' example Press save and the template will be executed Running examples Custom Effects examples are stored in Github repository If you develop effects which you want to share, ask for access on Github. These effects can be loaded easily within WLED: Give a Custom Effects segment name the same name as an effect in this repository (case sensitive, without .wled), click on Custom Effect Editor and click Download 'effect'.wled and press Save. Alternatively, if you want all the effects in this folder at once, go to the Custom Effect Editor and click Download presets.json (Segment stop is set to 50! This will overwrite any existing presets you have). Refresh the WLED page or reboot to see the new presets. Create your own Custom Effects A Custom Effects program typically looks like this: A program contains structures like if statements, for loops, assignments, calls (e.g. renderFrame) etc., commands like setPixelcolor and variables like ledCount. Components program: Once every effect. Can contain global variables and internal functions. There are 2 special internal functions: renderFrame and renderLed Global variables: Once every effect, reused between functions. Variables (global and local) are defined by using an assignment e.g. t=0 renderFrame: Once every frame renderLed: Once every led within a frame Functions and variables Functions and variables give access to the WLED functionality. The list of functions and variables will grow as we go. A function has parameters (even empty parameters) e.g. setPixelColor(x,y), variables haven't e.g. ledCount. WLED general \"ledCount\": {}, \"setPixelColor\": {\"pixelNr\":\"int\", \"color\":\"int\"}, \"leds\": {}, \"setPixels\": {\"leds\": \"array\"}, \"hsv\": {\"h\":\"uint8\", \"s\":\"uint8\", \"v\":\"uint8\"}, \"setRange\": {\"from\":\"uint16\", \"to\":\"uint16\", \"color\":\"uint32\"}, \"fill\": {\"color\":\"uint32\"}, \"colorBlend\": {\"color1\":\"uint32\", \"color2\":\"uint32\", \"blend\":\"uint16\"}, \"colorWheel\": {\"pos\":\"uint8\"}, \"colorFromPalette\": {\"index\":\"uint8\", \"brightness\":\"uint8\"}, \"segcolor\": {\"index\":\"uint8\"}, \"speedSlider\": {\"return\":\"uint8\"}, \"intensitySlider\": {\"return\":\"uint8\"}, WLED SR \"beatSin\": { \"bpm\":\"uint16\", \"lowest\":\"uint8\", \"highest\":\"uint8\", \"timebase\":\"uint32\", \"phase_offset\":\"uint8\"}, \"fadeToBlackBy\": {\"fadeBy\":\"uint8\"}, \"iNoise\": {\"x\":\"uint32\", \"y\":\"uint32\"}, \"fadeOut\": {\"rate\":\"uint8\"}, \"custom1Slider\": {\"return\":\"uint8\"}, \"custom2Slider\": {\"return\":\"uint8\"}, \"custom3Slider\": {\"return\":\"uint8\"}, \"sampleAvg\": {\"return\": \"double\"}, Custom Effects \"counter\": {\"return\": \"uint32\"}, \"shift\": {\"delta\": \"int\"}, \"circle2D\": {\"degrees\": \"int\"}, Math \"constrain\": {\"amt\":\"any\", \"low\":\"any\", \"high\":\"any\"}, \"map\": {\"x\":\"int\", \"in_min\":\"int\", \"in_max\":\"int\", \"out_min\":\"int\", \"out_max\":\"int\"}, \"seed\": {\"seed\": \"uint16\"}, \"random\": {\"return\": \"uint16\"}, \"sin\": {\"degrees\": \"double\", \"return\": \"double\"}, \"cos\": {\"degrees\": \"double\", \"return\": \"double\"}, \"abs\": {\"value\": \"double\", \"return\": \"double\"}, \"min\": {\"value1\": \"double\", \"value2\": \"double\", \"return\": \"double\"}, \"max\": {\"value1\": \"double\", \"value2\": \"double\", \"return\": \"double\"}, Time \"hour\": {\"return\":\"uint8\"}, \"minute\": {\"return\":\"uint8\"}, \"second\": {\"return\":\"uint8\"}, \"millis\": {\"return\": \"uint32\"}, Pixelblase support \"time\": {\"inVal\":\"double\", \"return\": \"double\"}, \"triangle\": {\"t\":\"double\", \"return\": \"double\"}, \"wave\": {\"v\":\"double\", \"return\": \"double\"}, \"square\": {\"v\":\"double\", \"t\":\"double\", \"return\": \"double\"}, Serial output \"printf\": {\"args\": \"__VA_ARGS__\"} Details ledcount: number of leds within(!) a segment setpixelColor: currently the second parameter is color from palette! leds: one or 2 dimensional array: One index for led strips and 2 indexes for panels. If the leds variable is used an implicit setPixels(leds) will be done each frame! shift: shift all leds left or right (using delta) circle2D: puts a dot on a circle using the angle. Used to show a 2D clock, see clock2D.wled random: 16 bit random nr sin/cos: value between -1 and 1 hour/minute/second: current time (set in time preferences) printf: currently no real printf: prints numbers, max 3 Implementation of variables and functions All variables and values are internally stored as doubles and where needed converted to (unsigned) integers, e.g. to WLED functions or operators like %. Technical details about external variables and functions can be found in arti_wled.h. Look for arti_external_function, arti_set_external_variable and arti_get_external_variable. Some examples: Current limitations Only 1 segment no unary operators like - (use 0-1) and ++, -- no strings trouble shooting effect crashes: most likely too deeply nested commands (e.g. pixbri = (sin(startVal + millis()/(255- freq)) + 1) * 128), try to split up in more lines.","title":"Custom Effects"},{"location":"moonmodules/custom-effects/#custom-effects","text":"Custom effects are effects which are not compiled in the WLED repository but specified by a file (program file) which is interpreted in real time. The big advantage of this is that effects are not limited by what is made by WLED programmers but anybody can create effects without releasing a new version of WLED. Furthermore any change in the effect code is instantly shown on leds allowing fast developing of effects. A disadvantage is that the file needs to be loaded, examined and then run in real-time which is 'per definition' slower then pre-compiled code, although performance is promising already and will get better over time.","title":"Custom effects"},{"location":"moonmodules/custom-effects/#quick-start","text":"To get your first Custom Effect running, perform the following steps In tab effects, select '\u2699\ufe0f Custom Effect' In tab Segments, give the segment a name, this will be the name of the Custom Effect Click on Custom Effect Editor Click on Download wled.json to enable Custom Effects for WLED (needed each time a new version of CE is published) Click on Load template to get a 'hello world' example Press save and the template will be executed","title":"Quick start"},{"location":"moonmodules/custom-effects/#running-examples","text":"Custom Effects examples are stored in Github repository If you develop effects which you want to share, ask for access on Github. These effects can be loaded easily within WLED: Give a Custom Effects segment name the same name as an effect in this repository (case sensitive, without .wled), click on Custom Effect Editor and click Download 'effect'.wled and press Save. Alternatively, if you want all the effects in this folder at once, go to the Custom Effect Editor and click Download presets.json (Segment stop is set to 50! This will overwrite any existing presets you have). Refresh the WLED page or reboot to see the new presets.","title":"Running examples"},{"location":"moonmodules/custom-effects/#create-your-own-custom-effects","text":"A Custom Effects program typically looks like this: A program contains structures like if statements, for loops, assignments, calls (e.g. renderFrame) etc., commands like setPixelcolor and variables like ledCount.","title":"Create your own Custom Effects"},{"location":"moonmodules/custom-effects/#components","text":"program: Once every effect. Can contain global variables and internal functions. There are 2 special internal functions: renderFrame and renderLed Global variables: Once every effect, reused between functions. Variables (global and local) are defined by using an assignment e.g. t=0 renderFrame: Once every frame renderLed: Once every led within a frame","title":"Components"},{"location":"moonmodules/custom-effects/#functions-and-variables","text":"Functions and variables give access to the WLED functionality. The list of functions and variables will grow as we go. A function has parameters (even empty parameters) e.g. setPixelColor(x,y), variables haven't e.g. ledCount.","title":"Functions and variables"},{"location":"moonmodules/custom-effects/#wled-general","text":"\"ledCount\": {}, \"setPixelColor\": {\"pixelNr\":\"int\", \"color\":\"int\"}, \"leds\": {}, \"setPixels\": {\"leds\": \"array\"}, \"hsv\": {\"h\":\"uint8\", \"s\":\"uint8\", \"v\":\"uint8\"}, \"setRange\": {\"from\":\"uint16\", \"to\":\"uint16\", \"color\":\"uint32\"}, \"fill\": {\"color\":\"uint32\"}, \"colorBlend\": {\"color1\":\"uint32\", \"color2\":\"uint32\", \"blend\":\"uint16\"}, \"colorWheel\": {\"pos\":\"uint8\"}, \"colorFromPalette\": {\"index\":\"uint8\", \"brightness\":\"uint8\"}, \"segcolor\": {\"index\":\"uint8\"}, \"speedSlider\": {\"return\":\"uint8\"}, \"intensitySlider\": {\"return\":\"uint8\"},","title":"WLED general"},{"location":"moonmodules/custom-effects/#wled-sr","text":"\"beatSin\": { \"bpm\":\"uint16\", \"lowest\":\"uint8\", \"highest\":\"uint8\", \"timebase\":\"uint32\", \"phase_offset\":\"uint8\"}, \"fadeToBlackBy\": {\"fadeBy\":\"uint8\"}, \"iNoise\": {\"x\":\"uint32\", \"y\":\"uint32\"}, \"fadeOut\": {\"rate\":\"uint8\"}, \"custom1Slider\": {\"return\":\"uint8\"}, \"custom2Slider\": {\"return\":\"uint8\"}, \"custom3Slider\": {\"return\":\"uint8\"}, \"sampleAvg\": {\"return\": \"double\"},","title":"WLED SR"},{"location":"moonmodules/custom-effects/#custom-effects_1","text":"\"counter\": {\"return\": \"uint32\"}, \"shift\": {\"delta\": \"int\"}, \"circle2D\": {\"degrees\": \"int\"},","title":"Custom Effects"},{"location":"moonmodules/custom-effects/#math","text":"\"constrain\": {\"amt\":\"any\", \"low\":\"any\", \"high\":\"any\"}, \"map\": {\"x\":\"int\", \"in_min\":\"int\", \"in_max\":\"int\", \"out_min\":\"int\", \"out_max\":\"int\"}, \"seed\": {\"seed\": \"uint16\"}, \"random\": {\"return\": \"uint16\"}, \"sin\": {\"degrees\": \"double\", \"return\": \"double\"}, \"cos\": {\"degrees\": \"double\", \"return\": \"double\"}, \"abs\": {\"value\": \"double\", \"return\": \"double\"}, \"min\": {\"value1\": \"double\", \"value2\": \"double\", \"return\": \"double\"}, \"max\": {\"value1\": \"double\", \"value2\": \"double\", \"return\": \"double\"},","title":"Math"},{"location":"moonmodules/custom-effects/#time","text":"\"hour\": {\"return\":\"uint8\"}, \"minute\": {\"return\":\"uint8\"}, \"second\": {\"return\":\"uint8\"}, \"millis\": {\"return\": \"uint32\"},","title":"Time"},{"location":"moonmodules/custom-effects/#pixelblase-support","text":"\"time\": {\"inVal\":\"double\", \"return\": \"double\"}, \"triangle\": {\"t\":\"double\", \"return\": \"double\"}, \"wave\": {\"v\":\"double\", \"return\": \"double\"}, \"square\": {\"v\":\"double\", \"t\":\"double\", \"return\": \"double\"},","title":"Pixelblase support"},{"location":"moonmodules/custom-effects/#serial-output","text":"\"printf\": {\"args\": \"__VA_ARGS__\"}","title":"Serial output"},{"location":"moonmodules/custom-effects/#details","text":"ledcount: number of leds within(!) a segment setpixelColor: currently the second parameter is color from palette! leds: one or 2 dimensional array: One index for led strips and 2 indexes for panels. If the leds variable is used an implicit setPixels(leds) will be done each frame! shift: shift all leds left or right (using delta) circle2D: puts a dot on a circle using the angle. Used to show a 2D clock, see clock2D.wled random: 16 bit random nr sin/cos: value between -1 and 1 hour/minute/second: current time (set in time preferences) printf: currently no real printf: prints numbers, max 3","title":"Details"},{"location":"moonmodules/custom-effects/#implementation-of-variables-and-functions","text":"All variables and values are internally stored as doubles and where needed converted to (unsigned) integers, e.g. to WLED functions or operators like %. Technical details about external variables and functions can be found in arti_wled.h. Look for arti_external_function, arti_set_external_variable and arti_get_external_variable. Some examples:","title":"Implementation of variables and functions"},{"location":"moonmodules/custom-effects/#current-limitations","text":"Only 1 segment no unary operators like - (use 0-1) and ++, -- no strings","title":"Current limitations"},{"location":"moonmodules/custom-effects/#trouble-shooting","text":"effect crashes: most likely too deeply nested commands (e.g. pixbri = (sin(startVal + millis()/(255- freq)) + 1) * 128), try to split up in more lines.","title":"trouble shooting"},{"location":"moonmodules/fork-comparison/","text":"What are the differences between WLED SR, upstream AC WLED, and MoonModules fork? Feature WLED SR 0.13 MoonModules WLED 0.14 Upstream WLED 0.14 0.14 architecture No Yes (upstream frequently merged) Yes Usermods have own pages in main config menu Audio Reactive only Yes No Segments 2D aware No (XY calculated, mirror not working) Yes Yes Audio reactive Core Usermod Usermod Microphone Profiles No Yes No Audio dynamics limiter No Yes Yes High Definition audio analysis, 32 channel GEQ No Yes (WIP) for ESP32 and ESP32-S3 No Custom Effects Yes Yes as a usermod! No Effect ID's 0.13 compatible 0.13 compatible (recommended!) Changed, old SR presets will not work. Expand 1D effects No Yes (+ Circles and Block) Yes Extended hw info basic Yes No JSON Mapping on 1D effects No Yes No Games usermod (3D to 2D, gyro) No Yes (WIP) No Weather usermod (syncing internet data) No Yes (WIP) No HB effects Fully supported 80% supported (WIP) Not supported classic ESP32 Yes Yes Yes ESP32-S3 No Yes Experimental ESP32-S2 and ESP32-C3 No Experimental Experimental ESP8266 No Yes but no Audio Reactive Yes but no Audio Reactive Ledmaps 2D Yes Yes No","title":"Fork comparison"},{"location":"moonmodules/mappings/","text":"Introduction Mappings Below is in processing order JSON mapping AKA jmap 1D expansion: maps a 1D effect to a 2D pattern Segment to Logical Maps segments to a matrix where (0,0) is always topleft and (width, height) always bottom right. Non serpentine Ledmaps Shuffles leds Both for 1 and 2D Code: uses customMappingTable See also Advanced/Mappings Logical to Physical Takes into account Panel setup and Led panel layout as defined in 2D Configuration (e.g. 1st panel, 1st led, serpentine) Code: uses customMappingTable Physical to Busses One or multiple GPIO ports Fork specific info Feature WLED SR 0.13 MoonModules WLED 0.14 Upstream WLED 0.14 JSON Mapping No Yes No JSON mapping yet although it's based on an idea from AirCoookie Segment to Logical Yes Yes Yes Ledmaps Yes Yes Ledmaps only for 1D, 2D not implemented (PR pending) Logical to Physical Yes Yes Yes Physical to Busses Yes Yes Yes","title":"Mappings"},{"location":"moonmodules/mappings/#introduction","text":"","title":"Introduction"},{"location":"moonmodules/mappings/#mappings","text":"Below is in processing order","title":"Mappings"},{"location":"moonmodules/mappings/#json-mapping","text":"AKA jmap 1D expansion: maps a 1D effect to a 2D pattern","title":"JSON mapping"},{"location":"moonmodules/mappings/#segment-to-logical","text":"Maps segments to a matrix where (0,0) is always topleft and (width, height) always bottom right. Non serpentine","title":"Segment to Logical"},{"location":"moonmodules/mappings/#ledmaps","text":"Shuffles leds Both for 1 and 2D Code: uses customMappingTable See also Advanced/Mappings","title":"Ledmaps"},{"location":"moonmodules/mappings/#logical-to-physical","text":"Takes into account Panel setup and Led panel layout as defined in 2D Configuration (e.g. 1st panel, 1st led, serpentine) Code: uses customMappingTable","title":"Logical to Physical"},{"location":"moonmodules/mappings/#physical-to-busses","text":"One or multiple GPIO ports","title":"Physical to Busses"},{"location":"moonmodules/mappings/#fork-specific-info","text":"Feature WLED SR 0.13 MoonModules WLED 0.14 Upstream WLED 0.14 JSON Mapping No Yes No JSON mapping yet although it's based on an idea from AirCoookie Segment to Logical Yes Yes Yes Ledmaps Yes Yes Ledmaps only for 1D, 2D not implemented (PR pending) Logical to Physical Yes Yes Yes Physical to Busses Yes Yes Yes","title":"Fork specific info"},{"location":"moonmodules/merge-history/","text":"history of features added to the mdev branch Our latest work can be found here: mdev and is based upon the latest version of 0.14. You can compile it yourself using PlatformIO.ini entry esp32_4MB_max or get a build from Serg74 (daily) or Wladi (periodically). Custom Effects improvements November 29, 2022 Custom Effect improvements: - Simplified presets.json (can be downloaded directly into WLED MM in Custom Effect editor screen) - some bug fixes to let Custom Effects run better on 2D And combining Custom Effects with 1D expansions gives great results and makes Custom Effects very well performing on large 2D matrices!!! This is color_fade_pulse (by @atuline) with Circles expansion: Improved lay-out usermod settings November 20, 2022 Grouping and pre-post texts in usermod settings (to make it more readable) Audioreactive palettes November 19, 2022 by NetMindz Extended mic settings in platformIO November 18, 2022 allowing to create mic specific environments: Bin Aware Builds October 28, 2022 Upload hardware specific configs based on generated filenames (=> WLED install is aware of underlying hardware). Ultimate goal of bin awareness is that WLED itself says: hey! I found a new update for you, do you want to install? plus (esp32mdev -> esp32_4MB_min. esp32mdevmax -> esp32_4MB_max / esp32_16MB_max) plus (0.14.0. sequence of upstream commit . sequence of mm commit (need to be updated together with build date) => => (WLED install is aware of the filename of it's bin, WLEDMM_0.14.0.2.1_esp32_16MB.bin in this example) plus (Serg and Wladi repo's should use the same names) OTA latest release October 25, 2022 Manual OTA Update is showing the latest MoonModules/WLED release and clicking on the version icon jumps to the release pages on Github , links to Serg74 and Wladi builds are also shown on the release page, so Manual OTA Update will guide you to the version you need! Add Circles and Block as 1D expansion October 21, 2022 Add Circles and Block as 1D expansion and show virtualStrip effects with \u22ee\u22ee Tetris effect with block expansion: compatibility for SR/0.13 presets October 20, 2022 Thanks to ' renumbered effect ID's back to WLED SR 0.13 numbering ': Add compatibility for SR/0.13 presets. This allows HB effects to be run on 0.14, however this shows that there are some shortcomings in 0.14: e.g. lissajoux not working as at should and overlapping segments not working (e.g. Akemi from Hell ): November update: Lissajoux, Akemi from Hell (and others) fixed, overlapping segments working now. Check this in Led Preferences: (To see them fully working: load them into WLEDSR 0.13!) To upload HR effects put effects / presets.json in /edit To start creating your own multiple segment effects put base / presets.json in /edit Presets.json files are here renumbered effect ID's back to WLED SR 0.13 numbering October 16, 2022 Important update: renumbered effect ID's back to WLED SR 0.13 numbering so WLED (SR) 0.13 is compatible with MoonModules 0.14 for presets and sync between devices Extra hardware info on Info tab October 13, 2022 Refactored JSON Mapping October 1, 2022 smaller memory footprint so larger mappings can be used, e.g. Snake32: Files are here: JSONMappings Games usermod additions September 27, 2022 Added to games usermod: 3D to 2D mapping Adding Frame3D class which takes a 3D coordinate and maps this to 2D matrix (using addEffect(), setPixelColor(floats) and drawLine() added in 0.14 version) = 3D + Gyro Refactoring USERMOD_MPU6050_IMU (so that it works!) using latest ElectronicCats/mpu6050 library Embedding this usermod in games usermod and use yaw pitch and roll in Frame3D class + = Adding pong September 16, 2022 Adding pong In games usermod updates from audio-reactive September 8, 2022 updates from audio-reactive merged to upstream volume & frequency \"dynamics limiter\" - slower decay of sound volume in effects. Also has an effect on GEQ, as it turns on smoothing for frequency bands. GEQ frequency scaling: None (as in SR WLED), Linear, Square Root (new default), Logarithmic. work in progress New option \"MIC profile\" - default (same table as in SR WLED), line-in (strictly \"pink noise\"), IMNP441 (optimized), ICS-43434 (optimized). This option causes the use of different \"pink noise tables\" when adjusting the frequency spectrum to human \"hearing sensitivity\". Pink noise calibration is very common when using hardware Equalizers. A good testcase is this Pink Noise Video . (minor) Showing the \"GEQ input gain\" in percent, next to the slider value. user-settable \"Trebble Amplification\" for GEQ effects. Will be placed into the Info Page, directly under \"GEQ input gain\". FrameWork-V4 September 6 Lessons Learnt : When upgrading WLED devices to software using the IDF 4.4.x framework, it seems that a flash erase is needed. Without this, we observed crashes whenever files were written. Suspected cause: Lorol LittleFS (from standards framework) is not compatible with the built-in littleFS from IDF v4.4 / arduino-esp32 v2.0.4. Could be that the partition table is the problem, so a chip erase is needed to clean the table. A new merge to mdev has been done: new environment esp32mdev_V4 so that normal compiles are not getting the new framework automatically. updates from audioreactive-prototype Will merge into upstream Json Mapping From excel/vba via /edit and to matrix Files are here: JSONMappings September 2 updates from audioreactive-prototype Merged into upstream Expand1D effects Virtual strips in 1D effects Strip bar has been merged to upstream, strip Arc and strip Corner (as opposed to pixel Arc and Corner, see upstream) is \"waiting\" in upstream branch. To be added to MoonModules. Usermod level up each usermod got its own settings page September 1 August 31 Custom Effects + = drawArc using x2+y2=r2 instead of sin/cos Weather usermod + = August 29 updates from audioreactive-prototype Merged into upstream Sound simulations Expand 1D into 2D Virtual strips in 1D effects liveview / peek 2D AR: reduce variables AR: Sound info in info panel Replace leds[] by sPC/gPC Slower fade-out in GEQ and a few other audioreactive effects. Audio reactive stuff: upgrade to latest ArduinoFFT, using 'float' instead of 'double'. Up to 8 times faster! configurable sound dynamics limiter, to make audioreactive effects flow with the music, and prevent \"sudden flashes at onsets\". A kind of 'flicker fixer'. improvements for UDP sound sync new frequency scaling options 'square root' and 'logarithmic' - GEQ shows more action in higher frequencies.","title":"Merge history"},{"location":"moonmodules/merge-history/#custom-effects-improvements","text":"November 29, 2022 Custom Effect improvements: - Simplified presets.json (can be downloaded directly into WLED MM in Custom Effect editor screen) - some bug fixes to let Custom Effects run better on 2D And combining Custom Effects with 1D expansions gives great results and makes Custom Effects very well performing on large 2D matrices!!! This is color_fade_pulse (by @atuline) with Circles expansion:","title":"Custom Effects improvements"},{"location":"moonmodules/merge-history/#improved-lay-out-usermod-settings","text":"November 20, 2022 Grouping and pre-post texts in usermod settings (to make it more readable)","title":"Improved lay-out usermod settings"},{"location":"moonmodules/merge-history/#audioreactive-palettes","text":"November 19, 2022 by NetMindz","title":"Audioreactive palettes"},{"location":"moonmodules/merge-history/#extended-mic-settings-in-platformio","text":"November 18, 2022 allowing to create mic specific environments:","title":"Extended mic settings in platformIO"},{"location":"moonmodules/merge-history/#bin-aware-builds","text":"October 28, 2022 Upload hardware specific configs based on generated filenames (=> WLED install is aware of underlying hardware). Ultimate goal of bin awareness is that WLED itself says: hey! I found a new update for you, do you want to install? plus (esp32mdev -> esp32_4MB_min. esp32mdevmax -> esp32_4MB_max / esp32_16MB_max) plus (0.14.0. sequence of upstream commit . sequence of mm commit (need to be updated together with build date) => => (WLED install is aware of the filename of it's bin, WLEDMM_0.14.0.2.1_esp32_16MB.bin in this example) plus (Serg and Wladi repo's should use the same names)","title":"Bin Aware Builds"},{"location":"moonmodules/merge-history/#ota-latest-release","text":"October 25, 2022 Manual OTA Update is showing the latest MoonModules/WLED release and clicking on the version icon jumps to the release pages on Github , links to Serg74 and Wladi builds are also shown on the release page, so Manual OTA Update will guide you to the version you need!","title":"OTA latest release"},{"location":"moonmodules/merge-history/#add-circles-and-block-as-1d-expansion","text":"October 21, 2022 Add Circles and Block as 1D expansion and show virtualStrip effects with \u22ee\u22ee Tetris effect with block expansion:","title":"Add Circles and Block as 1D expansion"},{"location":"moonmodules/merge-history/#compatibility-for-sr013-presets","text":"October 20, 2022 Thanks to ' renumbered effect ID's back to WLED SR 0.13 numbering ': Add compatibility for SR/0.13 presets. This allows HB effects to be run on 0.14, however this shows that there are some shortcomings in 0.14: e.g. lissajoux not working as at should and overlapping segments not working (e.g. Akemi from Hell ): November update: Lissajoux, Akemi from Hell (and others) fixed, overlapping segments working now. Check this in Led Preferences: (To see them fully working: load them into WLEDSR 0.13!) To upload HR effects put effects / presets.json in /edit To start creating your own multiple segment effects put base / presets.json in /edit Presets.json files are here","title":"compatibility for SR/0.13 presets"},{"location":"moonmodules/merge-history/#renumbered-effect-ids-back-to-wled-sr-013-numbering","text":"October 16, 2022 Important update: renumbered effect ID's back to WLED SR 0.13 numbering so WLED (SR) 0.13 is compatible with MoonModules 0.14 for presets and sync between devices","title":"renumbered effect ID's back to WLED SR 0.13 numbering"},{"location":"moonmodules/merge-history/#extra-hardware-info-on-info-tab","text":"October 13, 2022","title":"Extra hardware info on Info tab"},{"location":"moonmodules/merge-history/#refactored-json-mapping","text":"October 1, 2022 smaller memory footprint so larger mappings can be used, e.g. Snake32: Files are here: JSONMappings","title":"Refactored JSON Mapping"},{"location":"moonmodules/merge-history/#games-usermod-additions","text":"September 27, 2022 Added to games usermod:","title":"Games usermod additions"},{"location":"moonmodules/merge-history/#3d-to-2d-mapping","text":"Adding Frame3D class which takes a 3D coordinate and maps this to 2D matrix (using addEffect(), setPixelColor(floats) and drawLine() added in 0.14 version) =","title":"3D to 2D mapping"},{"location":"moonmodules/merge-history/#3d-gyro","text":"Refactoring USERMOD_MPU6050_IMU (so that it works!) using latest ElectronicCats/mpu6050 library Embedding this usermod in games usermod and use yaw pitch and roll in Frame3D class + =","title":"3D + Gyro"},{"location":"moonmodules/merge-history/#adding-pong","text":"September 16, 2022","title":"Adding pong"},{"location":"moonmodules/merge-history/#adding-pong_1","text":"In games usermod","title":"Adding pong"},{"location":"moonmodules/merge-history/#updates-from-audio-reactive","text":"September 8, 2022","title":"updates from audio-reactive"},{"location":"moonmodules/merge-history/#updates-from-audio-reactive_1","text":"","title":"updates from audio-reactive"},{"location":"moonmodules/merge-history/#merged-to-upstream","text":"volume & frequency \"dynamics limiter\" - slower decay of sound volume in effects. Also has an effect on GEQ, as it turns on smoothing for frequency bands. GEQ frequency scaling: None (as in SR WLED), Linear, Square Root (new default), Logarithmic.","title":"merged to upstream"},{"location":"moonmodules/merge-history/#work-in-progress","text":"New option \"MIC profile\" - default (same table as in SR WLED), line-in (strictly \"pink noise\"), IMNP441 (optimized), ICS-43434 (optimized). This option causes the use of different \"pink noise tables\" when adjusting the frequency spectrum to human \"hearing sensitivity\". Pink noise calibration is very common when using hardware Equalizers. A good testcase is this Pink Noise Video . (minor) Showing the \"GEQ input gain\" in percent, next to the slider value. user-settable \"Trebble Amplification\" for GEQ effects. Will be placed into the Info Page, directly under \"GEQ input gain\".","title":"work in progress"},{"location":"moonmodules/merge-history/#framework-v4","text":"September 6 Lessons Learnt : When upgrading WLED devices to software using the IDF 4.4.x framework, it seems that a flash erase is needed. Without this, we observed crashes whenever files were written. Suspected cause: Lorol LittleFS (from standards framework) is not compatible with the built-in littleFS from IDF v4.4 / arduino-esp32 v2.0.4. Could be that the partition table is the problem, so a chip erase is needed to clean the table. A new merge to mdev has been done: new environment esp32mdev_V4 so that normal compiles are not getting the new framework automatically.","title":"FrameWork-V4"},{"location":"moonmodules/merge-history/#updates-from-audioreactive-prototype","text":"Will merge into upstream","title":"updates from audioreactive-prototype"},{"location":"moonmodules/merge-history/#json-mapping","text":"From excel/vba via /edit and to matrix Files are here: JSONMappings","title":"Json Mapping"},{"location":"moonmodules/merge-history/#september-2","text":"","title":"September 2"},{"location":"moonmodules/merge-history/#updates-from-audioreactive-prototype_1","text":"Merged into upstream","title":"updates from audioreactive-prototype"},{"location":"moonmodules/merge-history/#expand1d-effects","text":"Virtual strips in 1D effects Strip bar has been merged to upstream, strip Arc and strip Corner (as opposed to pixel Arc and Corner, see upstream) is \"waiting\" in upstream branch. To be added to MoonModules.","title":"Expand1D effects"},{"location":"moonmodules/merge-history/#usermod-level-up","text":"each usermod got its own settings page","title":"Usermod level up"},{"location":"moonmodules/merge-history/#september-1","text":"","title":"September 1"},{"location":"moonmodules/merge-history/#august-31","text":"","title":"August 31"},{"location":"moonmodules/merge-history/#custom-effects","text":"+ = drawArc using x2+y2=r2 instead of sin/cos","title":"Custom Effects"},{"location":"moonmodules/merge-history/#weather-usermod","text":"+ =","title":"Weather usermod"},{"location":"moonmodules/merge-history/#august-29","text":"","title":"August 29"},{"location":"moonmodules/merge-history/#updates-from-audioreactive-prototype_2","text":"","title":"updates from audioreactive-prototype"},{"location":"moonmodules/merge-history/#merged-into-upstream","text":"Sound simulations Expand 1D into 2D Virtual strips in 1D effects liveview / peek 2D AR: reduce variables AR: Sound info in info panel Replace leds[] by sPC/gPC Slower fade-out in GEQ and a few other audioreactive effects. Audio reactive stuff: upgrade to latest ArduinoFFT, using 'float' instead of 'double'. Up to 8 times faster! configurable sound dynamics limiter, to make audioreactive effects flow with the music, and prevent \"sudden flashes at onsets\". A kind of 'flicker fixer'. improvements for UDP sound sync new frequency scaling options 'square root' and 'logarithmic' - GEQ shows more action in higher frequencies.","title":"Merged into upstream"},{"location":"moonmodules/platformio-entries/","text":"To re-use settings in a consistent way, MoonModules platformio entries conform to the following standard: Overview Brown: existing platform specifiek entries Blue: MoonModules common settings: build flags and lib deps (move settings here if possible) Orange: Base entries: only minimal settings, where possible move to common settings (blue), used by environment settings Green: Environment entries => use to generate bins using WLED_RELEASE_NAME White text: settings added. If no white text, settings should come from other entries (except WLED_RELEASE_NAME in environment entries) Remarks: build flags cannot be overwritten in entries using extends. Example is WLED_RELEASE_NAME: only defined in environment entries, not in base (orange) or common settings (blue). The arrows indicate re-use using ${} and the extends keyword. Bin name of an environment entry is derived as follows: WLEDMM_WLED_RELEASE_NAME_VERSION.bin To do Remove / evaluate (commented) settings from base entries and move to common settings: -D WLED_USE_MY_CONFIG -D WLED_WATCHDOG_TIMEOUT=0 #-D WLED_DISABLE_BROWNOUT_DET -D ARDUINO_USB_CDC_ON_BOOT=0 ; needed for arduino-esp32 >=2.0.4; avoids errors on startup ; -D WLED_DISABLE_LOXONE ; -D WLED_DISABLE_ALEXA ; -D WLED_DISABLE_HUESYNC ; -D WLED_DISABLE_MQTT ; -D WLED_DISABLE_INFRARED ; -D WLED_ENABLE_DMX ; -D WLED_DEBUG ; -D SR_DEBUG ; -D MIC_LOGGER Cleanup / convert old entries Above structure is in current setup repeated for other boards / frameworks. Need to find a way to not repeat all of this, e.g. by replacing brown and blue settings by others... Fork specific info WLED SR This is also ported to WLEDSR. WLED AC No plans yet","title":"Platformio entries"},{"location":"moonmodules/platformio-entries/#overview","text":"Brown: existing platform specifiek entries Blue: MoonModules common settings: build flags and lib deps (move settings here if possible) Orange: Base entries: only minimal settings, where possible move to common settings (blue), used by environment settings Green: Environment entries => use to generate bins using WLED_RELEASE_NAME White text: settings added. If no white text, settings should come from other entries (except WLED_RELEASE_NAME in environment entries) Remarks: build flags cannot be overwritten in entries using extends. Example is WLED_RELEASE_NAME: only defined in environment entries, not in base (orange) or common settings (blue). The arrows indicate re-use using ${} and the extends keyword. Bin name of an environment entry is derived as follows: WLEDMM_WLED_RELEASE_NAME_VERSION.bin","title":"Overview"},{"location":"moonmodules/platformio-entries/#to-do","text":"Remove / evaluate (commented) settings from base entries and move to common settings: -D WLED_USE_MY_CONFIG -D WLED_WATCHDOG_TIMEOUT=0 #-D WLED_DISABLE_BROWNOUT_DET -D ARDUINO_USB_CDC_ON_BOOT=0 ; needed for arduino-esp32 >=2.0.4; avoids errors on startup ; -D WLED_DISABLE_LOXONE ; -D WLED_DISABLE_ALEXA ; -D WLED_DISABLE_HUESYNC ; -D WLED_DISABLE_MQTT ; -D WLED_DISABLE_INFRARED ; -D WLED_ENABLE_DMX ; -D WLED_DEBUG ; -D SR_DEBUG ; -D MIC_LOGGER Cleanup / convert old entries Above structure is in current setup repeated for other boards / frameworks. Need to find a way to not repeat all of this, e.g. by replacing brown and blue settings by others...","title":"To do"},{"location":"moonmodules/platformio-entries/#fork-specific-info","text":"","title":"Fork specific info"},{"location":"moonmodules/platformio-entries/#wled-sr","text":"This is also ported to WLEDSR.","title":"WLED SR"},{"location":"moonmodules/platformio-entries/#wled-ac","text":"No plans yet","title":"WLED AC"},{"location":"moonmodules/preset-api-commands/","text":"New in 0.14 key what value remarks m12 Exand1D 0=Pixels, 1=Bar, 2=Arc, 3=Corner, 4=jMap, 5=Circles, 6=Block 4,5,6 not in WLED AC ssim sound sim 0=BeatSin, 1=WeWillRockYou, 2=U10_3, 3=U14_3 See also Features/Presets Fork specific info WLED SR Not in WLEDSR","title":"Preset API commands"},{"location":"moonmodules/preset-api-commands/#new-in-014","text":"key what value remarks m12 Exand1D 0=Pixels, 1=Bar, 2=Arc, 3=Corner, 4=jMap, 5=Circles, 6=Block 4,5,6 not in WLED AC ssim sound sim 0=BeatSin, 1=WeWillRockYou, 2=U10_3, 3=U14_3 See also Features/Presets","title":"New in 0.14"},{"location":"moonmodules/preset-api-commands/#fork-specific-info","text":"","title":"Fork specific info"},{"location":"moonmodules/preset-api-commands/#wled-sr","text":"Not in WLEDSR","title":"WLED SR"},{"location":"moonmodules/wip/","text":"This page is work in progress Check WLED MoonModules Wiki for original content Template text: Fork specific info WLED SR","title":"Multiple Segment Effects"},{"location":"moonmodules/wip/#fork-specific-info","text":"","title":"Fork specific info"},{"location":"moonmodules/wip/#wled-sr","text":"","title":"WLED SR"},{"location":"soundreactive/wip/","text":"This page is work in progress Check WLED Atuline Wiki for original content Template text: Fork specific info WLED SR","title":"WIP"},{"location":"soundreactive/wip/#fork-specific-info","text":"","title":"Fork specific info"},{"location":"soundreactive/wip/#wled-sr","text":"","title":"WLED SR"}]}